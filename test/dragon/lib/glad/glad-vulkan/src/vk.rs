pub use self::types::*;
pub use self::enumerations::*;
pub use self::functions::*;

use std::os::raw::c_void;


#[derive(Copy, Clone)]
struct FnPtr {
    ptr: *const c_void,
    is_loaded: bool
}

#[allow(dead_code)]
impl FnPtr {
    fn new(ptr: *const c_void) -> FnPtr {
        if !ptr.is_null() {
            FnPtr { ptr, is_loaded: true }
        } else {
            FnPtr { ptr: FnPtr::not_initialized as *const c_void, is_loaded: false }
        }
    }

    fn set_ptr(&mut self, ptr: *const c_void) {
        *self = Self::new(ptr);
    }
    
    fn aliased(&mut self, other: &FnPtr) {
        if !self.is_loaded && other.is_loaded {
            *self = *other;
        }
    }

    #[inline(never)]
    fn not_initialized() -> ! { panic!("vulkan: function not initialized") }
}

unsafe impl Sync for FnPtr {}
unsafe impl Send for FnPtr {}

pub mod types {
#![allow(dead_code, non_camel_case_types, non_snake_case)]


use std;
use std::os::raw::*;

// types required for: xcb
pub type xcb_connection_t = std::os::raw::c_void;
pub type xcb_window_t = u32;
pub type xcb_visualid_t = u32;
// types required for: xlib(_xrandr)
pub type Display = std::os::raw::c_void;
pub type RROutput = std::os::raw::c_ulong;
pub type Window = std::os::raw::c_ulong;
pub type VisualID = std::os::raw::c_ulong;
// types required for: win32
pub type BOOL = std::os::raw::c_int;
pub type DWORD = std::os::raw::c_ulong;
pub type LPVOID = *mut std::os::raw::c_void;
pub type HANDLE = *mut std::os::raw::c_void;
pub type HMONITOR = *mut std::os::raw::c_void;
pub type WCHAR = u16;
pub type LPCWSTR = *const WCHAR;
pub type HINSTANCE = *mut std::os::raw::c_void;
pub type HWND = *mut std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SECURITY_ATTRIBUTES {
    nLength: DWORD,
    lpSecurityDescriptor: LPVOID,
    bInheritHandle: BOOL,
}
// types required for: wayland
pub type wl_display = std::os::raw::c_void;
pub type wl_surface = std::os::raw::c_void;
// types required for: mir
pub type MirConnection = std::os::raw::c_void;
pub type MirSurface = std::os::raw::c_void;


#[macro_export]
macro_rules! VK_MAKE_VERSION {
    ($major:expr, $minor:expr, $patch:expr) => ((($major) << 22) | (($minor) << 12) | ($patch));
}

#[macro_export]
macro_rules! VK_VERSION_MAJOR { ($version:expr) => ($version >> 22); }
#[macro_export]
macro_rules! VK_VERSION_MINOR { ($version:expr) => (($version >> 12) & 0x3ff); }
#[macro_export]
macro_rules! VK_VERSION_PATCH { ($version:expr) => ($version & 0xfff); }

#[macro_export]
macro_rules! VK_DEFINE_NON_DISPATCHABLE_HANDLE {
    ($name:ident) => (
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct $name(u64);
    );
}

#[macro_export]
macro_rules! VK_DEFINE_HANDLE {
    ($name:ident) => (
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct $name(*const std::os::raw::c_void);
    );
}

pub type ANativeWindow = std::os::raw::c_void;
pub type AHardwareBuffer = std::os::raw::c_void;
pub type CAMetalLayer = std::os::raw::c_void;
VK_DEFINE_HANDLE!(VkInstance);
VK_DEFINE_HANDLE!(VkPhysicalDevice);
VK_DEFINE_HANDLE!(VkDevice);
VK_DEFINE_HANDLE!(VkQueue);
VK_DEFINE_HANDLE!(VkCommandBuffer);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkDeviceMemory);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkCommandPool);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkBuffer);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkBufferView);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkImage);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkImageView);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkShaderModule);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkPipeline);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkPipelineLayout);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkSampler);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkDescriptorSet);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkDescriptorSetLayout);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkDescriptorPool);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkFence);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkSemaphore);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkEvent);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkQueryPool);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkFramebuffer);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkRenderPass);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkPipelineCache);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkIndirectCommandsLayoutNV);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkDescriptorUpdateTemplate);
pub type VkDescriptorUpdateTemplateKHR = VkDescriptorUpdateTemplate;
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkSamplerYcbcrConversion);
pub type VkSamplerYcbcrConversionKHR = VkSamplerYcbcrConversion;
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkValidationCacheEXT);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkAccelerationStructureNV);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkPerformanceConfigurationINTEL);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkDeferredOperationKHR);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkPrivateDataSlot);
pub type VkPrivateDataSlotEXT = VkPrivateDataSlot;
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkDisplayKHR);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkDisplayModeKHR);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkSurfaceKHR);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkSwapchainKHR);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkDebugReportCallbackEXT);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkDebugUtilsMessengerEXT);

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkAttachmentLoadOp {
     VK_ATTACHMENT_LOAD_OP_LOAD = 0,
     VK_ATTACHMENT_LOAD_OP_CLEAR = 1,
     VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkAttachmentStoreOp {
     VK_ATTACHMENT_STORE_OP_STORE = 0,
     VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,
     VK_ATTACHMENT_STORE_OP_NONE = 1000301000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkBlendFactor {
     VK_BLEND_FACTOR_ZERO = 0,
     VK_BLEND_FACTOR_ONE = 1,
     VK_BLEND_FACTOR_SRC_COLOR = 2,
     VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
     VK_BLEND_FACTOR_DST_COLOR = 4,
     VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
     VK_BLEND_FACTOR_SRC_ALPHA = 6,
     VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
     VK_BLEND_FACTOR_DST_ALPHA = 8,
     VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
     VK_BLEND_FACTOR_CONSTANT_COLOR = 10,
     VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
     VK_BLEND_FACTOR_CONSTANT_ALPHA = 12,
     VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
     VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
     VK_BLEND_FACTOR_SRC1_COLOR = 15,
     VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
     VK_BLEND_FACTOR_SRC1_ALPHA = 17,
     VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkBlendOp {
     VK_BLEND_OP_ADD = 0,
     VK_BLEND_OP_SUBTRACT = 1,
     VK_BLEND_OP_REVERSE_SUBTRACT = 2,
     VK_BLEND_OP_MIN = 3,
     VK_BLEND_OP_MAX = 4,
     VK_BLEND_OP_ZERO_EXT = 1000148000,
     VK_BLEND_OP_SRC_EXT = 1000148001,
     VK_BLEND_OP_DST_EXT = 1000148002,
     VK_BLEND_OP_SRC_OVER_EXT = 1000148003,
     VK_BLEND_OP_DST_OVER_EXT = 1000148004,
     VK_BLEND_OP_SRC_IN_EXT = 1000148005,
     VK_BLEND_OP_DST_IN_EXT = 1000148006,
     VK_BLEND_OP_SRC_OUT_EXT = 1000148007,
     VK_BLEND_OP_DST_OUT_EXT = 1000148008,
     VK_BLEND_OP_SRC_ATOP_EXT = 1000148009,
     VK_BLEND_OP_DST_ATOP_EXT = 1000148010,
     VK_BLEND_OP_XOR_EXT = 1000148011,
     VK_BLEND_OP_MULTIPLY_EXT = 1000148012,
     VK_BLEND_OP_SCREEN_EXT = 1000148013,
     VK_BLEND_OP_OVERLAY_EXT = 1000148014,
     VK_BLEND_OP_DARKEN_EXT = 1000148015,
     VK_BLEND_OP_LIGHTEN_EXT = 1000148016,
     VK_BLEND_OP_COLORDODGE_EXT = 1000148017,
     VK_BLEND_OP_COLORBURN_EXT = 1000148018,
     VK_BLEND_OP_HARDLIGHT_EXT = 1000148019,
     VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020,
     VK_BLEND_OP_DIFFERENCE_EXT = 1000148021,
     VK_BLEND_OP_EXCLUSION_EXT = 1000148022,
     VK_BLEND_OP_INVERT_EXT = 1000148023,
     VK_BLEND_OP_INVERT_RGB_EXT = 1000148024,
     VK_BLEND_OP_LINEARDODGE_EXT = 1000148025,
     VK_BLEND_OP_LINEARBURN_EXT = 1000148026,
     VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027,
     VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028,
     VK_BLEND_OP_PINLIGHT_EXT = 1000148029,
     VK_BLEND_OP_HARDMIX_EXT = 1000148030,
     VK_BLEND_OP_HSL_HUE_EXT = 1000148031,
     VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032,
     VK_BLEND_OP_HSL_COLOR_EXT = 1000148033,
     VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034,
     VK_BLEND_OP_PLUS_EXT = 1000148035,
     VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036,
     VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037,
     VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038,
     VK_BLEND_OP_MINUS_EXT = 1000148039,
     VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040,
     VK_BLEND_OP_CONTRAST_EXT = 1000148041,
     VK_BLEND_OP_INVERT_OVG_EXT = 1000148042,
     VK_BLEND_OP_RED_EXT = 1000148043,
     VK_BLEND_OP_GREEN_EXT = 1000148044,
     VK_BLEND_OP_BLUE_EXT = 1000148045,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkBorderColor {
     VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
     VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
     VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
     VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3,
     VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
     VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5,
     VK_BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003,
     VK_BORDER_COLOR_INT_CUSTOM_EXT = 1000287004,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkFramebufferCreateFlagBits {
     VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkRenderPassCreateFlagBits {
     VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSamplerCreateFlagBits {
     VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 1,
     VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPipelineCacheHeaderVersion {
     VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPipelineCacheCreateFlagBits {
     VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPipelineShaderStageCreateFlagBits {
     VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT = 1,
     VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDescriptorSetLayoutCreateFlagBits {
     VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 2,
     VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDeviceQueueCreateFlagBits {
     VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkBufferCreateFlagBits {
     VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 1,
     VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2,
     VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 4,
     VK_BUFFER_CREATE_PROTECTED_BIT = 8,
     VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 16,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkBufferUsageFlagBits {
     VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 1,
     VK_BUFFER_USAGE_TRANSFER_DST_BIT = 2,
     VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4,
     VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8,
     VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16,
     VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 32,
     VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 64,
     VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 128,
     VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256,
     VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 131072,
     VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048,
     VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096,
     VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 512,
     VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = 1024,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkColorComponentFlagBits {
     VK_COLOR_COMPONENT_R_BIT = 1,
     VK_COLOR_COMPONENT_G_BIT = 2,
     VK_COLOR_COMPONENT_B_BIT = 4,
     VK_COLOR_COMPONENT_A_BIT = 8,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkComponentSwizzle {
     VK_COMPONENT_SWIZZLE_IDENTITY = 0,
     VK_COMPONENT_SWIZZLE_ZERO = 1,
     VK_COMPONENT_SWIZZLE_ONE = 2,
     VK_COMPONENT_SWIZZLE_R = 3,
     VK_COMPONENT_SWIZZLE_G = 4,
     VK_COMPONENT_SWIZZLE_B = 5,
     VK_COMPONENT_SWIZZLE_A = 6,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCommandPoolCreateFlagBits {
     VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 1,
     VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2,
     VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCommandPoolResetFlagBits {
     VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCommandBufferResetFlagBits {
     VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCommandBufferLevel {
     VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0,
     VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCommandBufferUsageFlagBits {
     VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1,
     VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2,
     VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCompareOp {
     VK_COMPARE_OP_NEVER = 0,
     VK_COMPARE_OP_LESS = 1,
     VK_COMPARE_OP_EQUAL = 2,
     VK_COMPARE_OP_LESS_OR_EQUAL = 3,
     VK_COMPARE_OP_GREATER = 4,
     VK_COMPARE_OP_NOT_EQUAL = 5,
     VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
     VK_COMPARE_OP_ALWAYS = 7,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCullModeFlagBits {
     VK_CULL_MODE_NONE = 0,
     VK_CULL_MODE_FRONT_BIT = 1,
     VK_CULL_MODE_BACK_BIT = 2,
     VK_CULL_MODE_FRONT_AND_BACK = 0x00000003,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDescriptorType {
     VK_DESCRIPTOR_TYPE_SAMPLER = 0,
     VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
     VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
     VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
     VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
     VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
     VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
     VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
     VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
     VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
     VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
     VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK = 1000138000,
     VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDynamicState {
     VK_DYNAMIC_STATE_VIEWPORT = 0,
     VK_DYNAMIC_STATE_SCISSOR = 1,
     VK_DYNAMIC_STATE_LINE_WIDTH = 2,
     VK_DYNAMIC_STATE_DEPTH_BIAS = 3,
     VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,
     VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,
     VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
     VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
     VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8,
     VK_DYNAMIC_STATE_CULL_MODE = 1000267000,
     VK_DYNAMIC_STATE_FRONT_FACE = 1000267001,
     VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY = 1000267002,
     VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT = 1000267003,
     VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT = 1000267004,
     VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE = 1000267005,
     VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE = 1000267006,
     VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE = 1000267007,
     VK_DYNAMIC_STATE_DEPTH_COMPARE_OP = 1000267008,
     VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE = 1000267009,
     VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE = 1000267010,
     VK_DYNAMIC_STATE_STENCIL_OP = 1000267011,
     VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000,
     VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000,
     VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000,
     VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004,
     VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006,
     VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001,
     VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkFenceCreateFlagBits {
     VK_FENCE_CREATE_SIGNALED_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPolygonMode {
     VK_POLYGON_MODE_FILL = 0,
     VK_POLYGON_MODE_LINE = 1,
     VK_POLYGON_MODE_POINT = 2,
     VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkFormat {
     VK_FORMAT_UNDEFINED = 0,
     VK_FORMAT_R4G4_UNORM_PACK8 = 1,
     VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
     VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
     VK_FORMAT_R5G6B5_UNORM_PACK16 = 4,
     VK_FORMAT_B5G6R5_UNORM_PACK16 = 5,
     VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
     VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
     VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
     VK_FORMAT_R8_UNORM = 9,
     VK_FORMAT_R8_SNORM = 10,
     VK_FORMAT_R8_USCALED = 11,
     VK_FORMAT_R8_SSCALED = 12,
     VK_FORMAT_R8_UINT = 13,
     VK_FORMAT_R8_SINT = 14,
     VK_FORMAT_R8_SRGB = 15,
     VK_FORMAT_R8G8_UNORM = 16,
     VK_FORMAT_R8G8_SNORM = 17,
     VK_FORMAT_R8G8_USCALED = 18,
     VK_FORMAT_R8G8_SSCALED = 19,
     VK_FORMAT_R8G8_UINT = 20,
     VK_FORMAT_R8G8_SINT = 21,
     VK_FORMAT_R8G8_SRGB = 22,
     VK_FORMAT_R8G8B8_UNORM = 23,
     VK_FORMAT_R8G8B8_SNORM = 24,
     VK_FORMAT_R8G8B8_USCALED = 25,
     VK_FORMAT_R8G8B8_SSCALED = 26,
     VK_FORMAT_R8G8B8_UINT = 27,
     VK_FORMAT_R8G8B8_SINT = 28,
     VK_FORMAT_R8G8B8_SRGB = 29,
     VK_FORMAT_B8G8R8_UNORM = 30,
     VK_FORMAT_B8G8R8_SNORM = 31,
     VK_FORMAT_B8G8R8_USCALED = 32,
     VK_FORMAT_B8G8R8_SSCALED = 33,
     VK_FORMAT_B8G8R8_UINT = 34,
     VK_FORMAT_B8G8R8_SINT = 35,
     VK_FORMAT_B8G8R8_SRGB = 36,
     VK_FORMAT_R8G8B8A8_UNORM = 37,
     VK_FORMAT_R8G8B8A8_SNORM = 38,
     VK_FORMAT_R8G8B8A8_USCALED = 39,
     VK_FORMAT_R8G8B8A8_SSCALED = 40,
     VK_FORMAT_R8G8B8A8_UINT = 41,
     VK_FORMAT_R8G8B8A8_SINT = 42,
     VK_FORMAT_R8G8B8A8_SRGB = 43,
     VK_FORMAT_B8G8R8A8_UNORM = 44,
     VK_FORMAT_B8G8R8A8_SNORM = 45,
     VK_FORMAT_B8G8R8A8_USCALED = 46,
     VK_FORMAT_B8G8R8A8_SSCALED = 47,
     VK_FORMAT_B8G8R8A8_UINT = 48,
     VK_FORMAT_B8G8R8A8_SINT = 49,
     VK_FORMAT_B8G8R8A8_SRGB = 50,
     VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
     VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
     VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
     VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
     VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
     VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
     VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
     VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
     VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
     VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
     VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
     VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
     VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
     VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
     VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
     VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
     VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
     VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
     VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
     VK_FORMAT_R16_UNORM = 70,
     VK_FORMAT_R16_SNORM = 71,
     VK_FORMAT_R16_USCALED = 72,
     VK_FORMAT_R16_SSCALED = 73,
     VK_FORMAT_R16_UINT = 74,
     VK_FORMAT_R16_SINT = 75,
     VK_FORMAT_R16_SFLOAT = 76,
     VK_FORMAT_R16G16_UNORM = 77,
     VK_FORMAT_R16G16_SNORM = 78,
     VK_FORMAT_R16G16_USCALED = 79,
     VK_FORMAT_R16G16_SSCALED = 80,
     VK_FORMAT_R16G16_UINT = 81,
     VK_FORMAT_R16G16_SINT = 82,
     VK_FORMAT_R16G16_SFLOAT = 83,
     VK_FORMAT_R16G16B16_UNORM = 84,
     VK_FORMAT_R16G16B16_SNORM = 85,
     VK_FORMAT_R16G16B16_USCALED = 86,
     VK_FORMAT_R16G16B16_SSCALED = 87,
     VK_FORMAT_R16G16B16_UINT = 88,
     VK_FORMAT_R16G16B16_SINT = 89,
     VK_FORMAT_R16G16B16_SFLOAT = 90,
     VK_FORMAT_R16G16B16A16_UNORM = 91,
     VK_FORMAT_R16G16B16A16_SNORM = 92,
     VK_FORMAT_R16G16B16A16_USCALED = 93,
     VK_FORMAT_R16G16B16A16_SSCALED = 94,
     VK_FORMAT_R16G16B16A16_UINT = 95,
     VK_FORMAT_R16G16B16A16_SINT = 96,
     VK_FORMAT_R16G16B16A16_SFLOAT = 97,
     VK_FORMAT_R32_UINT = 98,
     VK_FORMAT_R32_SINT = 99,
     VK_FORMAT_R32_SFLOAT = 100,
     VK_FORMAT_R32G32_UINT = 101,
     VK_FORMAT_R32G32_SINT = 102,
     VK_FORMAT_R32G32_SFLOAT = 103,
     VK_FORMAT_R32G32B32_UINT = 104,
     VK_FORMAT_R32G32B32_SINT = 105,
     VK_FORMAT_R32G32B32_SFLOAT = 106,
     VK_FORMAT_R32G32B32A32_UINT = 107,
     VK_FORMAT_R32G32B32A32_SINT = 108,
     VK_FORMAT_R32G32B32A32_SFLOAT = 109,
     VK_FORMAT_R64_UINT = 110,
     VK_FORMAT_R64_SINT = 111,
     VK_FORMAT_R64_SFLOAT = 112,
     VK_FORMAT_R64G64_UINT = 113,
     VK_FORMAT_R64G64_SINT = 114,
     VK_FORMAT_R64G64_SFLOAT = 115,
     VK_FORMAT_R64G64B64_UINT = 116,
     VK_FORMAT_R64G64B64_SINT = 117,
     VK_FORMAT_R64G64B64_SFLOAT = 118,
     VK_FORMAT_R64G64B64A64_UINT = 119,
     VK_FORMAT_R64G64B64A64_SINT = 120,
     VK_FORMAT_R64G64B64A64_SFLOAT = 121,
     VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
     VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
     VK_FORMAT_D16_UNORM = 124,
     VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
     VK_FORMAT_D32_SFLOAT = 126,
     VK_FORMAT_S8_UINT = 127,
     VK_FORMAT_D16_UNORM_S8_UINT = 128,
     VK_FORMAT_D24_UNORM_S8_UINT = 129,
     VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
     VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
     VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
     VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
     VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
     VK_FORMAT_BC2_UNORM_BLOCK = 135,
     VK_FORMAT_BC2_SRGB_BLOCK = 136,
     VK_FORMAT_BC3_UNORM_BLOCK = 137,
     VK_FORMAT_BC3_SRGB_BLOCK = 138,
     VK_FORMAT_BC4_UNORM_BLOCK = 139,
     VK_FORMAT_BC4_SNORM_BLOCK = 140,
     VK_FORMAT_BC5_UNORM_BLOCK = 141,
     VK_FORMAT_BC5_SNORM_BLOCK = 142,
     VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
     VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
     VK_FORMAT_BC7_UNORM_BLOCK = 145,
     VK_FORMAT_BC7_SRGB_BLOCK = 146,
     VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
     VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
     VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
     VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
     VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
     VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
     VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
     VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
     VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
     VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
     VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
     VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
     VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
     VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
     VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
     VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
     VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
     VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
     VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
     VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
     VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
     VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
     VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
     VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
     VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
     VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
     VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
     VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
     VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
     VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
     VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
     VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
     VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
     VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
     VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
     VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
     VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
     VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,
     VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000,
     VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001,
     VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002,
     VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003,
     VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004,
     VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005,
     VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006,
     VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007,
     VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008,
     VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009,
     VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010,
     VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011,
     VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012,
     VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013,
     VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014,
     VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015,
     VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016,
     VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017,
     VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018,
     VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019,
     VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020,
     VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021,
     VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022,
     VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023,
     VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024,
     VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025,
     VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026,
     VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027,
     VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028,
     VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029,
     VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030,
     VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031,
     VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032,
     VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033,
     VK_FORMAT_A4R4G4B4_UNORM_PACK16 = 1000340000,
     VK_FORMAT_A4B4G4R4_UNORM_PACK16 = 1000340001,
     VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK = 1000066000,
     VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK = 1000066001,
     VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK = 1000066002,
     VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK = 1000066003,
     VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK = 1000066004,
     VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK = 1000066005,
     VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK = 1000066006,
     VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK = 1000066007,
     VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK = 1000066008,
     VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK = 1000066009,
     VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK = 1000066010,
     VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK = 1000066011,
     VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK = 1000066012,
     VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK = 1000066013,
     VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000,
     VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001,
     VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002,
     VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003,
     VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004,
     VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005,
     VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006,
     VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkFormatFeatureFlagBits {
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1,
     VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2,
     VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8,
     VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16,
     VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32,
     VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64,
     VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128,
     VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256,
     VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512,
     VK_FORMAT_FEATURE_BLIT_SRC_BIT = 1024,
     VK_FORMAT_FEATURE_BLIT_DST_BIT = 2048,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096,
     VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 16384,
     VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 32768,
     VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 131072,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152,
     VK_FORMAT_FEATURE_DISJOINT_BIT = 4194304,
     VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 8388608,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 65536,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 8192,
     VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkFrontFace {
     VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,
     VK_FRONT_FACE_CLOCKWISE = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkImageAspectFlagBits {
     VK_IMAGE_ASPECT_COLOR_BIT = 1,
     VK_IMAGE_ASPECT_DEPTH_BIT = 2,
     VK_IMAGE_ASPECT_STENCIL_BIT = 4,
     VK_IMAGE_ASPECT_METADATA_BIT = 8,
     VK_IMAGE_ASPECT_PLANE_0_BIT = 16,
     VK_IMAGE_ASPECT_PLANE_1_BIT = 32,
     VK_IMAGE_ASPECT_PLANE_2_BIT = 64,
     VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 128,
     VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 256,
     VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 512,
     VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 1024,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkImageCreateFlagBits {
     VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 1,
     VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2,
     VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 4,
     VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8,
     VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16,
     VK_IMAGE_CREATE_ALIAS_BIT = 1024,
     VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 64,
     VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 32,
     VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 128,
     VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 256,
     VK_IMAGE_CREATE_PROTECTED_BIT = 2048,
     VK_IMAGE_CREATE_DISJOINT_BIT = 512,
     VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 8192,
     VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 4096,
     VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 16384,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkImageLayout {
     VK_IMAGE_LAYOUT_UNDEFINED = 0,
     VK_IMAGE_LAYOUT_GENERAL = 1,
     VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
     VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
     VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
     VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
     VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
     VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
     VK_IMAGE_LAYOUT_PREINITIALIZED = 8,
     VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
     VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
     VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000,
     VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001,
     VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002,
     VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003,
     VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002,
     VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000,
     VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkImageTiling {
     VK_IMAGE_TILING_OPTIMAL = 0,
     VK_IMAGE_TILING_LINEAR = 1,
     VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkImageType {
     VK_IMAGE_TYPE_1D = 0,
     VK_IMAGE_TYPE_2D = 1,
     VK_IMAGE_TYPE_3D = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkImageUsageFlagBits {
     VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 1,
     VK_IMAGE_USAGE_TRANSFER_DST_BIT = 2,
     VK_IMAGE_USAGE_SAMPLED_BIT = 4,
     VK_IMAGE_USAGE_STORAGE_BIT = 8,
     VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16,
     VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32,
     VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64,
     VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128,
     VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 512,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkImageViewCreateFlagBits {
     VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 1,
     VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkImageViewType {
     VK_IMAGE_VIEW_TYPE_1D = 0,
     VK_IMAGE_VIEW_TYPE_2D = 1,
     VK_IMAGE_VIEW_TYPE_3D = 2,
     VK_IMAGE_VIEW_TYPE_CUBE = 3,
     VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4,
     VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5,
     VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSharingMode {
     VK_SHARING_MODE_EXCLUSIVE = 0,
     VK_SHARING_MODE_CONCURRENT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkIndexType {
     VK_INDEX_TYPE_UINT16 = 0,
     VK_INDEX_TYPE_UINT32 = 1,
     VK_INDEX_TYPE_NONE_KHR = 1000165000,
     VK_INDEX_TYPE_UINT8_EXT = 1000265000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkLogicOp {
     VK_LOGIC_OP_CLEAR = 0,
     VK_LOGIC_OP_AND = 1,
     VK_LOGIC_OP_AND_REVERSE = 2,
     VK_LOGIC_OP_COPY = 3,
     VK_LOGIC_OP_AND_INVERTED = 4,
     VK_LOGIC_OP_NO_OP = 5,
     VK_LOGIC_OP_XOR = 6,
     VK_LOGIC_OP_OR = 7,
     VK_LOGIC_OP_NOR = 8,
     VK_LOGIC_OP_EQUIVALENT = 9,
     VK_LOGIC_OP_INVERT = 10,
     VK_LOGIC_OP_OR_REVERSE = 11,
     VK_LOGIC_OP_COPY_INVERTED = 12,
     VK_LOGIC_OP_OR_INVERTED = 13,
     VK_LOGIC_OP_NAND = 14,
     VK_LOGIC_OP_SET = 15,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkMemoryHeapFlagBits {
     VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 1,
     VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkAccessFlagBits {
     VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 1,
     VK_ACCESS_INDEX_READ_BIT = 2,
     VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4,
     VK_ACCESS_UNIFORM_READ_BIT = 8,
     VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 16,
     VK_ACCESS_SHADER_READ_BIT = 32,
     VK_ACCESS_SHADER_WRITE_BIT = 64,
     VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 128,
     VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256,
     VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512,
     VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024,
     VK_ACCESS_TRANSFER_READ_BIT = 2048,
     VK_ACCESS_TRANSFER_WRITE_BIT = 4096,
     VK_ACCESS_HOST_READ_BIT = 8192,
     VK_ACCESS_HOST_WRITE_BIT = 16384,
     VK_ACCESS_MEMORY_READ_BIT = 32768,
     VK_ACCESS_MEMORY_WRITE_BIT = 65536,
     VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432,
     VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864,
     VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728,
     VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576,
     VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288,
     VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152,
     VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304,
     VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216,
     VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 131072,
     VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkMemoryPropertyFlagBits {
     VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1,
     VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2,
     VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 4,
     VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 8,
     VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16,
     VK_MEMORY_PROPERTY_PROTECTED_BIT = 32,
     VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 64,
     VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 128,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPhysicalDeviceType {
     VK_PHYSICAL_DEVICE_TYPE_OTHER = 0,
     VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
     VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,
     VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,
     VK_PHYSICAL_DEVICE_TYPE_CPU = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPipelineBindPoint {
     VK_PIPELINE_BIND_POINT_GRAPHICS = 0,
     VK_PIPELINE_BIND_POINT_COMPUTE = 1,
     VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPipelineCreateFlagBits {
     VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1,
     VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2,
     VK_PIPELINE_CREATE_DERIVATIVE_BIT = 4,
     VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8,
     VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = 16,
     VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT = 256,
     VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT = 512,
     VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 32,
     VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 64,
     VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128,
     VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 262144,
     VK_PIPELINE_CREATE_LIBRARY_BIT_KHR = 2048,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPrimitiveTopology {
     VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
     VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
     VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
     VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
     VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
     VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
     VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
     VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
     VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
     VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
     VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkQueryControlFlagBits {
     VK_QUERY_CONTROL_PRECISE_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkQueryPipelineStatisticFlagBits {
     VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1,
     VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2,
     VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4,
     VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8,
     VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16,
     VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32,
     VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64,
     VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128,
     VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256,
     VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512,
     VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkQueryResultFlagBits {
     VK_QUERY_RESULT_64_BIT = 1,
     VK_QUERY_RESULT_WAIT_BIT = 2,
     VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 4,
     VK_QUERY_RESULT_PARTIAL_BIT = 8,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkQueryType {
     VK_QUERY_TYPE_OCCLUSION = 0,
     VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,
     VK_QUERY_TYPE_TIMESTAMP = 2,
     VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004,
     VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000,
     VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000,
     VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkQueueFlagBits {
     VK_QUEUE_GRAPHICS_BIT = 1,
     VK_QUEUE_COMPUTE_BIT = 2,
     VK_QUEUE_TRANSFER_BIT = 4,
     VK_QUEUE_SPARSE_BINDING_BIT = 8,
     VK_QUEUE_PROTECTED_BIT = 16,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSubpassContents {
     VK_SUBPASS_CONTENTS_INLINE = 0,
     VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkResult {
     VK_SUCCESS = 0,
     VK_NOT_READY = 1,
     VK_TIMEOUT = 2,
     VK_EVENT_SET = 3,
     VK_EVENT_RESET = 4,
     VK_INCOMPLETE = 5,
     VK_ERROR_OUT_OF_HOST_MEMORY = -1,
     VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,
     VK_ERROR_INITIALIZATION_FAILED = -3,
     VK_ERROR_DEVICE_LOST = -4,
     VK_ERROR_MEMORY_MAP_FAILED = -5,
     VK_ERROR_LAYER_NOT_PRESENT = -6,
     VK_ERROR_EXTENSION_NOT_PRESENT = -7,
     VK_ERROR_FEATURE_NOT_PRESENT = -8,
     VK_ERROR_INCOMPATIBLE_DRIVER = -9,
     VK_ERROR_TOO_MANY_OBJECTS = -10,
     VK_ERROR_FORMAT_NOT_SUPPORTED = -11,
     VK_ERROR_FRAGMENTED_POOL = -12,
     VK_ERROR_UNKNOWN = -13,
     VK_ERROR_OUT_OF_POOL_MEMORY = -1000069000,
     VK_ERROR_INVALID_EXTERNAL_HANDLE = -1000072003,
     VK_ERROR_FRAGMENTATION = -1000161000,
     VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = -1000257000,
     VK_PIPELINE_COMPILE_REQUIRED = 1000297000,
     VK_ERROR_SURFACE_LOST_KHR = -1000000000,
     VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,
     VK_SUBOPTIMAL_KHR = 1000001003,
     VK_ERROR_OUT_OF_DATE_KHR = -1000001004,
     VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,
     VK_ERROR_VALIDATION_FAILED_EXT = -1000011001,
     VK_ERROR_INVALID_SHADER_NV = -1000012000,
     VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000,
     VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000,
     VK_THREAD_IDLE_KHR = 1000268000,
     VK_THREAD_DONE_KHR = 1000268001,
     VK_OPERATION_DEFERRED_KHR = 1000268002,
     VK_OPERATION_NOT_DEFERRED_KHR = 1000268003,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkShaderStageFlagBits {
     VK_SHADER_STAGE_VERTEX_BIT = 1,
     VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2,
     VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4,
     VK_SHADER_STAGE_GEOMETRY_BIT = 8,
     VK_SHADER_STAGE_FRAGMENT_BIT = 16,
     VK_SHADER_STAGE_COMPUTE_BIT = 32,
     VK_SHADER_STAGE_ALL_GRAPHICS = 0x0000001F,
     VK_SHADER_STAGE_ALL = 0x7FFFFFFF,
     VK_SHADER_STAGE_RAYGEN_BIT_KHR = 256,
     VK_SHADER_STAGE_ANY_HIT_BIT_KHR = 512,
     VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 1024,
     VK_SHADER_STAGE_MISS_BIT_KHR = 2048,
     VK_SHADER_STAGE_INTERSECTION_BIT_KHR = 4096,
     VK_SHADER_STAGE_CALLABLE_BIT_KHR = 8192,
     VK_SHADER_STAGE_TASK_BIT_NV = 64,
     VK_SHADER_STAGE_MESH_BIT_NV = 128,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSparseMemoryBindFlagBits {
     VK_SPARSE_MEMORY_BIND_METADATA_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkStencilFaceFlagBits {
     VK_STENCIL_FACE_FRONT_BIT = 1,
     VK_STENCIL_FACE_BACK_BIT = 2,
     VK_STENCIL_FACE_FRONT_AND_BACK = 0x00000003,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkStencilOp {
     VK_STENCIL_OP_KEEP = 0,
     VK_STENCIL_OP_ZERO = 1,
     VK_STENCIL_OP_REPLACE = 2,
     VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
     VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
     VK_STENCIL_OP_INVERT = 5,
     VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,
     VK_STENCIL_OP_DECREMENT_AND_WRAP = 7,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkStructureType {
     VK_STRUCTURE_TYPE_APPLICATION_INFO = 0,
     VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,
     VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,
     VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,
     VK_STRUCTURE_TYPE_SUBMIT_INFO = 4,
     VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,
     VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,
     VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,
     VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,
     VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,
     VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,
     VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,
     VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,
     VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,
     VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,
     VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,
     VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,
     VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,
     VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
     VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
     VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
     VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
     VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
     VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
     VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
     VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
     VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
     VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
     VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,
     VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,
     VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,
     VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,
     VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
     VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,
     VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,
     VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,
     VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,
     VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,
     VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,
     VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,
     VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,
     VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,
     VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,
     VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,
     VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,
     VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,
     VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,
     VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,
     VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000,
     VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000,
     VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000,
     VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000,
     VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001,
     VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000,
     VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003,
     VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004,
     VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005,
     VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006,
     VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013,
     VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000,
     VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001,
     VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000,
     VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001,
     VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002,
     VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003,
     VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001,
     VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002,
     VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004,
     VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006,
     VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000,
     VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001,
     VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002,
     VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003,
     VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000,
     VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002,
     VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003,
     VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000,
     VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001,
     VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002,
     VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004,
     VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005,
     VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000,
     VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002,
     VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004,
     VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000,
     VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001,
     VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000,
     VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001,
     VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000,
     VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000,
     VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000,
     VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52,
     VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000,
     VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000,
     VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001,
     VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002,
     VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003,
     VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004,
     VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005,
     VK_STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000,
     VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002,
     VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003,
     VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000,
     VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000,
     VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000,
     VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000,
     VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001,
     VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002,
     VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000,
     VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001,
     VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001,
     VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002,
     VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003,
     VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004,
     VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000,
     VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001,
     VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002,
     VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003,
     VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004,
     VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO = 1000192000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES = 1000245000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES = 1000276000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES = 1000295000,
     VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO = 1000295001,
     VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO = 1000295002,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES = 1000297000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES = 1000335000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES = 1000225000,
     VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO = 1000225001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES = 1000225002,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES = 1000138000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES = 1000138001,
     VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK = 1000138002,
     VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO = 1000138003,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES = 1000066000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES = 1000281001,
     VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000,
     VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001,
     VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007,
     VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008,
     VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009,
     VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010,
     VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011,
     VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012,
     VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000,
     VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001,
     VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000,
     VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,
     VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,
     VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,
     VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000,
     VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,
     VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000,
     VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000,
     VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000,
     VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001,
     VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002,
     VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000,
     VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001,
     VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001,
     VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002,
     VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000,
     VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001,
     VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000,
     VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000,
     VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000,
     VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001,
     VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000,
     VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001,
     VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000,
     VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000,
     VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000,
     VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001,
     VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000,
     VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001,
     VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002,
     VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003,
     VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000,
     VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001,
     VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002,
     VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000,
     VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000,
     VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001,
     VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002,
     VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003,
     VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000,
     VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000,
     VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001,
     VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002,
     VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000,
     VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000,
     VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000,
     VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000,
     VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001,
     VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002,
     VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003,
     VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000,
     VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000,
     VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000,
     VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000,
     VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001,
     VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000,
     VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000,
     VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000,
     VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001,
     VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002,
     VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000,
     VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001,
     VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002,
     VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003,
     VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004,
     VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1000116005,
     VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000,
     VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001,
     VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002,
     VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000,
     VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001,
     VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002,
     VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003,
     VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004,
     VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000,
     VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000,
     VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000,
     VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001,
     VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002,
     VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003,
     VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004,
     VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000,
     VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001,
     VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002,
     VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003,
     VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004,
     VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005,
     VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID = 1000129006,
     VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000,
     VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001,
     VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003,
     VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001,
     VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002,
     VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000,
     VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001,
     VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002,
     VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003,
     VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004,
     VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005,
     VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT = 1000158006,
     VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000,
     VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001,
     VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002,
     VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005,
     VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000,
     VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001,
     VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003,
     VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004,
     VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005,
     VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006,
     VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007,
     VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009,
     VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011,
     VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000,
     VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000,
     VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001,
     VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000,
     VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000,
     VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000,
     VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000,
     VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000,
     VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002,
     VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000,
     VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002,
     VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000,
     VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000,
     VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000,
     VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001,
     VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002,
     VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003,
     VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004,
     VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000,
     VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000,
     VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001,
     VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000,
     VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001,
     VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000,
     VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001,
     VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000,
     VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002,
     VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000,
     VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000,
     VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001,
     VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000,
     VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000,
     VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002,
     VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001,
     VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000,
     VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = 1000260000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1000267000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000,
     VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001,
     VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002,
     VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003,
     VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004,
     VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000,
     VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001,
     VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002,
     VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003,
     VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004,
     VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1000277005,
     VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000,
     VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000,
     VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001,
     VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002,
     VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000,
     VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = 1000332000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = 1000332001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = 1000340000,
     VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = 1000346000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSystemAllocationScope {
     VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,
     VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,
     VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2,
     VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,
     VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkInternalAllocationType {
     VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSamplerAddressMode {
     VK_SAMPLER_ADDRESS_MODE_REPEAT = 0,
     VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
     VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
     VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,
     VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkFilter {
     VK_FILTER_NEAREST = 0,
     VK_FILTER_LINEAR = 1,
     VK_FILTER_CUBIC_IMG = 1000015000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSamplerMipmapMode {
     VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,
     VK_SAMPLER_MIPMAP_MODE_LINEAR = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkVertexInputRate {
     VK_VERTEX_INPUT_RATE_VERTEX = 0,
     VK_VERTEX_INPUT_RATE_INSTANCE = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPipelineStageFlagBits {
     VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1,
     VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2,
     VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 4,
     VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 8,
     VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16,
     VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32,
     VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64,
     VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128,
     VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256,
     VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512,
     VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024,
     VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048,
     VK_PIPELINE_STAGE_TRANSFER_BIT = 4096,
     VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192,
     VK_PIPELINE_STAGE_HOST_BIT = 16384,
     VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768,
     VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536,
     VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 16777216,
     VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 262144,
     VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432,
     VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 2097152,
     VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = 524288,
     VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = 1048576,
     VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608,
     VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 131072,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSparseImageFormatFlagBits {
     VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1,
     VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2,
     VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSampleCountFlagBits {
     VK_SAMPLE_COUNT_1_BIT = 1,
     VK_SAMPLE_COUNT_2_BIT = 2,
     VK_SAMPLE_COUNT_4_BIT = 4,
     VK_SAMPLE_COUNT_8_BIT = 8,
     VK_SAMPLE_COUNT_16_BIT = 16,
     VK_SAMPLE_COUNT_32_BIT = 32,
     VK_SAMPLE_COUNT_64_BIT = 64,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkAttachmentDescriptionFlagBits {
     VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDescriptorPoolCreateFlagBits {
     VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1,
     VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDependencyFlagBits {
     VK_DEPENDENCY_BY_REGION_BIT = 1,
     VK_DEPENDENCY_DEVICE_GROUP_BIT = 4,
     VK_DEPENDENCY_VIEW_LOCAL_BIT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkObjectType {
     VK_OBJECT_TYPE_UNKNOWN = 0,
     VK_OBJECT_TYPE_INSTANCE = 1,
     VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2,
     VK_OBJECT_TYPE_DEVICE = 3,
     VK_OBJECT_TYPE_QUEUE = 4,
     VK_OBJECT_TYPE_SEMAPHORE = 5,
     VK_OBJECT_TYPE_COMMAND_BUFFER = 6,
     VK_OBJECT_TYPE_FENCE = 7,
     VK_OBJECT_TYPE_DEVICE_MEMORY = 8,
     VK_OBJECT_TYPE_BUFFER = 9,
     VK_OBJECT_TYPE_IMAGE = 10,
     VK_OBJECT_TYPE_EVENT = 11,
     VK_OBJECT_TYPE_QUERY_POOL = 12,
     VK_OBJECT_TYPE_BUFFER_VIEW = 13,
     VK_OBJECT_TYPE_IMAGE_VIEW = 14,
     VK_OBJECT_TYPE_SHADER_MODULE = 15,
     VK_OBJECT_TYPE_PIPELINE_CACHE = 16,
     VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17,
     VK_OBJECT_TYPE_RENDER_PASS = 18,
     VK_OBJECT_TYPE_PIPELINE = 19,
     VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20,
     VK_OBJECT_TYPE_SAMPLER = 21,
     VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22,
     VK_OBJECT_TYPE_DESCRIPTOR_SET = 23,
     VK_OBJECT_TYPE_FRAMEBUFFER = 24,
     VK_OBJECT_TYPE_COMMAND_POOL = 25,
     VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000,
     VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000,
     VK_OBJECT_TYPE_PRIVATE_DATA_SLOT = 1000295000,
     VK_OBJECT_TYPE_SURFACE_KHR = 1000000000,
     VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000,
     VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000,
     VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001,
     VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000,
     VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000,
     VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000,
     VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
     VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000,
     VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1000268000,
     VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1000277000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkIndirectCommandsLayoutUsageFlagBitsNV {
     VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 1,
     VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 2,
     VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkIndirectCommandsTokenTypeNV {
     VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0,
     VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1,
     VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2,
     VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3,
     VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4,
     VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5,
     VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6,
     VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkIndirectStateFlagBitsNV {
     VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDescriptorUpdateTemplateType {
     VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0,
     VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1,
}
pub type VkDescriptorUpdateTemplateTypeKHR = VkDescriptorUpdateTemplateType;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkViewportCoordinateSwizzleNV {
     VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0,
     VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1,
     VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2,
     VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3,
     VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4,
     VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5,
     VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6,
     VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDiscardRectangleModeEXT {
     VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0,
     VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSubpassDescriptionFlagBits {
     VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 1,
     VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 2,
     VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 4,
     VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 8,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPointClippingBehavior {
     VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0,
     VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1,
}
pub type VkPointClippingBehaviorKHR = VkPointClippingBehavior;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCoverageModulationModeNV {
     VK_COVERAGE_MODULATION_MODE_NONE_NV = 0,
     VK_COVERAGE_MODULATION_MODE_RGB_NV = 1,
     VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2,
     VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCoverageReductionModeNV {
     VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0,
     VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkValidationCacheHeaderVersionEXT {
     VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkShaderInfoTypeAMD {
     VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0,
     VK_SHADER_INFO_TYPE_BINARY_AMD = 1,
     VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkQueueGlobalPriorityKHR {
     VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR = 128,
     VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR = 256,
     VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR = 512,
     VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR = 1024,
}
pub type VkQueueGlobalPriorityEXT = VkQueueGlobalPriorityKHR;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkTimeDomainEXT {
     VK_TIME_DOMAIN_DEVICE_EXT = 0,
     VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1,
     VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2,
     VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkConservativeRasterizationModeEXT {
     VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0,
     VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1,
     VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkResolveModeFlagBits {
     VK_RESOLVE_MODE_NONE = 0,
     VK_RESOLVE_MODE_SAMPLE_ZERO_BIT = 1,
     VK_RESOLVE_MODE_AVERAGE_BIT = 2,
     VK_RESOLVE_MODE_MIN_BIT = 4,
     VK_RESOLVE_MODE_MAX_BIT = 8,
}
pub type VkResolveModeFlagBitsKHR = VkResolveModeFlagBits;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDescriptorBindingFlagBits {
     VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 1,
     VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 2,
     VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 4,
     VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 8,
}
pub type VkDescriptorBindingFlagBitsEXT = VkDescriptorBindingFlagBits;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkConditionalRenderingFlagBitsEXT {
     VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSemaphoreType {
     VK_SEMAPHORE_TYPE_BINARY = 0,
     VK_SEMAPHORE_TYPE_TIMELINE = 1,
}
pub type VkSemaphoreTypeKHR = VkSemaphoreType;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkGeometryFlagBitsKHR {
     VK_GEOMETRY_OPAQUE_BIT_KHR = 1,
     VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 2,
}
pub type VkGeometryFlagBitsNV = VkGeometryFlagBitsKHR;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkGeometryInstanceFlagBitsKHR {
     VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 1,
     VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR = 2,
     VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 4,
     VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 8,
}
pub type VkGeometryInstanceFlagBitsNV = VkGeometryInstanceFlagBitsKHR;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkBuildAccelerationStructureFlagBitsKHR {
     VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 1,
     VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 2,
     VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 4,
     VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 8,
     VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 16,
}
pub type VkBuildAccelerationStructureFlagBitsNV = VkBuildAccelerationStructureFlagBitsKHR;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCopyAccelerationStructureModeKHR {
     VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0,
     VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1,
     VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2,
     VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3,
}
pub type VkCopyAccelerationStructureModeNV = VkCopyAccelerationStructureModeKHR;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkAccelerationStructureTypeKHR {
     VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0,
     VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1,
     VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = 2,
}
pub type VkAccelerationStructureTypeNV = VkAccelerationStructureTypeKHR;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkGeometryTypeKHR {
     VK_GEOMETRY_TYPE_TRIANGLES_KHR = 0,
     VK_GEOMETRY_TYPE_AABBS_KHR = 1,
     VK_GEOMETRY_TYPE_INSTANCES_KHR = 2,
}
pub type VkGeometryTypeNV = VkGeometryTypeKHR;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkRayTracingShaderGroupTypeKHR {
     VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0,
     VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1,
     VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2,
}
pub type VkRayTracingShaderGroupTypeNV = VkRayTracingShaderGroupTypeKHR;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkAccelerationStructureMemoryRequirementsTypeNV {
     VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0,
     VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1,
     VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkMemoryOverallocationBehaviorAMD {
     VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0,
     VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1,
     VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkScopeNV {
     VK_SCOPE_DEVICE_NV = 1,
     VK_SCOPE_WORKGROUP_NV = 2,
     VK_SCOPE_SUBGROUP_NV = 3,
     VK_SCOPE_QUEUE_FAMILY_NV = 5,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkComponentTypeNV {
     VK_COMPONENT_TYPE_FLOAT16_NV = 0,
     VK_COMPONENT_TYPE_FLOAT32_NV = 1,
     VK_COMPONENT_TYPE_FLOAT64_NV = 2,
     VK_COMPONENT_TYPE_SINT8_NV = 3,
     VK_COMPONENT_TYPE_SINT16_NV = 4,
     VK_COMPONENT_TYPE_SINT32_NV = 5,
     VK_COMPONENT_TYPE_SINT64_NV = 6,
     VK_COMPONENT_TYPE_UINT8_NV = 7,
     VK_COMPONENT_TYPE_UINT16_NV = 8,
     VK_COMPONENT_TYPE_UINT32_NV = 9,
     VK_COMPONENT_TYPE_UINT64_NV = 10,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDeviceDiagnosticsConfigFlagBitsNV {
     VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 1,
     VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 2,
     VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPipelineCreationFeedbackFlagBits {
     VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT = 1,
     VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT = 2,
     VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT = 4,
}
pub type VkPipelineCreationFeedbackFlagBitsEXT = VkPipelineCreationFeedbackFlagBits;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPerformanceCounterScopeKHR {
     VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0,
     VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1,
     VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPerformanceCounterUnitKHR {
     VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0,
     VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1,
     VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2,
     VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3,
     VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4,
     VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5,
     VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6,
     VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7,
     VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8,
     VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9,
     VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPerformanceCounterStorageKHR {
     VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0,
     VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1,
     VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2,
     VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3,
     VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4,
     VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPerformanceCounterDescriptionFlagBitsKHR {
     VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = 1,
     VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSemaphoreWaitFlagBits {
     VK_SEMAPHORE_WAIT_ANY_BIT = 1,
}
pub type VkSemaphoreWaitFlagBitsKHR = VkSemaphoreWaitFlagBits;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPerformanceConfigurationTypeINTEL {
     VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkQueryPoolSamplingModeINTEL {
     VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPerformanceOverrideTypeINTEL {
     VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0,
     VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPerformanceParameterTypeINTEL {
     VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0,
     VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPerformanceValueTypeINTEL {
     VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0,
     VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1,
     VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2,
     VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3,
     VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkLineRasterizationModeEXT {
     VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0,
     VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1,
     VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2,
     VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkToolPurposeFlagBits {
     VK_TOOL_PURPOSE_VALIDATION_BIT = 1,
     VK_TOOL_PURPOSE_PROFILING_BIT = 2,
     VK_TOOL_PURPOSE_TRACING_BIT = 4,
     VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT = 8,
     VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT = 16,
     VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 32,
     VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 64,
}
pub type VkToolPurposeFlagBitsEXT = VkToolPurposeFlagBits;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkColorSpaceKHR {
     VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0,
     VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001,
     VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002,
     VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003,
     VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004,
     VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005,
     VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006,
     VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007,
     VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008,
     VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009,
     VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010,
     VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011,
     VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012,
     VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013,
     VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014,
     VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCompositeAlphaFlagBitsKHR {
     VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1,
     VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2,
     VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4,
     VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDisplayPlaneAlphaFlagBitsKHR {
     VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1,
     VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2,
     VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4,
     VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPresentModeKHR {
     VK_PRESENT_MODE_IMMEDIATE_KHR = 0,
     VK_PRESENT_MODE_MAILBOX_KHR = 1,
     VK_PRESENT_MODE_FIFO_KHR = 2,
     VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3,
     VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000,
     VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSurfaceTransformFlagBitsKHR {
     VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1,
     VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2,
     VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4,
     VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8,
     VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16,
     VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32,
     VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64,
     VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128,
     VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDebugReportFlagBitsEXT {
     VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 1,
     VK_DEBUG_REPORT_WARNING_BIT_EXT = 2,
     VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4,
     VK_DEBUG_REPORT_ERROR_BIT_EXT = 8,
     VK_DEBUG_REPORT_DEBUG_BIT_EXT = 16,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDebugReportObjectTypeEXT {
     VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0,
     VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1,
     VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2,
     VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3,
     VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4,
     VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5,
     VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6,
     VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7,
     VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8,
     VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9,
     VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10,
     VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11,
     VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12,
     VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13,
     VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14,
     VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15,
     VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16,
     VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17,
     VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18,
     VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19,
     VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20,
     VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21,
     VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22,
     VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23,
     VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24,
     VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25,
     VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26,
     VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27,
     VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28,
     VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29,
     VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30,
     VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33,
     VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000,
     VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000,
     VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkRasterizationOrderAMD {
     VK_RASTERIZATION_ORDER_STRICT_AMD = 0,
     VK_RASTERIZATION_ORDER_RELAXED_AMD = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkExternalMemoryHandleTypeFlagBitsNV {
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 1,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 2,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 4,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 8,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkExternalMemoryFeatureFlagBitsNV {
     VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 1,
     VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 2,
     VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkValidationCheckEXT {
     VK_VALIDATION_CHECK_ALL_EXT = 0,
     VK_VALIDATION_CHECK_SHADERS_EXT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkValidationFeatureEnableEXT {
     VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0,
     VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1,
     VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2,
     VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3,
     VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkValidationFeatureDisableEXT {
     VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0,
     VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1,
     VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2,
     VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3,
     VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4,
     VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5,
     VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6,
     VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT = 7,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkExternalMemoryHandleTypeFlagBits {
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 8,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 16,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 32,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 64,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 512,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 1024,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 128,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 256,
}
pub type VkExternalMemoryHandleTypeFlagBitsKHR = VkExternalMemoryHandleTypeFlagBits;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkExternalMemoryFeatureFlagBits {
     VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1,
     VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 2,
     VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 4,
}
pub type VkExternalMemoryFeatureFlagBitsKHR = VkExternalMemoryFeatureFlagBits;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkExternalSemaphoreHandleTypeFlagBits {
     VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
     VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
     VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
     VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 8,
     VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 16,
}
pub type VkExternalSemaphoreHandleTypeFlagBitsKHR = VkExternalSemaphoreHandleTypeFlagBits;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkExternalSemaphoreFeatureFlagBits {
     VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1,
     VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 2,
}
pub type VkExternalSemaphoreFeatureFlagBitsKHR = VkExternalSemaphoreFeatureFlagBits;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSemaphoreImportFlagBits {
     VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 1,
}
pub type VkSemaphoreImportFlagBitsKHR = VkSemaphoreImportFlagBits;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkExternalFenceHandleTypeFlagBits {
     VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
     VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
     VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
     VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 8,
}
pub type VkExternalFenceHandleTypeFlagBitsKHR = VkExternalFenceHandleTypeFlagBits;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkExternalFenceFeatureFlagBits {
     VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1,
     VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 2,
}
pub type VkExternalFenceFeatureFlagBitsKHR = VkExternalFenceFeatureFlagBits;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkFenceImportFlagBits {
     VK_FENCE_IMPORT_TEMPORARY_BIT = 1,
}
pub type VkFenceImportFlagBitsKHR = VkFenceImportFlagBits;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSurfaceCounterFlagBitsEXT {
     VK_SURFACE_COUNTER_VBLANK_BIT_EXT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDisplayPowerStateEXT {
     VK_DISPLAY_POWER_STATE_OFF_EXT = 0,
     VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1,
     VK_DISPLAY_POWER_STATE_ON_EXT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDeviceEventTypeEXT {
     VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDisplayEventTypeEXT {
     VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPeerMemoryFeatureFlagBits {
     VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1,
     VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 2,
     VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 4,
     VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 8,
}
pub type VkPeerMemoryFeatureFlagBitsKHR = VkPeerMemoryFeatureFlagBits;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkMemoryAllocateFlagBits {
     VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1,
     VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 2,
     VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 4,
}
pub type VkMemoryAllocateFlagBitsKHR = VkMemoryAllocateFlagBits;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDeviceGroupPresentModeFlagBitsKHR {
     VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1,
     VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 2,
     VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 4,
     VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 8,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSwapchainCreateFlagBitsKHR {
     VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1,
     VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 2,
     VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSubgroupFeatureFlagBits {
     VK_SUBGROUP_FEATURE_BASIC_BIT = 1,
     VK_SUBGROUP_FEATURE_VOTE_BIT = 2,
     VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 4,
     VK_SUBGROUP_FEATURE_BALLOT_BIT = 8,
     VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 16,
     VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 32,
     VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 64,
     VK_SUBGROUP_FEATURE_QUAD_BIT = 128,
     VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 256,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkTessellationDomainOrigin {
     VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0,
     VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1,
}
pub type VkTessellationDomainOriginKHR = VkTessellationDomainOrigin;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSamplerYcbcrModelConversion {
     VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0,
     VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1,
     VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2,
     VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3,
     VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4,
}
pub type VkSamplerYcbcrModelConversionKHR = VkSamplerYcbcrModelConversion;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSamplerYcbcrRange {
     VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0,
     VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1,
}
pub type VkSamplerYcbcrRangeKHR = VkSamplerYcbcrRange;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkChromaLocation {
     VK_CHROMA_LOCATION_COSITED_EVEN = 0,
     VK_CHROMA_LOCATION_MIDPOINT = 1,
}
pub type VkChromaLocationKHR = VkChromaLocation;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSamplerReductionMode {
     VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0,
     VK_SAMPLER_REDUCTION_MODE_MIN = 1,
     VK_SAMPLER_REDUCTION_MODE_MAX = 2,
}
pub type VkSamplerReductionModeEXT = VkSamplerReductionMode;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkBlendOverlapEXT {
     VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0,
     VK_BLEND_OVERLAP_DISJOINT_EXT = 1,
     VK_BLEND_OVERLAP_CONJOINT_EXT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDebugUtilsMessageSeverityFlagBitsEXT {
     VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1,
     VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16,
     VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256,
     VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDebugUtilsMessageTypeFlagBitsEXT {
     VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1,
     VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2,
     VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkFullScreenExclusiveEXT {
     VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT = 0,
     VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT = 1,
     VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT = 2,
     VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT = 3,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkShaderFloatControlsIndependence {
     VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0,
     VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1,
     VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2,
}
pub type VkShaderFloatControlsIndependenceKHR = VkShaderFloatControlsIndependence;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkVendorId {
     VK_VENDOR_ID_VIV = 0x10001,
     VK_VENDOR_ID_VSI = 0x10002,
     VK_VENDOR_ID_KAZAN = 0x10003,
     VK_VENDOR_ID_CODEPLAY = 0x10004,
     VK_VENDOR_ID_MESA = 0x10005,
     VK_VENDOR_ID_POCL = 0x10006,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDriverId {
     VK_DRIVER_ID_AMD_PROPRIETARY = 1,
     VK_DRIVER_ID_AMD_OPEN_SOURCE = 2,
     VK_DRIVER_ID_MESA_RADV = 3,
     VK_DRIVER_ID_NVIDIA_PROPRIETARY = 4,
     VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5,
     VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6,
     VK_DRIVER_ID_IMAGINATION_PROPRIETARY = 7,
     VK_DRIVER_ID_QUALCOMM_PROPRIETARY = 8,
     VK_DRIVER_ID_ARM_PROPRIETARY = 9,
     VK_DRIVER_ID_GOOGLE_SWIFTSHADER = 10,
     VK_DRIVER_ID_GGP_PROPRIETARY = 11,
     VK_DRIVER_ID_BROADCOM_PROPRIETARY = 12,
     VK_DRIVER_ID_MESA_LLVMPIPE = 13,
     VK_DRIVER_ID_MOLTENVK = 14,
     VK_DRIVER_ID_COREAVI_PROPRIETARY = 15,
     VK_DRIVER_ID_JUICE_PROPRIETARY = 16,
     VK_DRIVER_ID_VERISILICON_PROPRIETARY = 17,
     VK_DRIVER_ID_MESA_TURNIP = 18,
     VK_DRIVER_ID_MESA_V3DV = 19,
     VK_DRIVER_ID_MESA_PANVK = 20,
     VK_DRIVER_ID_SAMSUNG_PROPRIETARY = 21,
     VK_DRIVER_ID_MESA_VENUS = 22,
}
pub type VkDriverIdKHR = VkDriverId;

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkShadingRatePaletteEntryNV {
     VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0,
     VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1,
     VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2,
     VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3,
     VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4,
     VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5,
     VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6,
     VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7,
     VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8,
     VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
     VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10,
     VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCoarseSampleOrderTypeNV {
     VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0,
     VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1,
     VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2,
     VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPipelineExecutableStatisticFormatKHR {
     VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0,
     VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1,
     VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2,
     VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3,
}
pub type PFN_vkInternalAllocationNotification = extern "system" fn(
    pUserData: *mut c_void,
    size: usize,
    allocationType: VkInternalAllocationType,
    allocationScope: VkSystemAllocationScope,
) -> ();
pub type PFN_vkInternalFreeNotification = extern "system" fn(
    pUserData: *mut c_void,
    size: usize,
    allocationType: VkInternalAllocationType,
    allocationScope: VkSystemAllocationScope,
) -> ();
pub type PFN_vkReallocationFunction = extern "system" fn(
    pUserData: *mut c_void,
    pOriginal: *mut c_void,
    size: usize,
    alignment: usize,
    allocationScope: VkSystemAllocationScope,
) -> *mut c_void;
pub type PFN_vkAllocationFunction = extern "system" fn(
    pUserData: *mut c_void,
    size: usize,
    alignment: usize,
    allocationScope: VkSystemAllocationScope,
) -> *mut c_void;
pub type PFN_vkFreeFunction = extern "system" fn(
    pUserData: *mut c_void,
    pMemory: *mut c_void,
) -> ();
pub type PFN_vkVoidFunction = extern "system" fn(
) -> ();

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBaseOutStructure {
    sType: VkStructureType,
    pNext: *mut VkBaseOutStructure,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBaseInStructure {
    sType: VkStructureType,
    pNext: *const VkBaseInStructure,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkOffset2D {
    x: i32,
    y: i32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkOffset3D {
    x: i32,
    y: i32,
    z: i32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExtent2D {
    width: u32,
    height: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExtent3D {
    width: u32,
    height: u32,
    depth: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkViewport {
    x: c_float,
    y: c_float,
    width: c_float,
    height: c_float,
    minDepth: c_float,
    maxDepth: c_float,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRect2D {
    offset: VkOffset2D,
    extent: VkExtent2D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkClearRect {
    rect: VkRect2D,
    baseArrayLayer: u32,
    layerCount: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkComponentMapping {
    r: VkComponentSwizzle,
    g: VkComponentSwizzle,
    b: VkComponentSwizzle,
    a: VkComponentSwizzle,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExtensionProperties {
    extensionName: c_char,
    specVersion: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkLayerProperties {
    layerName: c_char,
    specVersion: u32,
    implementationVersion: u32,
    description: c_char,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkApplicationInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    pApplicationName: *const c_char,
    applicationVersion: u32,
    pEngineName: *const c_char,
    engineVersion: u32,
    apiVersion: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAllocationCallbacks {
    pUserData: *mut c_void,
    pfnAllocation: PFN_vkAllocationFunction,
    pfnReallocation: PFN_vkReallocationFunction,
    pfnFree: PFN_vkFreeFunction,
    pfnInternalAllocation: PFN_vkInternalAllocationNotification,
    pfnInternalFree: PFN_vkInternalFreeNotification,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorImageInfo {
    sampler: VkSampler,
    imageView: VkImageView,
    imageLayout: VkImageLayout,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyDescriptorSet {
    sType: VkStructureType,
    pNext: *const c_void,
    srcSet: VkDescriptorSet,
    srcBinding: u32,
    srcArrayElement: u32,
    dstSet: VkDescriptorSet,
    dstBinding: u32,
    dstArrayElement: u32,
    descriptorCount: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorPoolSize {
    type_: VkDescriptorType,
    descriptorCount: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetAllocateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    descriptorPool: VkDescriptorPool,
    descriptorSetCount: u32,
    pSetLayouts: *const VkDescriptorSetLayout,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSpecializationMapEntry {
    constantID: u32,
    offset: u32,
    size: usize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSpecializationInfo {
    mapEntryCount: u32,
    pMapEntries: *const VkSpecializationMapEntry,
    dataSize: usize,
    pData: *const c_void,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVertexInputBindingDescription {
    binding: u32,
    stride: u32,
    inputRate: VkVertexInputRate,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVertexInputAttributeDescription {
    location: u32,
    binding: u32,
    format: VkFormat,
    offset: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkStencilOpState {
    failOp: VkStencilOp,
    passOp: VkStencilOp,
    depthFailOp: VkStencilOp,
    compareOp: VkCompareOp,
    compareMask: u32,
    writeMask: u32,
    reference: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCacheHeaderVersionOne {
    headerSize: u32,
    headerVersion: VkPipelineCacheHeaderVersion,
    vendorID: u32,
    deviceID: u32,
    pipelineCacheUUID: u8,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBufferAllocateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    commandPool: VkCommandPool,
    level: VkCommandBufferLevel,
    commandBufferCount: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkClearColorValue {
    float32: [c_float;4],
    int32: [i32;4],
    uint32: [u32;4],
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkClearDepthStencilValue {
    depth: c_float,
    stencil: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkClearValue {
    color: VkClearColorValue,
    depthStencil: VkClearDepthStencilValue,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentReference {
    attachment: u32,
    layout: VkImageLayout,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDrawIndirectCommand {
    vertexCount: u32,
    instanceCount: u32,
    firstVertex: u32,
    firstInstance: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDrawIndexedIndirectCommand {
    indexCount: u32,
    instanceCount: u32,
    firstIndex: u32,
    vertexOffset: i32,
    firstInstance: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDispatchIndirectCommand {
    x: u32,
    y: u32,
    z: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPlanePropertiesKHR {
    currentDisplay: VkDisplayKHR,
    currentStackIndex: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayModeParametersKHR {
    visibleRegion: VkExtent2D,
    refreshRate: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayModePropertiesKHR {
    displayMode: VkDisplayModeKHR,
    parameters: VkDisplayModeParametersKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceFormatKHR {
    format: VkFormat,
    colorSpace: VkColorSpaceKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPresentInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    waitSemaphoreCount: u32,
    pWaitSemaphores: *const VkSemaphore,
    swapchainCount: u32,
    pSwapchains: *const VkSwapchainKHR,
    pImageIndices: *const u32,
    pResults: *mut VkResult,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkValidationFlagsEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    disabledValidationCheckCount: u32,
    pDisabledValidationChecks: *const VkValidationCheckEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkValidationFeaturesEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    enabledValidationFeatureCount: u32,
    pEnabledValidationFeatures: *const VkValidationFeatureEnableEXT,
    disabledValidationFeatureCount: u32,
    pDisabledValidationFeatures: *const VkValidationFeatureDisableEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRasterizationStateRasterizationOrderAMD {
    sType: VkStructureType,
    pNext: *const c_void,
    rasterizationOrder: VkRasterizationOrderAMD,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugMarkerObjectNameInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    objectType: VkDebugReportObjectTypeEXT,
    object: u64,
    pObjectName: *const c_char,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugMarkerObjectTagInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    objectType: VkDebugReportObjectTypeEXT,
    object: u64,
    tagName: u64,
    tagSize: usize,
    pTag: *const c_void,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugMarkerMarkerInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    pMarkerName: *const c_char,
    color: [c_float;4],
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDedicatedAllocationMemoryAllocateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    image: VkImage,
    buffer: VkBuffer,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportMemoryWin32HandleInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    pAttributes: *const SECURITY_ATTRIBUTES,
    dwAccess: DWORD,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkWin32KeyedMutexAcquireReleaseInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    acquireCount: u32,
    pAcquireSyncs: *const VkDeviceMemory,
    pAcquireKeys: *const u64,
    pAcquireTimeoutMilliseconds: *const u32,
    releaseCount: u32,
    pReleaseSyncs: *const VkDeviceMemory,
    pReleaseKeys: *const u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDevicePrivateDataCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    privateDataSlotRequestCount: u32,
}
pub type VkDevicePrivateDataCreateInfoEXT = VkDevicePrivateDataCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxGraphicsShaderGroupCount: u32,
    maxIndirectSequenceCount: u32,
    maxIndirectCommandsTokenCount: u32,
    maxIndirectCommandsStreamCount: u32,
    maxIndirectCommandsTokenOffset: u32,
    maxIndirectCommandsStreamStride: u32,
    minSequencesCountBufferOffsetAlignment: u32,
    minSequencesIndexBufferOffsetAlignment: u32,
    minIndirectCommandsBufferOffsetAlignment: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindShaderGroupIndirectCommandNV {
    groupIndex: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSetStateFlagsIndirectCommandNV {
    data: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGeneratedCommandsMemoryRequirementsInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    pipelineBindPoint: VkPipelineBindPoint,
    pipeline: VkPipeline,
    indirectCommandsLayout: VkIndirectCommandsLayoutNV,
    maxSequencesCount: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePushDescriptorPropertiesKHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxPushDescriptors: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkConformanceVersion {
    major: u8,
    minor: u8,
    subminor: u8,
    patch: u8,
}
pub type VkConformanceVersionKHR = VkConformanceVersion;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDriverProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    driverID: VkDriverId,
    driverName: c_char,
    driverInfo: c_char,
    conformanceVersion: VkConformanceVersion,
}
pub type VkPhysicalDeviceDriverPropertiesKHR = VkPhysicalDeviceDriverProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRectLayerKHR {
    offset: VkOffset2D,
    extent: VkExtent2D,
    layer: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExternalImageFormatInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    handleType: VkExternalMemoryHandleTypeFlagBits,
}
pub type VkPhysicalDeviceExternalImageFormatInfoKHR = VkPhysicalDeviceExternalImageFormatInfo;
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImportMemoryWin32HandleInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    handleType: VkExternalMemoryHandleTypeFlagBits,
    handle: HANDLE,
    name: LPCWSTR,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportMemoryWin32HandleInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    pAttributes: *const SECURITY_ATTRIBUTES,
    dwAccess: DWORD,
    name: LPCWSTR,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryWin32HandlePropertiesKHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    memoryTypeBits: u32,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryGetWin32HandleInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    memory: VkDeviceMemory,
    handleType: VkExternalMemoryHandleTypeFlagBits,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImportMemoryFdInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    handleType: VkExternalMemoryHandleTypeFlagBits,
    fd: c_int,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryFdPropertiesKHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    memoryTypeBits: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryGetFdInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    memory: VkDeviceMemory,
    handleType: VkExternalMemoryHandleTypeFlagBits,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkWin32KeyedMutexAcquireReleaseInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    acquireCount: u32,
    pAcquireSyncs: *const VkDeviceMemory,
    pAcquireKeys: *const u64,
    pAcquireTimeouts: *const u32,
    releaseCount: u32,
    pReleaseSyncs: *const VkDeviceMemory,
    pReleaseKeys: *const u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExternalSemaphoreInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    handleType: VkExternalSemaphoreHandleTypeFlagBits,
}
pub type VkPhysicalDeviceExternalSemaphoreInfoKHR = VkPhysicalDeviceExternalSemaphoreInfo;
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportSemaphoreWin32HandleInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    pAttributes: *const SECURITY_ATTRIBUTES,
    dwAccess: DWORD,
    name: LPCWSTR,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkD3D12FenceSubmitInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    waitSemaphoreValuesCount: u32,
    pWaitSemaphoreValues: *const u64,
    signalSemaphoreValuesCount: u32,
    pSignalSemaphoreValues: *const u64,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSemaphoreGetWin32HandleInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    semaphore: VkSemaphore,
    handleType: VkExternalSemaphoreHandleTypeFlagBits,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSemaphoreGetFdInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    semaphore: VkSemaphore,
    handleType: VkExternalSemaphoreHandleTypeFlagBits,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExternalFenceInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    handleType: VkExternalFenceHandleTypeFlagBits,
}
pub type VkPhysicalDeviceExternalFenceInfoKHR = VkPhysicalDeviceExternalFenceInfo;
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportFenceWin32HandleInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    pAttributes: *const SECURITY_ATTRIBUTES,
    dwAccess: DWORD,
    name: LPCWSTR,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFenceGetWin32HandleInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    fence: VkFence,
    handleType: VkExternalFenceHandleTypeFlagBits,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFenceGetFdInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    fence: VkFence,
    handleType: VkExternalFenceHandleTypeFlagBits,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMultiviewProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxMultiviewViewCount: u32,
    maxMultiviewInstanceIndex: u32,
}
pub type VkPhysicalDeviceMultiviewPropertiesKHR = VkPhysicalDeviceMultiviewProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassMultiviewCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    subpassCount: u32,
    pViewMasks: *const u32,
    dependencyCount: u32,
    pViewOffsets: *const i32,
    correlationMaskCount: u32,
    pCorrelationMasks: *const u32,
}
pub type VkRenderPassMultiviewCreateInfoKHR = VkRenderPassMultiviewCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPowerInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    powerState: VkDisplayPowerStateEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceEventInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    deviceEvent: VkDeviceEventTypeEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayEventInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    displayEvent: VkDisplayEventTypeEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindBufferMemoryDeviceGroupInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    deviceIndexCount: u32,
    pDeviceIndices: *const u32,
}
pub type VkBindBufferMemoryDeviceGroupInfoKHR = VkBindBufferMemoryDeviceGroupInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindImageMemoryDeviceGroupInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    deviceIndexCount: u32,
    pDeviceIndices: *const u32,
    splitInstanceBindRegionCount: u32,
    pSplitInstanceBindRegions: *const VkRect2D,
}
pub type VkBindImageMemoryDeviceGroupInfoKHR = VkBindImageMemoryDeviceGroupInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupRenderPassBeginInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    deviceMask: u32,
    deviceRenderAreaCount: u32,
    pDeviceRenderAreas: *const VkRect2D,
}
pub type VkDeviceGroupRenderPassBeginInfoKHR = VkDeviceGroupRenderPassBeginInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupCommandBufferBeginInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    deviceMask: u32,
}
pub type VkDeviceGroupCommandBufferBeginInfoKHR = VkDeviceGroupCommandBufferBeginInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupSubmitInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    waitSemaphoreCount: u32,
    pWaitSemaphoreDeviceIndices: *const u32,
    commandBufferCount: u32,
    pCommandBufferDeviceMasks: *const u32,
    signalSemaphoreCount: u32,
    pSignalSemaphoreDeviceIndices: *const u32,
}
pub type VkDeviceGroupSubmitInfoKHR = VkDeviceGroupSubmitInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupBindSparseInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    resourceDeviceIndex: u32,
    memoryDeviceIndex: u32,
}
pub type VkDeviceGroupBindSparseInfoKHR = VkDeviceGroupBindSparseInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageSwapchainCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    swapchain: VkSwapchainKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindImageMemorySwapchainInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    swapchain: VkSwapchainKHR,
    imageIndex: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAcquireNextImageInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    swapchain: VkSwapchainKHR,
    timeout: u64,
    semaphore: VkSemaphore,
    fence: VkFence,
    deviceMask: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupPresentInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    swapchainCount: u32,
    pDeviceMasks: *const u32,
    mode: VkDeviceGroupPresentModeFlagBitsKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupDeviceCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    physicalDeviceCount: u32,
    pPhysicalDevices: *const VkPhysicalDevice,
}
pub type VkDeviceGroupDeviceCreateInfoKHR = VkDeviceGroupDeviceCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorUpdateTemplateEntry {
    dstBinding: u32,
    dstArrayElement: u32,
    descriptorCount: u32,
    descriptorType: VkDescriptorType,
    offset: usize,
    stride: usize,
}
pub type VkDescriptorUpdateTemplateEntryKHR = VkDescriptorUpdateTemplateEntry;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkXYColorEXT {
    x: c_float,
    y: c_float,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkHdrMetadataEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    displayPrimaryRed: VkXYColorEXT,
    displayPrimaryGreen: VkXYColorEXT,
    displayPrimaryBlue: VkXYColorEXT,
    whitePoint: VkXYColorEXT,
    maxLuminance: c_float,
    minLuminance: c_float,
    maxContentLightLevel: c_float,
    maxFrameAverageLightLevel: c_float,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRefreshCycleDurationGOOGLE {
    refreshDuration: u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPastPresentationTimingGOOGLE {
    presentID: u32,
    desiredPresentTime: u64,
    actualPresentTime: u64,
    earliestPresentTime: u64,
    presentMargin: u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPresentTimeGOOGLE {
    presentID: u32,
    desiredPresentTime: u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkViewportWScalingNV {
    xcoeff: c_float,
    ycoeff: c_float,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkViewportSwizzleNV {
    x: VkViewportCoordinateSwizzleNV,
    y: VkViewportCoordinateSwizzleNV,
    z: VkViewportCoordinateSwizzleNV,
    w: VkViewportCoordinateSwizzleNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDiscardRectanglePropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxDiscardRectangles: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSurfaceInfo2KHR {
    sType: VkStructureType,
    pNext: *const c_void,
    surface: VkSurfaceKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceFormat2KHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    surfaceFormat: VkSurfaceFormatKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPlaneProperties2KHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    displayPlaneProperties: VkDisplayPlanePropertiesKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayModeProperties2KHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    displayModeProperties: VkDisplayModePropertiesKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPlaneInfo2KHR {
    sType: VkStructureType,
    pNext: *const c_void,
    mode: VkDisplayModeKHR,
    planeIndex: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferMemoryRequirementsInfo2 {
    sType: VkStructureType,
    pNext: *const c_void,
    buffer: VkBuffer,
}
pub type VkBufferMemoryRequirementsInfo2KHR = VkBufferMemoryRequirementsInfo2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageMemoryRequirementsInfo2 {
    sType: VkStructureType,
    pNext: *const c_void,
    image: VkImage,
}
pub type VkImageMemoryRequirementsInfo2KHR = VkImageMemoryRequirementsInfo2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageSparseMemoryRequirementsInfo2 {
    sType: VkStructureType,
    pNext: *const c_void,
    image: VkImage,
}
pub type VkImageSparseMemoryRequirementsInfo2KHR = VkImageSparseMemoryRequirementsInfo2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePointClippingProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    pointClippingBehavior: VkPointClippingBehavior,
}
pub type VkPhysicalDevicePointClippingPropertiesKHR = VkPhysicalDevicePointClippingProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryDedicatedAllocateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    image: VkImage,
    buffer: VkBuffer,
}
pub type VkMemoryDedicatedAllocateInfoKHR = VkMemoryDedicatedAllocateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineTessellationDomainOriginStateCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    domainOrigin: VkTessellationDomainOrigin,
}
pub type VkPipelineTessellationDomainOriginStateCreateInfoKHR = VkPipelineTessellationDomainOriginStateCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerYcbcrConversionInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    conversion: VkSamplerYcbcrConversion,
}
pub type VkSamplerYcbcrConversionInfoKHR = VkSamplerYcbcrConversionInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindImagePlaneMemoryInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    planeAspect: VkImageAspectFlagBits,
}
pub type VkBindImagePlaneMemoryInfoKHR = VkBindImagePlaneMemoryInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImagePlaneMemoryRequirementsInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    planeAspect: VkImageAspectFlagBits,
}
pub type VkImagePlaneMemoryRequirementsInfoKHR = VkImagePlaneMemoryRequirementsInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerYcbcrConversionImageFormatProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    combinedImageSamplerDescriptorCount: u32,
}
pub type VkSamplerYcbcrConversionImageFormatPropertiesKHR = VkSamplerYcbcrConversionImageFormatProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSampleLocationEXT {
    x: c_float,
    y: c_float,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSampleLocationsInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    sampleLocationsPerPixel: VkSampleCountFlagBits,
    sampleLocationGridSize: VkExtent2D,
    sampleLocationsCount: u32,
    pSampleLocations: *const VkSampleLocationEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentSampleLocationsEXT {
    attachmentIndex: u32,
    sampleLocationsInfo: VkSampleLocationsInfoEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassSampleLocationsEXT {
    subpassIndex: u32,
    sampleLocationsInfo: VkSampleLocationsInfoEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassSampleLocationsBeginInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    attachmentInitialSampleLocationsCount: u32,
    pAttachmentInitialSampleLocations: *const VkAttachmentSampleLocationsEXT,
    postSubpassSampleLocationsCount: u32,
    pPostSubpassSampleLocations: *const VkSubpassSampleLocationsEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMultisamplePropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxSampleLocationGridSize: VkExtent2D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerReductionModeCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    reductionMode: VkSamplerReductionMode,
}
pub type VkSamplerReductionModeCreateInfoEXT = VkSamplerReductionModeCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceInlineUniformBlockProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxInlineUniformBlockSize: u32,
    maxPerStageDescriptorInlineUniformBlocks: u32,
    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32,
    maxDescriptorSetInlineUniformBlocks: u32,
    maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32,
}
pub type VkPhysicalDeviceInlineUniformBlockPropertiesEXT = VkPhysicalDeviceInlineUniformBlockProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkWriteDescriptorSetInlineUniformBlock {
    sType: VkStructureType,
    pNext: *const c_void,
    dataSize: u32,
    pData: *const c_void,
}
pub type VkWriteDescriptorSetInlineUniformBlockEXT = VkWriteDescriptorSetInlineUniformBlock;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorPoolInlineUniformBlockCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    maxInlineUniformBlockBindings: u32,
}
pub type VkDescriptorPoolInlineUniformBlockCreateInfoEXT = VkDescriptorPoolInlineUniformBlockCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageFormatListCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    viewFormatCount: u32,
    pViewFormats: *const VkFormat,
}
pub type VkImageFormatListCreateInfoKHR = VkImageFormatListCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkShaderModuleValidationCacheCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    validationCache: VkValidationCacheEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkShaderResourceUsageAMD {
    numUsedVgprs: u32,
    numUsedSgprs: u32,
    ldsSizePerLocalWorkGroup: u32,
    ldsUsageSizeInBytes: usize,
    scratchMemUsageInBytes: usize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceQueueGlobalPriorityCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    globalPriority: VkQueueGlobalPriorityKHR,
}
pub type VkDeviceQueueGlobalPriorityCreateInfoEXT = VkDeviceQueueGlobalPriorityCreateInfoKHR;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugUtilsObjectNameInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    objectType: VkObjectType,
    objectHandle: u64,
    pObjectName: *const c_char,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugUtilsObjectTagInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    objectType: VkObjectType,
    objectHandle: u64,
    tagName: u64,
    tagSize: usize,
    pTag: *const c_void,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugUtilsLabelEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    pLabelName: *const c_char,
    color: [c_float;4],
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImportMemoryHostPointerInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    handleType: VkExternalMemoryHandleTypeFlagBits,
    pHostPointer: *mut c_void,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryHostPointerPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    memoryTypeBits: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCalibratedTimestampInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    timeDomain: VkTimeDomainEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderCorePropertiesAMD {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderEngineCount: u32,
    shaderArraysPerEngineCount: u32,
    computeUnitsPerShaderArray: u32,
    simdPerComputeUnit: u32,
    wavefrontsPerSimd: u32,
    wavefrontSize: u32,
    sgprsPerSimd: u32,
    minSgprAllocation: u32,
    maxSgprAllocation: u32,
    sgprAllocationGranularity: u32,
    vgprsPerSimd: u32,
    minVgprAllocation: u32,
    maxVgprAllocation: u32,
    vgprAllocationGranularity: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetVariableDescriptorCountAllocateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    descriptorSetCount: u32,
    pDescriptorCounts: *const u32,
}
pub type VkDescriptorSetVariableDescriptorCountAllocateInfoEXT = VkDescriptorSetVariableDescriptorCountAllocateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetVariableDescriptorCountLayoutSupport {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxVariableDescriptorCount: u32,
}
pub type VkDescriptorSetVariableDescriptorCountLayoutSupportEXT = VkDescriptorSetVariableDescriptorCountLayoutSupport;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassBeginInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    contents: VkSubpassContents,
}
pub type VkSubpassBeginInfoKHR = VkSubpassBeginInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassEndInfo {
    sType: VkStructureType,
    pNext: *const c_void,
}
pub type VkSubpassEndInfoKHR = VkSubpassEndInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTimelineSemaphoreProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxTimelineSemaphoreValueDifference: u64,
}
pub type VkPhysicalDeviceTimelineSemaphorePropertiesKHR = VkPhysicalDeviceTimelineSemaphoreProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSemaphoreTypeCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    semaphoreType: VkSemaphoreType,
    initialValue: u64,
}
pub type VkSemaphoreTypeCreateInfoKHR = VkSemaphoreTypeCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkTimelineSemaphoreSubmitInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    waitSemaphoreValueCount: u32,
    pWaitSemaphoreValues: *const u64,
    signalSemaphoreValueCount: u32,
    pSignalSemaphoreValues: *const u64,
}
pub type VkTimelineSemaphoreSubmitInfoKHR = VkTimelineSemaphoreSubmitInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSemaphoreSignalInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    semaphore: VkSemaphore,
    value: u64,
}
pub type VkSemaphoreSignalInfoKHR = VkSemaphoreSignalInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVertexInputBindingDivisorDescriptionEXT {
    binding: u32,
    divisor: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineVertexInputDivisorStateCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    vertexBindingDivisorCount: u32,
    pVertexBindingDivisors: *const VkVertexInputBindingDivisorDescriptionEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxVertexAttribDivisor: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePCIBusInfoPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    pciDomain: u32,
    pciBus: u32,
    pciDevice: u32,
    pciFunction: u32,
}
#[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImportAndroidHardwareBufferInfoANDROID {
    sType: VkStructureType,
    pNext: *const c_void,
    buffer: *mut AHardwareBuffer,
}
#[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAndroidHardwareBufferUsageANDROID {
    sType: VkStructureType,
    pNext: *mut c_void,
    androidHardwareBufferUsage: u64,
}
#[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryGetAndroidHardwareBufferInfoANDROID {
    sType: VkStructureType,
    pNext: *const c_void,
    memory: VkDeviceMemory,
}
#[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalFormatANDROID {
    sType: VkStructureType,
    pNext: *mut c_void,
    externalFormat: u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCheckpointDataNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    stage: VkPipelineStageFlagBits,
    pCheckpointMarker: *mut c_void,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageViewASTCDecodeModeEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    decodeMode: VkFormat,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportExclusiveScissorStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    exclusiveScissorCount: u32,
    pExclusiveScissors: *const VkRect2D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkShadingRatePaletteNV {
    shadingRatePaletteEntryCount: u32,
    pShadingRatePaletteEntries: *const VkShadingRatePaletteEntryNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShadingRateImagePropertiesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    shadingRateTexelSize: VkExtent2D,
    shadingRatePaletteSize: u32,
    shadingRateMaxCoarseSamples: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCoarseSampleLocationNV {
    pixelX: u32,
    pixelY: u32,
    sample: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCoarseSampleOrderCustomNV {
    shadingRate: VkShadingRatePaletteEntryNV,
    sampleCount: u32,
    sampleLocationCount: u32,
    pSampleLocations: *const VkCoarseSampleLocationNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    sampleOrderType: VkCoarseSampleOrderTypeNV,
    customSampleOrderCount: u32,
    pCustomSampleOrders: *const VkCoarseSampleOrderCustomNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMeshShaderPropertiesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxDrawMeshTasksCount: u32,
    maxTaskWorkGroupInvocations: u32,
    maxTaskWorkGroupSize: [u32;3],
    maxTaskTotalMemorySize: u32,
    maxTaskOutputCount: u32,
    maxMeshWorkGroupInvocations: u32,
    maxMeshWorkGroupSize: [u32;3],
    maxMeshTotalMemorySize: u32,
    maxMeshOutputVertices: u32,
    maxMeshOutputPrimitives: u32,
    maxMeshMultiviewViewCount: u32,
    meshOutputPerVertexGranularity: u32,
    meshOutputPerPrimitiveGranularity: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDrawMeshTasksIndirectCommandNV {
    taskCount: u32,
    firstTask: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRayTracingShaderGroupCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    type_: VkRayTracingShaderGroupTypeKHR,
    generalShader: u32,
    closestHitShader: u32,
    anyHitShader: u32,
    intersectionShader: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkWriteDescriptorSetAccelerationStructureNV {
    sType: VkStructureType,
    pNext: *const c_void,
    accelerationStructureCount: u32,
    pAccelerationStructures: *const VkAccelerationStructureNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureMemoryRequirementsInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    type_: VkAccelerationStructureMemoryRequirementsTypeNV,
    accelerationStructure: VkAccelerationStructureNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRayTracingPropertiesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderGroupHandleSize: u32,
    maxRecursionDepth: u32,
    maxShaderGroupStride: u32,
    shaderGroupBaseAlignment: u32,
    maxGeometryCount: u64,
    maxInstanceCount: u64,
    maxTriangleCount: u64,
    maxDescriptorSetAccelerationStructures: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    drmFormatModifier: u64,
    sharingMode: VkSharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices: *const u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageDrmFormatModifierListCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    drmFormatModifierCount: u32,
    pDrmFormatModifiers: *const u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageDrmFormatModifierPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    drmFormatModifier: u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceMemoryOverallocationCreateInfoAMD {
    sType: VkStructureType,
    pNext: *const c_void,
    overallocationBehavior: VkMemoryOverallocationBehaviorAMD,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassFragmentDensityMapCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    fragmentDensityMapAttachment: VkAttachmentReference,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryPriorityAllocateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    priority: c_float,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferDeviceAddressInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    buffer: VkBuffer,
}
pub type VkBufferDeviceAddressInfoKHR = VkBufferDeviceAddressInfo;
pub type VkBufferDeviceAddressInfoEXT = VkBufferDeviceAddressInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferOpaqueCaptureAddressCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    opaqueCaptureAddress: u64,
}
pub type VkBufferOpaqueCaptureAddressCreateInfoKHR = VkBufferOpaqueCaptureAddressCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImageViewImageFormatInfoEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    imageViewType: VkImageViewType,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassAttachmentBeginInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    attachmentCount: u32,
    pAttachments: *const VkImageView,
}
pub type VkRenderPassAttachmentBeginInfoKHR = VkRenderPassAttachmentBeginInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCooperativeMatrixPropertiesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    MSize: u32,
    NSize: u32,
    KSize: u32,
    AType: VkComponentTypeNV,
    BType: VkComponentTypeNV,
    CType: VkComponentTypeNV,
    DType: VkComponentTypeNV,
    scope: VkScopeNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageViewHandleInfoNVX {
    sType: VkStructureType,
    pNext: *const c_void,
    imageView: VkImageView,
    descriptorType: VkDescriptorType,
    sampler: VkSampler,
}
#[cfg(any(feature = "VK_USE_PLATFORM_GGP"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPresentFrameTokenGGP {
    sType: VkStructureType,
    pNext: *const c_void,
    frameToken: GgpFrameToken,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceFullScreenExclusiveInfoEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    fullScreenExclusive: VkFullScreenExclusiveEXT,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceFullScreenExclusiveWin32InfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    hmonitor: HMONITOR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceCounterKHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    unit: VkPerformanceCounterUnitKHR,
    scope: VkPerformanceCounterScopeKHR,
    storage: VkPerformanceCounterStorageKHR,
    uuid: u8,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueryPoolPerformanceCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    queueFamilyIndex: u32,
    counterIndexCount: u32,
    pCounterIndices: *const u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkPerformanceCounterResultKHR {
    int32: i32,
    int64: i32,
    uint32: u32,
    uint64: u64,
    float32: c_float,
    float64: c_double,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceQuerySubmitInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    counterPassIndex: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkInitializePerformanceApiInfoINTEL {
    sType: VkStructureType,
    pNext: *const c_void,
    pUserData: *mut c_void,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueryPoolPerformanceQueryCreateInfoINTEL {
    sType: VkStructureType,
    pNext: *const c_void,
    performanceCountersSampling: VkQueryPoolSamplingModeINTEL,
}
pub type VkQueryPoolCreateInfoINTEL = VkQueryPoolPerformanceQueryCreateInfoINTEL;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceMarkerInfoINTEL {
    sType: VkStructureType,
    pNext: *const c_void,
    marker: u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceStreamMarkerInfoINTEL {
    sType: VkStructureType,
    pNext: *const c_void,
    marker: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceConfigurationAcquireInfoINTEL {
    sType: VkStructureType,
    pNext: *const c_void,
    type_: VkPerformanceConfigurationTypeINTEL,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderSMCount: u32,
    shaderWarpsPerSM: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentReferenceStencilLayout {
    sType: VkStructureType,
    pNext: *mut c_void,
    stencilLayout: VkImageLayout,
}
pub type VkAttachmentReferenceStencilLayoutKHR = VkAttachmentReferenceStencilLayout;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentDescriptionStencilLayout {
    sType: VkStructureType,
    pNext: *mut c_void,
    stencilInitialLayout: VkImageLayout,
    stencilFinalLayout: VkImageLayout,
}
pub type VkAttachmentDescriptionStencilLayoutKHR = VkAttachmentDescriptionStencilLayout;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    pipeline: VkPipeline,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineExecutableInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    pipeline: VkPipeline,
    executableIndex: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo {
    sType: VkStructureType,
    pNext: *mut c_void,
    requiredSubgroupSize: u32,
}
pub type VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT = VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryOpaqueCaptureAddressAllocateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    opaqueCaptureAddress: u64,
}
pub type VkMemoryOpaqueCaptureAddressAllocateInfoKHR = VkMemoryOpaqueCaptureAddressAllocateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceMemoryOpaqueCaptureAddressInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    memory: VkDeviceMemory,
}
pub type VkDeviceMemoryOpaqueCaptureAddressInfoKHR = VkDeviceMemoryOpaqueCaptureAddressInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceLineRasterizationPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    lineSubPixelPrecisionBits: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerCustomBorderColorCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    customBorderColor: VkClearColorValue,
    format: VkFormat,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCustomBorderColorPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxCustomBorderColorSamplers: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAabbPositionsKHR {
    minX: c_float,
    minY: c_float,
    minZ: c_float,
    maxX: c_float,
    maxY: c_float,
    maxZ: c_float,
}
pub type VkAabbPositionsNV = VkAabbPositionsKHR;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkTransformMatrixKHR {
    matrix: [c_float;3],
}
pub type VkTransformMatrixNV = VkTransformMatrixKHR;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineLibraryCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    libraryCount: u32,
    pLibraries: *const VkPipeline,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassTransformBeginInfoQCOM {
    sType: VkStructureType,
    pNext: *mut c_void,
    transform: VkSurfaceTransformFlagBitsKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM {
    sType: VkStructureType,
    pNext: *mut c_void,
    transform: VkSurfaceTransformFlagBitsKHR,
    renderArea: VkRect2D,
}
pub type VkSampleMask = u32;
pub type VkBool32 = u32;
pub type VkFlags = u32;
pub type VkFlags64 = u64;
pub type VkDeviceSize = u64;
pub type VkDeviceAddress = u64;
pub type VkFramebufferCreateFlags = VkFlags;
pub type VkQueryPoolCreateFlags = VkFlags;
pub type VkRenderPassCreateFlags = VkFlags;
pub type VkSamplerCreateFlags = VkFlags;
pub type VkPipelineLayoutCreateFlags = VkFlags;
pub type VkPipelineCacheCreateFlags = VkFlags;
pub type VkPipelineDepthStencilStateCreateFlags = VkFlags;
pub type VkPipelineDynamicStateCreateFlags = VkFlags;
pub type VkPipelineColorBlendStateCreateFlags = VkFlags;
pub type VkPipelineMultisampleStateCreateFlags = VkFlags;
pub type VkPipelineRasterizationStateCreateFlags = VkFlags;
pub type VkPipelineViewportStateCreateFlags = VkFlags;
pub type VkPipelineTessellationStateCreateFlags = VkFlags;
pub type VkPipelineInputAssemblyStateCreateFlags = VkFlags;
pub type VkPipelineVertexInputStateCreateFlags = VkFlags;
pub type VkPipelineShaderStageCreateFlags = VkFlags;
pub type VkDescriptorSetLayoutCreateFlags = VkFlags;
pub type VkBufferViewCreateFlags = VkFlags;
pub type VkInstanceCreateFlags = VkFlags;
pub type VkDeviceCreateFlags = VkFlags;
pub type VkDeviceQueueCreateFlags = VkFlags;
pub type VkQueueFlags = VkFlags;
pub type VkMemoryPropertyFlags = VkFlags;
pub type VkMemoryHeapFlags = VkFlags;
pub type VkAccessFlags = VkFlags;
pub type VkBufferUsageFlags = VkFlags;
pub type VkBufferCreateFlags = VkFlags;
pub type VkShaderStageFlags = VkFlags;
pub type VkImageUsageFlags = VkFlags;
pub type VkImageCreateFlags = VkFlags;
pub type VkImageViewCreateFlags = VkFlags;
pub type VkPipelineCreateFlags = VkFlags;
pub type VkColorComponentFlags = VkFlags;
pub type VkFenceCreateFlags = VkFlags;
pub type VkSemaphoreCreateFlags = VkFlags;
pub type VkFormatFeatureFlags = VkFlags;
pub type VkQueryControlFlags = VkFlags;
pub type VkQueryResultFlags = VkFlags;
pub type VkShaderModuleCreateFlags = VkFlags;
pub type VkEventCreateFlags = VkFlags;
pub type VkCommandPoolCreateFlags = VkFlags;
pub type VkCommandPoolResetFlags = VkFlags;
pub type VkCommandBufferResetFlags = VkFlags;
pub type VkCommandBufferUsageFlags = VkFlags;
pub type VkQueryPipelineStatisticFlags = VkFlags;
pub type VkMemoryMapFlags = VkFlags;
pub type VkImageAspectFlags = VkFlags;
pub type VkSparseMemoryBindFlags = VkFlags;
pub type VkSparseImageFormatFlags = VkFlags;
pub type VkSubpassDescriptionFlags = VkFlags;
pub type VkPipelineStageFlags = VkFlags;
pub type VkSampleCountFlags = VkFlags;
pub type VkAttachmentDescriptionFlags = VkFlags;
pub type VkStencilFaceFlags = VkFlags;
pub type VkCullModeFlags = VkFlags;
pub type VkDescriptorPoolCreateFlags = VkFlags;
pub type VkDescriptorPoolResetFlags = VkFlags;
pub type VkDependencyFlags = VkFlags;
pub type VkSubgroupFeatureFlags = VkFlags;
pub type VkIndirectCommandsLayoutUsageFlagsNV = VkFlags;
pub type VkIndirectStateFlagsNV = VkFlags;
pub type VkGeometryFlagsKHR = VkFlags;
pub type VkGeometryFlagsNV = VkGeometryFlagsKHR;
pub type VkGeometryInstanceFlagsKHR = VkFlags;
pub type VkGeometryInstanceFlagsNV = VkGeometryInstanceFlagsKHR;
pub type VkBuildAccelerationStructureFlagsKHR = VkFlags;
pub type VkBuildAccelerationStructureFlagsNV = VkBuildAccelerationStructureFlagsKHR;
pub type VkPrivateDataSlotCreateFlags = VkFlags;
pub type VkPrivateDataSlotCreateFlagsEXT = VkPrivateDataSlotCreateFlags;
pub type VkDescriptorUpdateTemplateCreateFlags = VkFlags;
pub type VkDescriptorUpdateTemplateCreateFlagsKHR = VkDescriptorUpdateTemplateCreateFlags;
pub type VkPipelineCreationFeedbackFlags = VkFlags;
pub type VkPipelineCreationFeedbackFlagsEXT = VkPipelineCreationFeedbackFlags;
pub type VkPerformanceCounterDescriptionFlagsKHR = VkFlags;
pub type VkAcquireProfilingLockFlagsKHR = VkFlags;
pub type VkSemaphoreWaitFlags = VkFlags;
pub type VkSemaphoreWaitFlagsKHR = VkSemaphoreWaitFlags;
pub type VkPipelineCompilerControlFlagsAMD = VkFlags;
pub type VkShaderCorePropertiesFlagsAMD = VkFlags;
pub type VkDeviceDiagnosticsConfigFlagsNV = VkFlags;
pub type VkFormatFeatureFlags2 = VkFlags64;
pub type VkCompositeAlphaFlagsKHR = VkFlags;
pub type VkDisplayPlaneAlphaFlagsKHR = VkFlags;
pub type VkSurfaceTransformFlagsKHR = VkFlags;
pub type VkSwapchainCreateFlagsKHR = VkFlags;
pub type VkDisplayModeCreateFlagsKHR = VkFlags;
pub type VkDisplaySurfaceCreateFlagsKHR = VkFlags;
pub type VkAndroidSurfaceCreateFlagsKHR = VkFlags;
pub type VkViSurfaceCreateFlagsNN = VkFlags;
pub type VkWaylandSurfaceCreateFlagsKHR = VkFlags;
pub type VkWin32SurfaceCreateFlagsKHR = VkFlags;
pub type VkXlibSurfaceCreateFlagsKHR = VkFlags;
pub type VkXcbSurfaceCreateFlagsKHR = VkFlags;
pub type VkDirectFBSurfaceCreateFlagsEXT = VkFlags;
pub type VkIOSSurfaceCreateFlagsMVK = VkFlags;
pub type VkMacOSSurfaceCreateFlagsMVK = VkFlags;
pub type VkMetalSurfaceCreateFlagsEXT = VkFlags;
pub type VkImagePipeSurfaceCreateFlagsFUCHSIA = VkFlags;
pub type VkStreamDescriptorSurfaceCreateFlagsGGP = VkFlags;
pub type VkHeadlessSurfaceCreateFlagsEXT = VkFlags;
pub type VkPeerMemoryFeatureFlags = VkFlags;
pub type VkPeerMemoryFeatureFlagsKHR = VkPeerMemoryFeatureFlags;
pub type VkMemoryAllocateFlags = VkFlags;
pub type VkMemoryAllocateFlagsKHR = VkMemoryAllocateFlags;
pub type VkDeviceGroupPresentModeFlagsKHR = VkFlags;
pub type VkDebugReportFlagsEXT = VkFlags;
pub type VkCommandPoolTrimFlags = VkFlags;
pub type VkCommandPoolTrimFlagsKHR = VkCommandPoolTrimFlags;
pub type VkExternalMemoryHandleTypeFlagsNV = VkFlags;
pub type VkExternalMemoryFeatureFlagsNV = VkFlags;
pub type VkExternalMemoryHandleTypeFlags = VkFlags;
pub type VkExternalMemoryHandleTypeFlagsKHR = VkExternalMemoryHandleTypeFlags;
pub type VkExternalMemoryFeatureFlags = VkFlags;
pub type VkExternalMemoryFeatureFlagsKHR = VkExternalMemoryFeatureFlags;
pub type VkExternalSemaphoreHandleTypeFlags = VkFlags;
pub type VkExternalSemaphoreHandleTypeFlagsKHR = VkExternalSemaphoreHandleTypeFlags;
pub type VkExternalSemaphoreFeatureFlags = VkFlags;
pub type VkExternalSemaphoreFeatureFlagsKHR = VkExternalSemaphoreFeatureFlags;
pub type VkSemaphoreImportFlags = VkFlags;
pub type VkSemaphoreImportFlagsKHR = VkSemaphoreImportFlags;
pub type VkExternalFenceHandleTypeFlags = VkFlags;
pub type VkExternalFenceHandleTypeFlagsKHR = VkExternalFenceHandleTypeFlags;
pub type VkExternalFenceFeatureFlags = VkFlags;
pub type VkExternalFenceFeatureFlagsKHR = VkExternalFenceFeatureFlags;
pub type VkFenceImportFlags = VkFlags;
pub type VkFenceImportFlagsKHR = VkFenceImportFlags;
pub type VkSurfaceCounterFlagsEXT = VkFlags;
pub type VkPipelineViewportSwizzleStateCreateFlagsNV = VkFlags;
pub type VkPipelineDiscardRectangleStateCreateFlagsEXT = VkFlags;
pub type VkPipelineCoverageToColorStateCreateFlagsNV = VkFlags;
pub type VkPipelineCoverageModulationStateCreateFlagsNV = VkFlags;
pub type VkPipelineCoverageReductionStateCreateFlagsNV = VkFlags;
pub type VkValidationCacheCreateFlagsEXT = VkFlags;
pub type VkDebugUtilsMessageSeverityFlagsEXT = VkFlags;
pub type VkDebugUtilsMessageTypeFlagsEXT = VkFlags;
pub type VkDebugUtilsMessengerCreateFlagsEXT = VkFlags;
pub type VkDebugUtilsMessengerCallbackDataFlagsEXT = VkFlags;
pub type VkPipelineRasterizationConservativeStateCreateFlagsEXT = VkFlags;
pub type VkDescriptorBindingFlags = VkFlags;
pub type VkDescriptorBindingFlagsEXT = VkDescriptorBindingFlags;
pub type VkConditionalRenderingFlagsEXT = VkFlags;
pub type VkResolveModeFlags = VkFlags;
pub type VkResolveModeFlagsKHR = VkResolveModeFlags;
pub type VkPipelineRasterizationStateStreamCreateFlagsEXT = VkFlags;
pub type VkPipelineRasterizationDepthClipStateCreateFlagsEXT = VkFlags;
pub type VkToolPurposeFlags = VkFlags;
pub type VkToolPurposeFlagsEXT = VkToolPurposeFlags;
pub type PFN_vkDebugReportCallbackEXT = extern "system" fn(
    flags: VkDebugReportFlagsEXT,
    objectType: VkDebugReportObjectTypeEXT,
    object: u64,
    location: usize,
    messageCode: i32,
    pLayerPrefix: *const c_char,
    pMessage: *const c_char,
    pUserData: *mut c_void,
) -> VkBool32;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceQueueCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkDeviceQueueCreateFlags,
    queueFamilyIndex: u32,
    queueCount: u32,
    pQueuePriorities: *const c_float,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkInstanceCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkInstanceCreateFlags,
    pApplicationInfo: *const VkApplicationInfo,
    enabledLayerCount: u32,
    ppEnabledLayerNames: *const *const c_char,
    enabledExtensionCount: u32,
    ppEnabledExtensionNames: *const *const c_char,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueueFamilyProperties {
    queueFlags: VkQueueFlags,
    queueCount: u32,
    timestampValidBits: u32,
    minImageTransferGranularity: VkExtent3D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryAllocateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    allocationSize: VkDeviceSize,
    memoryTypeIndex: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryRequirements {
    size: VkDeviceSize,
    alignment: VkDeviceSize,
    memoryTypeBits: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageFormatProperties {
    aspectMask: VkImageAspectFlags,
    imageGranularity: VkExtent3D,
    flags: VkSparseImageFormatFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageMemoryRequirements {
    formatProperties: VkSparseImageFormatProperties,
    imageMipTailFirstLod: u32,
    imageMipTailSize: VkDeviceSize,
    imageMipTailOffset: VkDeviceSize,
    imageMipTailStride: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryType {
    propertyFlags: VkMemoryPropertyFlags,
    heapIndex: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryHeap {
    size: VkDeviceSize,
    flags: VkMemoryHeapFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMappedMemoryRange {
    sType: VkStructureType,
    pNext: *const c_void,
    memory: VkDeviceMemory,
    offset: VkDeviceSize,
    size: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFormatProperties {
    linearTilingFeatures: VkFormatFeatureFlags,
    optimalTilingFeatures: VkFormatFeatureFlags,
    bufferFeatures: VkFormatFeatureFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageFormatProperties {
    maxExtent: VkExtent3D,
    maxMipLevels: u32,
    maxArrayLayers: u32,
    sampleCounts: VkSampleCountFlags,
    maxResourceSize: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorBufferInfo {
    buffer: VkBuffer,
    offset: VkDeviceSize,
    range: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkWriteDescriptorSet {
    sType: VkStructureType,
    pNext: *const c_void,
    dstSet: VkDescriptorSet,
    dstBinding: u32,
    dstArrayElement: u32,
    descriptorCount: u32,
    descriptorType: VkDescriptorType,
    pImageInfo: *const VkDescriptorImageInfo,
    pBufferInfo: *const VkDescriptorBufferInfo,
    pTexelBufferView: *const VkBufferView,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkBufferCreateFlags,
    size: VkDeviceSize,
    usage: VkBufferUsageFlags,
    sharingMode: VkSharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices: *const u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferViewCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkBufferViewCreateFlags,
    buffer: VkBuffer,
    format: VkFormat,
    offset: VkDeviceSize,
    range: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageSubresource {
    aspectMask: VkImageAspectFlags,
    mipLevel: u32,
    arrayLayer: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageSubresourceLayers {
    aspectMask: VkImageAspectFlags,
    mipLevel: u32,
    baseArrayLayer: u32,
    layerCount: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageSubresourceRange {
    aspectMask: VkImageAspectFlags,
    baseMipLevel: u32,
    levelCount: u32,
    baseArrayLayer: u32,
    layerCount: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryBarrier {
    sType: VkStructureType,
    pNext: *const c_void,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferMemoryBarrier {
    sType: VkStructureType,
    pNext: *const c_void,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
    srcQueueFamilyIndex: u32,
    dstQueueFamilyIndex: u32,
    buffer: VkBuffer,
    offset: VkDeviceSize,
    size: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageMemoryBarrier {
    sType: VkStructureType,
    pNext: *const c_void,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
    oldLayout: VkImageLayout,
    newLayout: VkImageLayout,
    srcQueueFamilyIndex: u32,
    dstQueueFamilyIndex: u32,
    image: VkImage,
    subresourceRange: VkImageSubresourceRange,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkImageCreateFlags,
    imageType: VkImageType,
    format: VkFormat,
    extent: VkExtent3D,
    mipLevels: u32,
    arrayLayers: u32,
    samples: VkSampleCountFlagBits,
    tiling: VkImageTiling,
    usage: VkImageUsageFlags,
    sharingMode: VkSharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices: *const u32,
    initialLayout: VkImageLayout,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubresourceLayout {
    offset: VkDeviceSize,
    size: VkDeviceSize,
    rowPitch: VkDeviceSize,
    arrayPitch: VkDeviceSize,
    depthPitch: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageViewCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkImageViewCreateFlags,
    image: VkImage,
    viewType: VkImageViewType,
    format: VkFormat,
    components: VkComponentMapping,
    subresourceRange: VkImageSubresourceRange,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferCopy {
    srcOffset: VkDeviceSize,
    dstOffset: VkDeviceSize,
    size: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseMemoryBind {
    resourceOffset: VkDeviceSize,
    size: VkDeviceSize,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
    flags: VkSparseMemoryBindFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageMemoryBind {
    subresource: VkImageSubresource,
    offset: VkOffset3D,
    extent: VkExtent3D,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
    flags: VkSparseMemoryBindFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseBufferMemoryBindInfo {
    buffer: VkBuffer,
    bindCount: u32,
    pBinds: *const VkSparseMemoryBind,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageOpaqueMemoryBindInfo {
    image: VkImage,
    bindCount: u32,
    pBinds: *const VkSparseMemoryBind,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageMemoryBindInfo {
    image: VkImage,
    bindCount: u32,
    pBinds: *const VkSparseImageMemoryBind,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindSparseInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    waitSemaphoreCount: u32,
    pWaitSemaphores: *const VkSemaphore,
    bufferBindCount: u32,
    pBufferBinds: *const VkSparseBufferMemoryBindInfo,
    imageOpaqueBindCount: u32,
    pImageOpaqueBinds: *const VkSparseImageOpaqueMemoryBindInfo,
    imageBindCount: u32,
    pImageBinds: *const VkSparseImageMemoryBindInfo,
    signalSemaphoreCount: u32,
    pSignalSemaphores: *const VkSemaphore,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageCopy {
    srcSubresource: VkImageSubresourceLayers,
    srcOffset: VkOffset3D,
    dstSubresource: VkImageSubresourceLayers,
    dstOffset: VkOffset3D,
    extent: VkExtent3D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageBlit {
    srcSubresource: VkImageSubresourceLayers,
    srcOffsets: [VkOffset3D;2],
    dstSubresource: VkImageSubresourceLayers,
    dstOffsets: [VkOffset3D;2],
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferImageCopy {
    bufferOffset: VkDeviceSize,
    bufferRowLength: u32,
    bufferImageHeight: u32,
    imageSubresource: VkImageSubresourceLayers,
    imageOffset: VkOffset3D,
    imageExtent: VkExtent3D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageResolve {
    srcSubresource: VkImageSubresourceLayers,
    srcOffset: VkOffset3D,
    dstSubresource: VkImageSubresourceLayers,
    dstOffset: VkOffset3D,
    extent: VkExtent3D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkShaderModuleCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkShaderModuleCreateFlags,
    codeSize: usize,
    pCode: *const u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetLayoutBinding {
    binding: u32,
    descriptorType: VkDescriptorType,
    descriptorCount: u32,
    stageFlags: VkShaderStageFlags,
    pImmutableSamplers: *const VkSampler,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetLayoutCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkDescriptorSetLayoutCreateFlags,
    bindingCount: u32,
    pBindings: *const VkDescriptorSetLayoutBinding,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorPoolCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkDescriptorPoolCreateFlags,
    maxSets: u32,
    poolSizeCount: u32,
    pPoolSizes: *const VkDescriptorPoolSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineShaderStageCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineShaderStageCreateFlags,
    stage: VkShaderStageFlagBits,
    module: VkShaderModule,
    pName: *const c_char,
    pSpecializationInfo: *const VkSpecializationInfo,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkComputePipelineCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineCreateFlags,
    stage: VkPipelineShaderStageCreateInfo,
    layout: VkPipelineLayout,
    basePipelineHandle: VkPipeline,
    basePipelineIndex: i32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineVertexInputStateCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineVertexInputStateCreateFlags,
    vertexBindingDescriptionCount: u32,
    pVertexBindingDescriptions: *const VkVertexInputBindingDescription,
    vertexAttributeDescriptionCount: u32,
    pVertexAttributeDescriptions: *const VkVertexInputAttributeDescription,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineInputAssemblyStateCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineInputAssemblyStateCreateFlags,
    topology: VkPrimitiveTopology,
    primitiveRestartEnable: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineTessellationStateCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineTessellationStateCreateFlags,
    patchControlPoints: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportStateCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineViewportStateCreateFlags,
    viewportCount: u32,
    pViewports: *const VkViewport,
    scissorCount: u32,
    pScissors: *const VkRect2D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRasterizationStateCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineRasterizationStateCreateFlags,
    depthClampEnable: VkBool32,
    rasterizerDiscardEnable: VkBool32,
    polygonMode: VkPolygonMode,
    cullMode: VkCullModeFlags,
    frontFace: VkFrontFace,
    depthBiasEnable: VkBool32,
    depthBiasConstantFactor: c_float,
    depthBiasClamp: c_float,
    depthBiasSlopeFactor: c_float,
    lineWidth: c_float,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineMultisampleStateCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineMultisampleStateCreateFlags,
    rasterizationSamples: VkSampleCountFlagBits,
    sampleShadingEnable: VkBool32,
    minSampleShading: c_float,
    pSampleMask: *const VkSampleMask,
    alphaToCoverageEnable: VkBool32,
    alphaToOneEnable: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineColorBlendAttachmentState {
    blendEnable: VkBool32,
    srcColorBlendFactor: VkBlendFactor,
    dstColorBlendFactor: VkBlendFactor,
    colorBlendOp: VkBlendOp,
    srcAlphaBlendFactor: VkBlendFactor,
    dstAlphaBlendFactor: VkBlendFactor,
    alphaBlendOp: VkBlendOp,
    colorWriteMask: VkColorComponentFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineColorBlendStateCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineColorBlendStateCreateFlags,
    logicOpEnable: VkBool32,
    logicOp: VkLogicOp,
    attachmentCount: u32,
    pAttachments: *const VkPipelineColorBlendAttachmentState,
    blendConstants: [c_float;4],
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineDynamicStateCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineDynamicStateCreateFlags,
    dynamicStateCount: u32,
    pDynamicStates: *const VkDynamicState,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineDepthStencilStateCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineDepthStencilStateCreateFlags,
    depthTestEnable: VkBool32,
    depthWriteEnable: VkBool32,
    depthCompareOp: VkCompareOp,
    depthBoundsTestEnable: VkBool32,
    stencilTestEnable: VkBool32,
    front: VkStencilOpState,
    back: VkStencilOpState,
    minDepthBounds: c_float,
    maxDepthBounds: c_float,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGraphicsPipelineCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineCreateFlags,
    stageCount: u32,
    pStages: *const VkPipelineShaderStageCreateInfo,
    pVertexInputState: *const VkPipelineVertexInputStateCreateInfo,
    pInputAssemblyState: *const VkPipelineInputAssemblyStateCreateInfo,
    pTessellationState: *const VkPipelineTessellationStateCreateInfo,
    pViewportState: *const VkPipelineViewportStateCreateInfo,
    pRasterizationState: *const VkPipelineRasterizationStateCreateInfo,
    pMultisampleState: *const VkPipelineMultisampleStateCreateInfo,
    pDepthStencilState: *const VkPipelineDepthStencilStateCreateInfo,
    pColorBlendState: *const VkPipelineColorBlendStateCreateInfo,
    pDynamicState: *const VkPipelineDynamicStateCreateInfo,
    layout: VkPipelineLayout,
    renderPass: VkRenderPass,
    subpass: u32,
    basePipelineHandle: VkPipeline,
    basePipelineIndex: i32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCacheCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineCacheCreateFlags,
    initialDataSize: usize,
    pInitialData: *const c_void,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPushConstantRange {
    stageFlags: VkShaderStageFlags,
    offset: u32,
    size: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineLayoutCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineLayoutCreateFlags,
    setLayoutCount: u32,
    pSetLayouts: *const VkDescriptorSetLayout,
    pushConstantRangeCount: u32,
    pPushConstantRanges: *const VkPushConstantRange,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkSamplerCreateFlags,
    magFilter: VkFilter,
    minFilter: VkFilter,
    mipmapMode: VkSamplerMipmapMode,
    addressModeU: VkSamplerAddressMode,
    addressModeV: VkSamplerAddressMode,
    addressModeW: VkSamplerAddressMode,
    mipLodBias: c_float,
    anisotropyEnable: VkBool32,
    maxAnisotropy: c_float,
    compareEnable: VkBool32,
    compareOp: VkCompareOp,
    minLod: c_float,
    maxLod: c_float,
    borderColor: VkBorderColor,
    unnormalizedCoordinates: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandPoolCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkCommandPoolCreateFlags,
    queueFamilyIndex: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBufferInheritanceInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    renderPass: VkRenderPass,
    subpass: u32,
    framebuffer: VkFramebuffer,
    occlusionQueryEnable: VkBool32,
    queryFlags: VkQueryControlFlags,
    pipelineStatistics: VkQueryPipelineStatisticFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBufferBeginInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkCommandBufferUsageFlags,
    pInheritanceInfo: *const VkCommandBufferInheritanceInfo,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassBeginInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    renderPass: VkRenderPass,
    framebuffer: VkFramebuffer,
    renderArea: VkRect2D,
    clearValueCount: u32,
    pClearValues: *const VkClearValue,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkClearAttachment {
    aspectMask: VkImageAspectFlags,
    colorAttachment: u32,
    clearValue: VkClearValue,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentDescription {
    flags: VkAttachmentDescriptionFlags,
    format: VkFormat,
    samples: VkSampleCountFlagBits,
    loadOp: VkAttachmentLoadOp,
    storeOp: VkAttachmentStoreOp,
    stencilLoadOp: VkAttachmentLoadOp,
    stencilStoreOp: VkAttachmentStoreOp,
    initialLayout: VkImageLayout,
    finalLayout: VkImageLayout,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassDescription {
    flags: VkSubpassDescriptionFlags,
    pipelineBindPoint: VkPipelineBindPoint,
    inputAttachmentCount: u32,
    pInputAttachments: *const VkAttachmentReference,
    colorAttachmentCount: u32,
    pColorAttachments: *const VkAttachmentReference,
    pResolveAttachments: *const VkAttachmentReference,
    pDepthStencilAttachment: *const VkAttachmentReference,
    preserveAttachmentCount: u32,
    pPreserveAttachments: *const u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassDependency {
    srcSubpass: u32,
    dstSubpass: u32,
    srcStageMask: VkPipelineStageFlags,
    dstStageMask: VkPipelineStageFlags,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
    dependencyFlags: VkDependencyFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkRenderPassCreateFlags,
    attachmentCount: u32,
    pAttachments: *const VkAttachmentDescription,
    subpassCount: u32,
    pSubpasses: *const VkSubpassDescription,
    dependencyCount: u32,
    pDependencies: *const VkSubpassDependency,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkEventCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkEventCreateFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFenceCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkFenceCreateFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFeatures {
    robustBufferAccess: VkBool32,
    fullDrawIndexUint32: VkBool32,
    imageCubeArray: VkBool32,
    independentBlend: VkBool32,
    geometryShader: VkBool32,
    tessellationShader: VkBool32,
    sampleRateShading: VkBool32,
    dualSrcBlend: VkBool32,
    logicOp: VkBool32,
    multiDrawIndirect: VkBool32,
    drawIndirectFirstInstance: VkBool32,
    depthClamp: VkBool32,
    depthBiasClamp: VkBool32,
    fillModeNonSolid: VkBool32,
    depthBounds: VkBool32,
    wideLines: VkBool32,
    largePoints: VkBool32,
    alphaToOne: VkBool32,
    multiViewport: VkBool32,
    samplerAnisotropy: VkBool32,
    textureCompressionETC2: VkBool32,
    textureCompressionASTC_LDR: VkBool32,
    textureCompressionBC: VkBool32,
    occlusionQueryPrecise: VkBool32,
    pipelineStatisticsQuery: VkBool32,
    vertexPipelineStoresAndAtomics: VkBool32,
    fragmentStoresAndAtomics: VkBool32,
    shaderTessellationAndGeometryPointSize: VkBool32,
    shaderImageGatherExtended: VkBool32,
    shaderStorageImageExtendedFormats: VkBool32,
    shaderStorageImageMultisample: VkBool32,
    shaderStorageImageReadWithoutFormat: VkBool32,
    shaderStorageImageWriteWithoutFormat: VkBool32,
    shaderUniformBufferArrayDynamicIndexing: VkBool32,
    shaderSampledImageArrayDynamicIndexing: VkBool32,
    shaderStorageBufferArrayDynamicIndexing: VkBool32,
    shaderStorageImageArrayDynamicIndexing: VkBool32,
    shaderClipDistance: VkBool32,
    shaderCullDistance: VkBool32,
    shaderFloat64: VkBool32,
    shaderInt64: VkBool32,
    shaderInt16: VkBool32,
    shaderResourceResidency: VkBool32,
    shaderResourceMinLod: VkBool32,
    sparseBinding: VkBool32,
    sparseResidencyBuffer: VkBool32,
    sparseResidencyImage2D: VkBool32,
    sparseResidencyImage3D: VkBool32,
    sparseResidency2Samples: VkBool32,
    sparseResidency4Samples: VkBool32,
    sparseResidency8Samples: VkBool32,
    sparseResidency16Samples: VkBool32,
    sparseResidencyAliased: VkBool32,
    variableMultisampleRate: VkBool32,
    inheritedQueries: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSparseProperties {
    residencyStandard2DBlockShape: VkBool32,
    residencyStandard2DMultisampleBlockShape: VkBool32,
    residencyStandard3DBlockShape: VkBool32,
    residencyAlignedMipSize: VkBool32,
    residencyNonResidentStrict: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceLimits {
    maxImageDimension1D: u32,
    maxImageDimension2D: u32,
    maxImageDimension3D: u32,
    maxImageDimensionCube: u32,
    maxImageArrayLayers: u32,
    maxTexelBufferElements: u32,
    maxUniformBufferRange: u32,
    maxStorageBufferRange: u32,
    maxPushConstantsSize: u32,
    maxMemoryAllocationCount: u32,
    maxSamplerAllocationCount: u32,
    bufferImageGranularity: VkDeviceSize,
    sparseAddressSpaceSize: VkDeviceSize,
    maxBoundDescriptorSets: u32,
    maxPerStageDescriptorSamplers: u32,
    maxPerStageDescriptorUniformBuffers: u32,
    maxPerStageDescriptorStorageBuffers: u32,
    maxPerStageDescriptorSampledImages: u32,
    maxPerStageDescriptorStorageImages: u32,
    maxPerStageDescriptorInputAttachments: u32,
    maxPerStageResources: u32,
    maxDescriptorSetSamplers: u32,
    maxDescriptorSetUniformBuffers: u32,
    maxDescriptorSetUniformBuffersDynamic: u32,
    maxDescriptorSetStorageBuffers: u32,
    maxDescriptorSetStorageBuffersDynamic: u32,
    maxDescriptorSetSampledImages: u32,
    maxDescriptorSetStorageImages: u32,
    maxDescriptorSetInputAttachments: u32,
    maxVertexInputAttributes: u32,
    maxVertexInputBindings: u32,
    maxVertexInputAttributeOffset: u32,
    maxVertexInputBindingStride: u32,
    maxVertexOutputComponents: u32,
    maxTessellationGenerationLevel: u32,
    maxTessellationPatchSize: u32,
    maxTessellationControlPerVertexInputComponents: u32,
    maxTessellationControlPerVertexOutputComponents: u32,
    maxTessellationControlPerPatchOutputComponents: u32,
    maxTessellationControlTotalOutputComponents: u32,
    maxTessellationEvaluationInputComponents: u32,
    maxTessellationEvaluationOutputComponents: u32,
    maxGeometryShaderInvocations: u32,
    maxGeometryInputComponents: u32,
    maxGeometryOutputComponents: u32,
    maxGeometryOutputVertices: u32,
    maxGeometryTotalOutputComponents: u32,
    maxFragmentInputComponents: u32,
    maxFragmentOutputAttachments: u32,
    maxFragmentDualSrcAttachments: u32,
    maxFragmentCombinedOutputResources: u32,
    maxComputeSharedMemorySize: u32,
    maxComputeWorkGroupCount: [u32;3],
    maxComputeWorkGroupInvocations: u32,
    maxComputeWorkGroupSize: [u32;3],
    subPixelPrecisionBits: u32,
    subTexelPrecisionBits: u32,
    mipmapPrecisionBits: u32,
    maxDrawIndexedIndexValue: u32,
    maxDrawIndirectCount: u32,
    maxSamplerLodBias: c_float,
    maxSamplerAnisotropy: c_float,
    maxViewports: u32,
    maxViewportDimensions: [u32;2],
    viewportBoundsRange: [c_float;2],
    viewportSubPixelBits: u32,
    minMemoryMapAlignment: usize,
    minTexelBufferOffsetAlignment: VkDeviceSize,
    minUniformBufferOffsetAlignment: VkDeviceSize,
    minStorageBufferOffsetAlignment: VkDeviceSize,
    minTexelOffset: i32,
    maxTexelOffset: u32,
    minTexelGatherOffset: i32,
    maxTexelGatherOffset: u32,
    minInterpolationOffset: c_float,
    maxInterpolationOffset: c_float,
    subPixelInterpolationOffsetBits: u32,
    maxFramebufferWidth: u32,
    maxFramebufferHeight: u32,
    maxFramebufferLayers: u32,
    framebufferColorSampleCounts: VkSampleCountFlags,
    framebufferDepthSampleCounts: VkSampleCountFlags,
    framebufferStencilSampleCounts: VkSampleCountFlags,
    framebufferNoAttachmentsSampleCounts: VkSampleCountFlags,
    maxColorAttachments: u32,
    sampledImageColorSampleCounts: VkSampleCountFlags,
    sampledImageIntegerSampleCounts: VkSampleCountFlags,
    sampledImageDepthSampleCounts: VkSampleCountFlags,
    sampledImageStencilSampleCounts: VkSampleCountFlags,
    storageImageSampleCounts: VkSampleCountFlags,
    maxSampleMaskWords: u32,
    timestampComputeAndGraphics: VkBool32,
    timestampPeriod: c_float,
    maxClipDistances: u32,
    maxCullDistances: u32,
    maxCombinedClipAndCullDistances: u32,
    discreteQueuePriorities: u32,
    pointSizeRange: [c_float;2],
    lineWidthRange: [c_float;2],
    pointSizeGranularity: c_float,
    lineWidthGranularity: c_float,
    strictLines: VkBool32,
    standardSampleLocations: VkBool32,
    optimalBufferCopyOffsetAlignment: VkDeviceSize,
    optimalBufferCopyRowPitchAlignment: VkDeviceSize,
    nonCoherentAtomSize: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSemaphoreCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkSemaphoreCreateFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueryPoolCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkQueryPoolCreateFlags,
    queryType: VkQueryType,
    queryCount: u32,
    pipelineStatistics: VkQueryPipelineStatisticFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFramebufferCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkFramebufferCreateFlags,
    renderPass: VkRenderPass,
    attachmentCount: u32,
    pAttachments: *const VkImageView,
    width: u32,
    height: u32,
    layers: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubmitInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    waitSemaphoreCount: u32,
    pWaitSemaphores: *const VkSemaphore,
    pWaitDstStageMask: *const VkPipelineStageFlags,
    commandBufferCount: u32,
    pCommandBuffers: *const VkCommandBuffer,
    signalSemaphoreCount: u32,
    pSignalSemaphores: *const VkSemaphore,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPropertiesKHR {
    display: VkDisplayKHR,
    displayName: *const c_char,
    physicalDimensions: VkExtent2D,
    physicalResolution: VkExtent2D,
    supportedTransforms: VkSurfaceTransformFlagsKHR,
    planeReorderPossible: VkBool32,
    persistentContent: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayModeCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkDisplayModeCreateFlagsKHR,
    parameters: VkDisplayModeParametersKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPlaneCapabilitiesKHR {
    supportedAlpha: VkDisplayPlaneAlphaFlagsKHR,
    minSrcPosition: VkOffset2D,
    maxSrcPosition: VkOffset2D,
    minSrcExtent: VkExtent2D,
    maxSrcExtent: VkExtent2D,
    minDstPosition: VkOffset2D,
    maxDstPosition: VkOffset2D,
    minDstExtent: VkExtent2D,
    maxDstExtent: VkExtent2D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplaySurfaceCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkDisplaySurfaceCreateFlagsKHR,
    displayMode: VkDisplayModeKHR,
    planeIndex: u32,
    planeStackIndex: u32,
    transform: VkSurfaceTransformFlagBitsKHR,
    globalAlpha: c_float,
    alphaMode: VkDisplayPlaneAlphaFlagBitsKHR,
    imageExtent: VkExtent2D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPresentInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    srcRect: VkRect2D,
    dstRect: VkRect2D,
    persistent: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceCapabilitiesKHR {
    minImageCount: u32,
    maxImageCount: u32,
    currentExtent: VkExtent2D,
    minImageExtent: VkExtent2D,
    maxImageExtent: VkExtent2D,
    maxImageArrayLayers: u32,
    supportedTransforms: VkSurfaceTransformFlagsKHR,
    currentTransform: VkSurfaceTransformFlagBitsKHR,
    supportedCompositeAlpha: VkCompositeAlphaFlagsKHR,
    supportedUsageFlags: VkImageUsageFlags,
}
#[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAndroidSurfaceCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkAndroidSurfaceCreateFlagsKHR,
    window: *mut ANativeWindow,
}
#[cfg(any(feature = "VK_USE_PLATFORM_VI_NN"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkViSurfaceCreateInfoNN {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkViSurfaceCreateFlagsNN,
    window: *mut c_void,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WAYLAND_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkWaylandSurfaceCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkWaylandSurfaceCreateFlagsKHR,
    display: *mut wl_display,
    surface: *mut wl_surface,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkWin32SurfaceCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkWin32SurfaceCreateFlagsKHR,
    hinstance: HINSTANCE,
    hwnd: HWND,
}
#[cfg(any(feature = "VK_USE_PLATFORM_XLIB_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkXlibSurfaceCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkXlibSurfaceCreateFlagsKHR,
    dpy: *mut Display,
    window: Window,
}
#[cfg(any(feature = "VK_USE_PLATFORM_XCB_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkXcbSurfaceCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkXcbSurfaceCreateFlagsKHR,
    connection: *mut xcb_connection_t,
    window: xcb_window_t,
}
#[cfg(any(feature = "VK_USE_PLATFORM_DIRECTFB_EXT"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDirectFBSurfaceCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkDirectFBSurfaceCreateFlagsEXT,
    dfb: *mut IDirectFB,
    surface: *mut IDirectFBSurface,
}
#[cfg(any(feature = "VK_USE_PLATFORM_FUCHSIA"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImagePipeSurfaceCreateInfoFUCHSIA {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkImagePipeSurfaceCreateFlagsFUCHSIA,
    imagePipeHandle: zx_handle_t,
}
#[cfg(any(feature = "VK_USE_PLATFORM_GGP"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkStreamDescriptorSurfaceCreateInfoGGP {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkStreamDescriptorSurfaceCreateFlagsGGP,
    streamDescriptor: GgpStreamDescriptor,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSwapchainCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkSwapchainCreateFlagsKHR,
    surface: VkSurfaceKHR,
    minImageCount: u32,
    imageFormat: VkFormat,
    imageColorSpace: VkColorSpaceKHR,
    imageExtent: VkExtent2D,
    imageArrayLayers: u32,
    imageUsage: VkImageUsageFlags,
    imageSharingMode: VkSharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices: *const u32,
    preTransform: VkSurfaceTransformFlagBitsKHR,
    compositeAlpha: VkCompositeAlphaFlagBitsKHR,
    presentMode: VkPresentModeKHR,
    clipped: VkBool32,
    oldSwapchain: VkSwapchainKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugReportCallbackCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkDebugReportFlagsEXT,
    pfnCallback: PFN_vkDebugReportCallbackEXT,
    pUserData: *mut c_void,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDedicatedAllocationImageCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    dedicatedAllocation: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDedicatedAllocationBufferCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    dedicatedAllocation: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalImageFormatPropertiesNV {
    imageFormatProperties: VkImageFormatProperties,
    externalMemoryFeatures: VkExternalMemoryFeatureFlagsNV,
    exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagsNV,
    compatibleHandleTypes: VkExternalMemoryHandleTypeFlagsNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalMemoryImageCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    handleTypes: VkExternalMemoryHandleTypeFlagsNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportMemoryAllocateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    handleTypes: VkExternalMemoryHandleTypeFlagsNV,
}
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImportMemoryWin32HandleInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    handleType: VkExternalMemoryHandleTypeFlagsNV,
    handle: HANDLE,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    deviceGeneratedCommands: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPrivateDataSlotCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPrivateDataSlotCreateFlags,
}
pub type VkPrivateDataSlotCreateInfoEXT = VkPrivateDataSlotCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePrivateDataFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    privateData: VkBool32,
}
pub type VkPhysicalDevicePrivateDataFeaturesEXT = VkPhysicalDevicePrivateDataFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGraphicsShaderGroupCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    stageCount: u32,
    pStages: *const VkPipelineShaderStageCreateInfo,
    pVertexInputState: *const VkPipelineVertexInputStateCreateInfo,
    pTessellationState: *const VkPipelineTessellationStateCreateInfo,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGraphicsPipelineShaderGroupsCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    groupCount: u32,
    pGroups: *const VkGraphicsShaderGroupCreateInfoNV,
    pipelineCount: u32,
    pPipelines: *const VkPipeline,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindIndexBufferIndirectCommandNV {
    bufferAddress: VkDeviceAddress,
    size: u32,
    indexType: VkIndexType,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindVertexBufferIndirectCommandNV {
    bufferAddress: VkDeviceAddress,
    size: u32,
    stride: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIndirectCommandsStreamNV {
    buffer: VkBuffer,
    offset: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIndirectCommandsLayoutTokenNV {
    sType: VkStructureType,
    pNext: *const c_void,
    tokenType: VkIndirectCommandsTokenTypeNV,
    stream: u32,
    offset: u32,
    vertexBindingUnit: u32,
    vertexDynamicStride: VkBool32,
    pushconstantPipelineLayout: VkPipelineLayout,
    pushconstantShaderStageFlags: VkShaderStageFlags,
    pushconstantOffset: u32,
    pushconstantSize: u32,
    indirectStateFlags: VkIndirectStateFlagsNV,
    indexTypeCount: u32,
    pIndexTypes: *const VkIndexType,
    pIndexTypeValues: *const u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIndirectCommandsLayoutCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkIndirectCommandsLayoutUsageFlagsNV,
    pipelineBindPoint: VkPipelineBindPoint,
    tokenCount: u32,
    pTokens: *const VkIndirectCommandsLayoutTokenNV,
    streamCount: u32,
    pStreamStrides: *const u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGeneratedCommandsInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    pipelineBindPoint: VkPipelineBindPoint,
    pipeline: VkPipeline,
    indirectCommandsLayout: VkIndirectCommandsLayoutNV,
    streamCount: u32,
    pStreams: *const VkIndirectCommandsStreamNV,
    sequencesCount: u32,
    preprocessBuffer: VkBuffer,
    preprocessOffset: VkDeviceSize,
    preprocessSize: VkDeviceSize,
    sequencesCountBuffer: VkBuffer,
    sequencesCountOffset: VkDeviceSize,
    sequencesIndexBuffer: VkBuffer,
    sequencesIndexOffset: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFeatures2 {
    sType: VkStructureType,
    pNext: *mut c_void,
    features: VkPhysicalDeviceFeatures,
}
pub type VkPhysicalDeviceFeatures2KHR = VkPhysicalDeviceFeatures2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFormatProperties2 {
    sType: VkStructureType,
    pNext: *mut c_void,
    formatProperties: VkFormatProperties,
}
pub type VkFormatProperties2KHR = VkFormatProperties2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageFormatProperties2 {
    sType: VkStructureType,
    pNext: *mut c_void,
    imageFormatProperties: VkImageFormatProperties,
}
pub type VkImageFormatProperties2KHR = VkImageFormatProperties2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImageFormatInfo2 {
    sType: VkStructureType,
    pNext: *const c_void,
    format: VkFormat,
    type_: VkImageType,
    tiling: VkImageTiling,
    usage: VkImageUsageFlags,
    flags: VkImageCreateFlags,
}
pub type VkPhysicalDeviceImageFormatInfo2KHR = VkPhysicalDeviceImageFormatInfo2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueueFamilyProperties2 {
    sType: VkStructureType,
    pNext: *mut c_void,
    queueFamilyProperties: VkQueueFamilyProperties,
}
pub type VkQueueFamilyProperties2KHR = VkQueueFamilyProperties2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageFormatProperties2 {
    sType: VkStructureType,
    pNext: *mut c_void,
    properties: VkSparseImageFormatProperties,
}
pub type VkSparseImageFormatProperties2KHR = VkSparseImageFormatProperties2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSparseImageFormatInfo2 {
    sType: VkStructureType,
    pNext: *const c_void,
    format: VkFormat,
    type_: VkImageType,
    samples: VkSampleCountFlagBits,
    usage: VkImageUsageFlags,
    tiling: VkImageTiling,
}
pub type VkPhysicalDeviceSparseImageFormatInfo2KHR = VkPhysicalDeviceSparseImageFormatInfo2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPresentRegionKHR {
    rectangleCount: u32,
    pRectangles: *const VkRectLayerKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVariablePointersFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    variablePointersStorageBuffer: VkBool32,
    variablePointers: VkBool32,
}
pub type VkPhysicalDeviceVariablePointersFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;
pub type VkPhysicalDeviceVariablePointerFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;
pub type VkPhysicalDeviceVariablePointerFeatures = VkPhysicalDeviceVariablePointersFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalMemoryProperties {
    externalMemoryFeatures: VkExternalMemoryFeatureFlags,
    exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlags,
    compatibleHandleTypes: VkExternalMemoryHandleTypeFlags,
}
pub type VkExternalMemoryPropertiesKHR = VkExternalMemoryProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalImageFormatProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    externalMemoryProperties: VkExternalMemoryProperties,
}
pub type VkExternalImageFormatPropertiesKHR = VkExternalImageFormatProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExternalBufferInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkBufferCreateFlags,
    usage: VkBufferUsageFlags,
    handleType: VkExternalMemoryHandleTypeFlagBits,
}
pub type VkPhysicalDeviceExternalBufferInfoKHR = VkPhysicalDeviceExternalBufferInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalBufferProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    externalMemoryProperties: VkExternalMemoryProperties,
}
pub type VkExternalBufferPropertiesKHR = VkExternalBufferProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceIDProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    deviceUUID: u8,
    driverUUID: u8,
    deviceLUID: u8,
    deviceNodeMask: u32,
    deviceLUIDValid: VkBool32,
}
pub type VkPhysicalDeviceIDPropertiesKHR = VkPhysicalDeviceIDProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalMemoryImageCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    handleTypes: VkExternalMemoryHandleTypeFlags,
}
pub type VkExternalMemoryImageCreateInfoKHR = VkExternalMemoryImageCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalMemoryBufferCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    handleTypes: VkExternalMemoryHandleTypeFlags,
}
pub type VkExternalMemoryBufferCreateInfoKHR = VkExternalMemoryBufferCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportMemoryAllocateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    handleTypes: VkExternalMemoryHandleTypeFlags,
}
pub type VkExportMemoryAllocateInfoKHR = VkExportMemoryAllocateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalSemaphoreProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlags,
    compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlags,
    externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlags,
}
pub type VkExternalSemaphorePropertiesKHR = VkExternalSemaphoreProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportSemaphoreCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    handleTypes: VkExternalSemaphoreHandleTypeFlags,
}
pub type VkExportSemaphoreCreateInfoKHR = VkExportSemaphoreCreateInfo;
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImportSemaphoreWin32HandleInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    semaphore: VkSemaphore,
    flags: VkSemaphoreImportFlags,
    handleType: VkExternalSemaphoreHandleTypeFlagBits,
    handle: HANDLE,
    name: LPCWSTR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImportSemaphoreFdInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    semaphore: VkSemaphore,
    flags: VkSemaphoreImportFlags,
    handleType: VkExternalSemaphoreHandleTypeFlagBits,
    fd: c_int,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalFenceProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlags,
    compatibleHandleTypes: VkExternalFenceHandleTypeFlags,
    externalFenceFeatures: VkExternalFenceFeatureFlags,
}
pub type VkExternalFencePropertiesKHR = VkExternalFenceProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportFenceCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    handleTypes: VkExternalFenceHandleTypeFlags,
}
pub type VkExportFenceCreateInfoKHR = VkExportFenceCreateInfo;
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImportFenceWin32HandleInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    fence: VkFence,
    flags: VkFenceImportFlags,
    handleType: VkExternalFenceHandleTypeFlagBits,
    handle: HANDLE,
    name: LPCWSTR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImportFenceFdInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    fence: VkFence,
    flags: VkFenceImportFlags,
    handleType: VkExternalFenceHandleTypeFlagBits,
    fd: c_int,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMultiviewFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    multiview: VkBool32,
    multiviewGeometryShader: VkBool32,
    multiviewTessellationShader: VkBool32,
}
pub type VkPhysicalDeviceMultiviewFeaturesKHR = VkPhysicalDeviceMultiviewFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceCapabilities2EXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    minImageCount: u32,
    maxImageCount: u32,
    currentExtent: VkExtent2D,
    minImageExtent: VkExtent2D,
    maxImageExtent: VkExtent2D,
    maxImageArrayLayers: u32,
    supportedTransforms: VkSurfaceTransformFlagsKHR,
    currentTransform: VkSurfaceTransformFlagBitsKHR,
    supportedCompositeAlpha: VkCompositeAlphaFlagsKHR,
    supportedUsageFlags: VkImageUsageFlags,
    supportedSurfaceCounters: VkSurfaceCounterFlagsEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSwapchainCounterCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    surfaceCounters: VkSurfaceCounterFlagsEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceGroupProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    physicalDeviceCount: u32,
    physicalDevices: VkPhysicalDevice,
    subsetAllocation: VkBool32,
}
pub type VkPhysicalDeviceGroupPropertiesKHR = VkPhysicalDeviceGroupProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryAllocateFlagsInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkMemoryAllocateFlags,
    deviceMask: u32,
}
pub type VkMemoryAllocateFlagsInfoKHR = VkMemoryAllocateFlagsInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindBufferMemoryInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    buffer: VkBuffer,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
}
pub type VkBindBufferMemoryInfoKHR = VkBindBufferMemoryInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindImageMemoryInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    image: VkImage,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
}
pub type VkBindImageMemoryInfoKHR = VkBindImageMemoryInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupPresentCapabilitiesKHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    presentMask: u32,
    modes: VkDeviceGroupPresentModeFlagsKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupSwapchainCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    modes: VkDeviceGroupPresentModeFlagsKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorUpdateTemplateCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkDescriptorUpdateTemplateCreateFlags,
    descriptorUpdateEntryCount: u32,
    pDescriptorUpdateEntries: *const VkDescriptorUpdateTemplateEntry,
    templateType: VkDescriptorUpdateTemplateType,
    descriptorSetLayout: VkDescriptorSetLayout,
    pipelineBindPoint: VkPipelineBindPoint,
    pipelineLayout: VkPipelineLayout,
    set: u32,
}
pub type VkDescriptorUpdateTemplateCreateInfoKHR = VkDescriptorUpdateTemplateCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayNativeHdrSurfaceCapabilitiesAMD {
    sType: VkStructureType,
    pNext: *mut c_void,
    localDimmingSupport: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSwapchainDisplayNativeHdrCreateInfoAMD {
    sType: VkStructureType,
    pNext: *const c_void,
    localDimmingEnable: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPresentTimesInfoGOOGLE {
    sType: VkStructureType,
    pNext: *const c_void,
    swapchainCount: u32,
    pTimes: *const VkPresentTimeGOOGLE,
}
#[cfg(any(feature = "VK_USE_PLATFORM_IOS_MVK"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIOSSurfaceCreateInfoMVK {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkIOSSurfaceCreateFlagsMVK,
    pView: *const c_void,
}
#[cfg(any(feature = "VK_USE_PLATFORM_MACOS_MVK"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMacOSSurfaceCreateInfoMVK {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkMacOSSurfaceCreateFlagsMVK,
    pView: *const c_void,
}
#[cfg(any(feature = "VK_USE_PLATFORM_METAL_EXT"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMetalSurfaceCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkMetalSurfaceCreateFlagsEXT,
    pLayer: *const CAMetalLayer,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportWScalingStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    viewportWScalingEnable: VkBool32,
    viewportCount: u32,
    pViewportWScalings: *const VkViewportWScalingNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportSwizzleStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineViewportSwizzleStateCreateFlagsNV,
    viewportCount: u32,
    pViewportSwizzles: *const VkViewportSwizzleNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineDiscardRectangleStateCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineDiscardRectangleStateCreateFlagsEXT,
    discardRectangleMode: VkDiscardRectangleModeEXT,
    discardRectangleCount: u32,
    pDiscardRectangles: *const VkRect2D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    sType: VkStructureType,
    pNext: *mut c_void,
    perViewPositionAllComponents: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkInputAttachmentAspectReference {
    subpass: u32,
    inputAttachmentIndex: u32,
    aspectMask: VkImageAspectFlags,
}
pub type VkInputAttachmentAspectReferenceKHR = VkInputAttachmentAspectReference;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassInputAttachmentAspectCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    aspectReferenceCount: u32,
    pAspectReferences: *const VkInputAttachmentAspectReference,
}
pub type VkRenderPassInputAttachmentAspectCreateInfoKHR = VkRenderPassInputAttachmentAspectCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceCapabilities2KHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    surfaceCapabilities: VkSurfaceCapabilitiesKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayProperties2KHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    displayProperties: VkDisplayPropertiesKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPlaneCapabilities2KHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    capabilities: VkDisplayPlaneCapabilitiesKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSharedPresentSurfaceCapabilitiesKHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    sharedPresentSupportedUsageFlags: VkImageUsageFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevice16BitStorageFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    storageBuffer16BitAccess: VkBool32,
    uniformAndStorageBuffer16BitAccess: VkBool32,
    storagePushConstant16: VkBool32,
    storageInputOutput16: VkBool32,
}
pub type VkPhysicalDevice16BitStorageFeaturesKHR = VkPhysicalDevice16BitStorageFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSubgroupProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    subgroupSize: u32,
    supportedStages: VkShaderStageFlags,
    supportedOperations: VkSubgroupFeatureFlags,
    quadOperationsInAllStages: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderSubgroupExtendedTypes: VkBool32,
}
pub type VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR = VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryRequirements2 {
    sType: VkStructureType,
    pNext: *mut c_void,
    memoryRequirements: VkMemoryRequirements,
}
pub type VkMemoryRequirements2KHR = VkMemoryRequirements2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageMemoryRequirements2 {
    sType: VkStructureType,
    pNext: *mut c_void,
    memoryRequirements: VkSparseImageMemoryRequirements,
}
pub type VkSparseImageMemoryRequirements2KHR = VkSparseImageMemoryRequirements2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryDedicatedRequirements {
    sType: VkStructureType,
    pNext: *mut c_void,
    prefersDedicatedAllocation: VkBool32,
    requiresDedicatedAllocation: VkBool32,
}
pub type VkMemoryDedicatedRequirementsKHR = VkMemoryDedicatedRequirements;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageViewUsageCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    usage: VkImageUsageFlags,
}
pub type VkImageViewUsageCreateInfoKHR = VkImageViewUsageCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerYcbcrConversionCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    format: VkFormat,
    ycbcrModel: VkSamplerYcbcrModelConversion,
    ycbcrRange: VkSamplerYcbcrRange,
    components: VkComponentMapping,
    xChromaOffset: VkChromaLocation,
    yChromaOffset: VkChromaLocation,
    chromaFilter: VkFilter,
    forceExplicitReconstruction: VkBool32,
}
pub type VkSamplerYcbcrConversionCreateInfoKHR = VkSamplerYcbcrConversionCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    samplerYcbcrConversion: VkBool32,
}
pub type VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR = VkPhysicalDeviceSamplerYcbcrConversionFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkTextureLODGatherFormatPropertiesAMD {
    sType: VkStructureType,
    pNext: *mut c_void,
    supportsTextureGatherLODBiasAMD: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkConditionalRenderingBeginInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    buffer: VkBuffer,
    offset: VkDeviceSize,
    flags: VkConditionalRenderingFlagsEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkProtectedSubmitInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    protectedSubmit: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceProtectedMemoryFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    protectedMemory: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceProtectedMemoryProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    protectedNoFault: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceQueueInfo2 {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkDeviceQueueCreateFlags,
    queueFamilyIndex: u32,
    queueIndex: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCoverageToColorStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineCoverageToColorStateCreateFlagsNV,
    coverageToColorEnable: VkBool32,
    coverageToColorLocation: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSamplerFilterMinmaxProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    filterMinmaxSingleComponentFormats: VkBool32,
    filterMinmaxImageComponentMapping: VkBool32,
}
pub type VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT = VkPhysicalDeviceSamplerFilterMinmaxProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineSampleLocationsStateCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    sampleLocationsEnable: VkBool32,
    sampleLocationsInfo: VkSampleLocationsInfoEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSampleLocationsPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    sampleLocationSampleCounts: VkSampleCountFlags,
    maxSampleLocationGridSize: VkExtent2D,
    sampleLocationCoordinateRange: [c_float;2],
    sampleLocationSubPixelBits: u32,
    variableSampleLocations: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    advancedBlendCoherentOperations: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    advancedBlendMaxColorAttachments: u32,
    advancedBlendIndependentBlend: VkBool32,
    advancedBlendNonPremultipliedSrcColor: VkBool32,
    advancedBlendNonPremultipliedDstColor: VkBool32,
    advancedBlendCorrelatedOverlap: VkBool32,
    advancedBlendAllOperations: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineColorBlendAdvancedStateCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    srcPremultiplied: VkBool32,
    dstPremultiplied: VkBool32,
    blendOverlap: VkBlendOverlapEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceInlineUniformBlockFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    inlineUniformBlock: VkBool32,
    descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32,
}
pub type VkPhysicalDeviceInlineUniformBlockFeaturesEXT = VkPhysicalDeviceInlineUniformBlockFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCoverageModulationStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineCoverageModulationStateCreateFlagsNV,
    coverageModulationMode: VkCoverageModulationModeNV,
    coverageModulationTableEnable: VkBool32,
    coverageModulationTableCount: u32,
    pCoverageModulationTable: *const c_float,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkValidationCacheCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkValidationCacheCreateFlagsEXT,
    initialDataSize: usize,
    pInitialData: *const c_void,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMaintenance3Properties {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxPerSetDescriptors: u32,
    maxMemoryAllocationSize: VkDeviceSize,
}
pub type VkPhysicalDeviceMaintenance3PropertiesKHR = VkPhysicalDeviceMaintenance3Properties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetLayoutSupport {
    sType: VkStructureType,
    pNext: *mut c_void,
    supported: VkBool32,
}
pub type VkDescriptorSetLayoutSupportKHR = VkDescriptorSetLayoutSupport;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderDrawParametersFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderDrawParameters: VkBool32,
}
pub type VkPhysicalDeviceShaderDrawParameterFeatures = VkPhysicalDeviceShaderDrawParametersFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderFloat16Int8Features {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderFloat16: VkBool32,
    shaderInt8: VkBool32,
}
pub type VkPhysicalDeviceShaderFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;
pub type VkPhysicalDeviceFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFloatControlsProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    denormBehaviorIndependence: VkShaderFloatControlsIndependence,
    roundingModeIndependence: VkShaderFloatControlsIndependence,
    shaderSignedZeroInfNanPreserveFloat16: VkBool32,
    shaderSignedZeroInfNanPreserveFloat32: VkBool32,
    shaderSignedZeroInfNanPreserveFloat64: VkBool32,
    shaderDenormPreserveFloat16: VkBool32,
    shaderDenormPreserveFloat32: VkBool32,
    shaderDenormPreserveFloat64: VkBool32,
    shaderDenormFlushToZeroFloat16: VkBool32,
    shaderDenormFlushToZeroFloat32: VkBool32,
    shaderDenormFlushToZeroFloat64: VkBool32,
    shaderRoundingModeRTEFloat16: VkBool32,
    shaderRoundingModeRTEFloat32: VkBool32,
    shaderRoundingModeRTEFloat64: VkBool32,
    shaderRoundingModeRTZFloat16: VkBool32,
    shaderRoundingModeRTZFloat32: VkBool32,
    shaderRoundingModeRTZFloat64: VkBool32,
}
pub type VkPhysicalDeviceFloatControlsPropertiesKHR = VkPhysicalDeviceFloatControlsProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceHostQueryResetFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    hostQueryReset: VkBool32,
}
pub type VkPhysicalDeviceHostQueryResetFeaturesEXT = VkPhysicalDeviceHostQueryResetFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkShaderStatisticsInfoAMD {
    shaderStageMask: VkShaderStageFlags,
    resourceUsage: VkShaderResourceUsageAMD,
    numPhysicalVgprs: u32,
    numPhysicalSgprs: u32,
    numAvailableVgprs: u32,
    numAvailableSgprs: u32,
    computeWorkGroupSize: [u32;3],
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugUtilsMessengerCallbackDataEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkDebugUtilsMessengerCallbackDataFlagsEXT,
    pMessageIdName: *const c_char,
    messageIdNumber: i32,
    pMessage: *const c_char,
    queueLabelCount: u32,
    pQueueLabels: *const VkDebugUtilsLabelEXT,
    cmdBufLabelCount: u32,
    pCmdBufLabels: *const VkDebugUtilsLabelEXT,
    objectCount: u32,
    pObjects: *const VkDebugUtilsObjectNameInfoEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    minImportedHostPointerAlignment: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    primitiveOverestimationSize: c_float,
    maxExtraPrimitiveOverestimationSize: c_float,
    extraPrimitiveOverestimationSizeGranularity: c_float,
    primitiveUnderestimation: VkBool32,
    conservativePointAndLineRasterization: VkBool32,
    degenerateTrianglesRasterized: VkBool32,
    degenerateLinesRasterized: VkBool32,
    fullyCoveredFragmentShaderInputVariable: VkBool32,
    conservativeRasterizationPostDepthCoverage: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderCoreProperties2AMD {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderCoreFeatures: VkShaderCorePropertiesFlagsAMD,
    activeComputeUnitCount: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRasterizationConservativeStateCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineRasterizationConservativeStateCreateFlagsEXT,
    conservativeRasterizationMode: VkConservativeRasterizationModeEXT,
    extraPrimitiveOverestimationSize: c_float,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDescriptorIndexingFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderInputAttachmentArrayDynamicIndexing: VkBool32,
    shaderUniformTexelBufferArrayDynamicIndexing: VkBool32,
    shaderStorageTexelBufferArrayDynamicIndexing: VkBool32,
    shaderUniformBufferArrayNonUniformIndexing: VkBool32,
    shaderSampledImageArrayNonUniformIndexing: VkBool32,
    shaderStorageBufferArrayNonUniformIndexing: VkBool32,
    shaderStorageImageArrayNonUniformIndexing: VkBool32,
    shaderInputAttachmentArrayNonUniformIndexing: VkBool32,
    shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32,
    shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32,
    descriptorBindingUniformBufferUpdateAfterBind: VkBool32,
    descriptorBindingSampledImageUpdateAfterBind: VkBool32,
    descriptorBindingStorageImageUpdateAfterBind: VkBool32,
    descriptorBindingStorageBufferUpdateAfterBind: VkBool32,
    descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32,
    descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32,
    descriptorBindingUpdateUnusedWhilePending: VkBool32,
    descriptorBindingPartiallyBound: VkBool32,
    descriptorBindingVariableDescriptorCount: VkBool32,
    runtimeDescriptorArray: VkBool32,
}
pub type VkPhysicalDeviceDescriptorIndexingFeaturesEXT = VkPhysicalDeviceDescriptorIndexingFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDescriptorIndexingProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxUpdateAfterBindDescriptorsInAllPools: u32,
    shaderUniformBufferArrayNonUniformIndexingNative: VkBool32,
    shaderSampledImageArrayNonUniformIndexingNative: VkBool32,
    shaderStorageBufferArrayNonUniformIndexingNative: VkBool32,
    shaderStorageImageArrayNonUniformIndexingNative: VkBool32,
    shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32,
    robustBufferAccessUpdateAfterBind: VkBool32,
    quadDivergentImplicitLod: VkBool32,
    maxPerStageDescriptorUpdateAfterBindSamplers: u32,
    maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32,
    maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32,
    maxPerStageDescriptorUpdateAfterBindSampledImages: u32,
    maxPerStageDescriptorUpdateAfterBindStorageImages: u32,
    maxPerStageDescriptorUpdateAfterBindInputAttachments: u32,
    maxPerStageUpdateAfterBindResources: u32,
    maxDescriptorSetUpdateAfterBindSamplers: u32,
    maxDescriptorSetUpdateAfterBindUniformBuffers: u32,
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32,
    maxDescriptorSetUpdateAfterBindStorageBuffers: u32,
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32,
    maxDescriptorSetUpdateAfterBindSampledImages: u32,
    maxDescriptorSetUpdateAfterBindStorageImages: u32,
    maxDescriptorSetUpdateAfterBindInputAttachments: u32,
}
pub type VkPhysicalDeviceDescriptorIndexingPropertiesEXT = VkPhysicalDeviceDescriptorIndexingProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetLayoutBindingFlagsCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    bindingCount: u32,
    pBindingFlags: *const VkDescriptorBindingFlags,
}
pub type VkDescriptorSetLayoutBindingFlagsCreateInfoEXT = VkDescriptorSetLayoutBindingFlagsCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentDescription2 {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkAttachmentDescriptionFlags,
    format: VkFormat,
    samples: VkSampleCountFlagBits,
    loadOp: VkAttachmentLoadOp,
    storeOp: VkAttachmentStoreOp,
    stencilLoadOp: VkAttachmentLoadOp,
    stencilStoreOp: VkAttachmentStoreOp,
    initialLayout: VkImageLayout,
    finalLayout: VkImageLayout,
}
pub type VkAttachmentDescription2KHR = VkAttachmentDescription2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentReference2 {
    sType: VkStructureType,
    pNext: *const c_void,
    attachment: u32,
    layout: VkImageLayout,
    aspectMask: VkImageAspectFlags,
}
pub type VkAttachmentReference2KHR = VkAttachmentReference2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassDescription2 {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkSubpassDescriptionFlags,
    pipelineBindPoint: VkPipelineBindPoint,
    viewMask: u32,
    inputAttachmentCount: u32,
    pInputAttachments: *const VkAttachmentReference2,
    colorAttachmentCount: u32,
    pColorAttachments: *const VkAttachmentReference2,
    pResolveAttachments: *const VkAttachmentReference2,
    pDepthStencilAttachment: *const VkAttachmentReference2,
    preserveAttachmentCount: u32,
    pPreserveAttachments: *const u32,
}
pub type VkSubpassDescription2KHR = VkSubpassDescription2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassDependency2 {
    sType: VkStructureType,
    pNext: *const c_void,
    srcSubpass: u32,
    dstSubpass: u32,
    srcStageMask: VkPipelineStageFlags,
    dstStageMask: VkPipelineStageFlags,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
    dependencyFlags: VkDependencyFlags,
    viewOffset: i32,
}
pub type VkSubpassDependency2KHR = VkSubpassDependency2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassCreateInfo2 {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkRenderPassCreateFlags,
    attachmentCount: u32,
    pAttachments: *const VkAttachmentDescription2,
    subpassCount: u32,
    pSubpasses: *const VkSubpassDescription2,
    dependencyCount: u32,
    pDependencies: *const VkSubpassDependency2,
    correlatedViewMaskCount: u32,
    pCorrelatedViewMasks: *const u32,
}
pub type VkRenderPassCreateInfo2KHR = VkRenderPassCreateInfo2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTimelineSemaphoreFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    timelineSemaphore: VkBool32,
}
pub type VkPhysicalDeviceTimelineSemaphoreFeaturesKHR = VkPhysicalDeviceTimelineSemaphoreFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSemaphoreWaitInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkSemaphoreWaitFlags,
    semaphoreCount: u32,
    pSemaphores: *const VkSemaphore,
    pValues: *const u64,
}
pub type VkSemaphoreWaitInfoKHR = VkSemaphoreWaitInfo;
#[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAndroidHardwareBufferPropertiesANDROID {
    sType: VkStructureType,
    pNext: *mut c_void,
    allocationSize: VkDeviceSize,
    memoryTypeBits: u32,
}
#[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAndroidHardwareBufferFormatPropertiesANDROID {
    sType: VkStructureType,
    pNext: *mut c_void,
    format: VkFormat,
    externalFormat: u64,
    formatFeatures: VkFormatFeatureFlags,
    samplerYcbcrConversionComponents: VkComponentMapping,
    suggestedYcbcrModel: VkSamplerYcbcrModelConversion,
    suggestedYcbcrRange: VkSamplerYcbcrRange,
    suggestedXChromaOffset: VkChromaLocation,
    suggestedYChromaOffset: VkChromaLocation,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBufferInheritanceConditionalRenderingInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    conditionalRenderingEnable: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevice8BitStorageFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    storageBuffer8BitAccess: VkBool32,
    uniformAndStorageBuffer8BitAccess: VkBool32,
    storagePushConstant8: VkBool32,
}
pub type VkPhysicalDevice8BitStorageFeaturesKHR = VkPhysicalDevice8BitStorageFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceConditionalRenderingFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    conditionalRendering: VkBool32,
    inheritedConditionalRendering: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVulkanMemoryModelFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    vulkanMemoryModel: VkBool32,
    vulkanMemoryModelDeviceScope: VkBool32,
    vulkanMemoryModelAvailabilityVisibilityChains: VkBool32,
}
pub type VkPhysicalDeviceVulkanMemoryModelFeaturesKHR = VkPhysicalDeviceVulkanMemoryModelFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderAtomicInt64Features {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderBufferInt64Atomics: VkBool32,
    shaderSharedInt64Atomics: VkBool32,
}
pub type VkPhysicalDeviceShaderAtomicInt64FeaturesKHR = VkPhysicalDeviceShaderAtomicInt64Features;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderBufferFloat32Atomics: VkBool32,
    shaderBufferFloat32AtomicAdd: VkBool32,
    shaderBufferFloat64Atomics: VkBool32,
    shaderBufferFloat64AtomicAdd: VkBool32,
    shaderSharedFloat32Atomics: VkBool32,
    shaderSharedFloat32AtomicAdd: VkBool32,
    shaderSharedFloat64Atomics: VkBool32,
    shaderSharedFloat64AtomicAdd: VkBool32,
    shaderImageFloat32Atomics: VkBool32,
    shaderImageFloat32AtomicAdd: VkBool32,
    sparseImageFloat32Atomics: VkBool32,
    sparseImageFloat32AtomicAdd: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    vertexAttributeInstanceRateDivisor: VkBool32,
    vertexAttributeInstanceRateZeroDivisor: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueueFamilyCheckpointPropertiesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    checkpointExecutionStageMask: VkPipelineStageFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDepthStencilResolveProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    supportedDepthResolveModes: VkResolveModeFlags,
    supportedStencilResolveModes: VkResolveModeFlags,
    independentResolveNone: VkBool32,
    independentResolve: VkBool32,
}
pub type VkPhysicalDeviceDepthStencilResolvePropertiesKHR = VkPhysicalDeviceDepthStencilResolveProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassDescriptionDepthStencilResolve {
    sType: VkStructureType,
    pNext: *const c_void,
    depthResolveMode: VkResolveModeFlagBits,
    stencilResolveMode: VkResolveModeFlagBits,
    pDepthStencilResolveAttachment: *const VkAttachmentReference2,
}
pub type VkSubpassDescriptionDepthStencilResolveKHR = VkSubpassDescriptionDepthStencilResolve;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceASTCDecodeFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    decodeModeSharedExponent: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTransformFeedbackFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    transformFeedback: VkBool32,
    geometryStreams: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTransformFeedbackPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxTransformFeedbackStreams: u32,
    maxTransformFeedbackBuffers: u32,
    maxTransformFeedbackBufferSize: VkDeviceSize,
    maxTransformFeedbackStreamDataSize: u32,
    maxTransformFeedbackBufferDataSize: u32,
    maxTransformFeedbackBufferDataStride: u32,
    transformFeedbackQueries: VkBool32,
    transformFeedbackStreamsLinesTriangles: VkBool32,
    transformFeedbackRasterizationStreamSelect: VkBool32,
    transformFeedbackDraw: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRasterizationStateStreamCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineRasterizationStateStreamCreateFlagsEXT,
    rasterizationStream: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    representativeFragmentTest: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    representativeFragmentTestEnable: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExclusiveScissorFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    exclusiveScissor: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCornerSampledImageFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    cornerSampledImage: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    computeDerivativeGroupQuads: VkBool32,
    computeDerivativeGroupLinear: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    fragmentShaderBarycentric: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderImageFootprintFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    imageFootprint: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    dedicatedAllocationImageAliasing: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportShadingRateImageStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    shadingRateImageEnable: VkBool32,
    viewportCount: u32,
    pShadingRatePalettes: *const VkShadingRatePaletteNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShadingRateImageFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    shadingRateImage: VkBool32,
    shadingRateCoarseSampleOrder: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMeshShaderFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    taskShader: VkBool32,
    meshShader: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRayTracingPipelineCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineCreateFlags,
    stageCount: u32,
    pStages: *const VkPipelineShaderStageCreateInfo,
    groupCount: u32,
    pGroups: *const VkRayTracingShaderGroupCreateInfoNV,
    maxRecursionDepth: u32,
    layout: VkPipelineLayout,
    basePipelineHandle: VkPipeline,
    basePipelineIndex: i32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGeometryTrianglesNV {
    sType: VkStructureType,
    pNext: *const c_void,
    vertexData: VkBuffer,
    vertexOffset: VkDeviceSize,
    vertexCount: u32,
    vertexStride: VkDeviceSize,
    vertexFormat: VkFormat,
    indexData: VkBuffer,
    indexOffset: VkDeviceSize,
    indexCount: u32,
    indexType: VkIndexType,
    transformData: VkBuffer,
    transformOffset: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGeometryAABBNV {
    sType: VkStructureType,
    pNext: *const c_void,
    aabbData: VkBuffer,
    numAABBs: u32,
    stride: u32,
    offset: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGeometryDataNV {
    triangles: VkGeometryTrianglesNV,
    aabbs: VkGeometryAABBNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGeometryNV {
    sType: VkStructureType,
    pNext: *const c_void,
    geometryType: VkGeometryTypeKHR,
    geometry: VkGeometryDataNV,
    flags: VkGeometryFlagsKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    type_: VkAccelerationStructureTypeNV,
    flags: VkBuildAccelerationStructureFlagsNV,
    instanceCount: u32,
    geometryCount: u32,
    pGeometries: *const VkGeometryNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    compactedSize: VkDeviceSize,
    info: VkAccelerationStructureInfoNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindAccelerationStructureMemoryInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    accelerationStructure: VkAccelerationStructureNV,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
    deviceIndexCount: u32,
    pDeviceIndices: *const u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDrmFormatModifierPropertiesEXT {
    drmFormatModifier: u64,
    drmFormatModifierPlaneCount: u32,
    drmFormatModifierTilingFeatures: VkFormatFeatureFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageDrmFormatModifierExplicitCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    drmFormatModifier: u64,
    drmFormatModifierPlaneCount: u32,
    pPlaneLayouts: *const VkSubresourceLayout,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageStencilUsageCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    stencilUsage: VkImageUsageFlags,
}
pub type VkImageStencilUsageCreateInfoEXT = VkImageStencilUsageCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    fragmentDensityMap: VkBool32,
    fragmentDensityMapDynamic: VkBool32,
    fragmentDensityMapNonSubsampledImages: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    fragmentDensityMapDeferred: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    minFragmentDensityTexelSize: VkExtent2D,
    maxFragmentDensityTexelSize: VkExtent2D,
    fragmentDensityInvocations: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    subsampledLoads: VkBool32,
    subsampledCoarseReconstructionEarlyAccess: VkBool32,
    maxSubsampledArrayLayers: u32,
    maxDescriptorSetSubsampledSamplers: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceScalarBlockLayoutFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    scalarBlockLayout: VkBool32,
}
pub type VkPhysicalDeviceScalarBlockLayoutFeaturesEXT = VkPhysicalDeviceScalarBlockLayoutFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceProtectedCapabilitiesKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    supportsProtected: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    uniformBufferStandardLayout: VkBool32,
}
pub type VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR = VkPhysicalDeviceUniformBufferStandardLayoutFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDepthClipEnableFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    depthClipEnable: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRasterizationDepthClipStateCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineRasterizationDepthClipStateCreateFlagsEXT,
    depthClipEnable: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMemoryBudgetPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    heapBudget: VkDeviceSize,
    heapUsage: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMemoryPriorityFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    memoryPriority: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceBufferDeviceAddressFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    bufferDeviceAddress: VkBool32,
    bufferDeviceAddressCaptureReplay: VkBool32,
    bufferDeviceAddressMultiDevice: VkBool32,
}
pub type VkPhysicalDeviceBufferDeviceAddressFeaturesKHR = VkPhysicalDeviceBufferDeviceAddressFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    bufferDeviceAddress: VkBool32,
    bufferDeviceAddressCaptureReplay: VkBool32,
    bufferDeviceAddressMultiDevice: VkBool32,
}
pub type VkPhysicalDeviceBufferAddressFeaturesEXT = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferDeviceAddressCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    deviceAddress: VkDeviceAddress,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFilterCubicImageViewImageFormatPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    filterCubic: VkBool32,
    filterCubicMinmax: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImagelessFramebufferFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    imagelessFramebuffer: VkBool32,
}
pub type VkPhysicalDeviceImagelessFramebufferFeaturesKHR = VkPhysicalDeviceImagelessFramebufferFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFramebufferAttachmentImageInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkImageCreateFlags,
    usage: VkImageUsageFlags,
    width: u32,
    height: u32,
    layerCount: u32,
    viewFormatCount: u32,
    pViewFormats: *const VkFormat,
}
pub type VkFramebufferAttachmentImageInfoKHR = VkFramebufferAttachmentImageInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTextureCompressionASTCHDRFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    textureCompressionASTC_HDR: VkBool32,
}
pub type VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT = VkPhysicalDeviceTextureCompressionASTCHDRFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCooperativeMatrixFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    cooperativeMatrix: VkBool32,
    cooperativeMatrixRobustBufferAccess: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCooperativeMatrixPropertiesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    cooperativeMatrixSupportedStages: VkShaderStageFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    ycbcrImageArrays: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageViewAddressPropertiesNVX {
    sType: VkStructureType,
    pNext: *mut c_void,
    deviceAddress: VkDeviceAddress,
    size: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCreationFeedback {
    flags: VkPipelineCreationFeedbackFlags,
    duration: u64,
}
pub type VkPipelineCreationFeedbackEXT = VkPipelineCreationFeedback;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCreationFeedbackCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    pPipelineCreationFeedback: *mut VkPipelineCreationFeedback,
    pipelineStageCreationFeedbackCount: u32,
    pPipelineStageCreationFeedbacks: *mut VkPipelineCreationFeedback,
}
pub type VkPipelineCreationFeedbackCreateInfoEXT = VkPipelineCreationFeedbackCreateInfo;
#[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceCapabilitiesFullScreenExclusiveEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    fullScreenExclusiveSupported: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePerformanceQueryFeaturesKHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    performanceCounterQueryPools: VkBool32,
    performanceCounterMultipleQueryPools: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePerformanceQueryPropertiesKHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    allowCommandBufferQueryCopies: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceCounterDescriptionKHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    flags: VkPerformanceCounterDescriptionFlagsKHR,
    name: c_char,
    category: c_char,
    description: c_char,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAcquireProfilingLockInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkAcquireProfilingLockFlagsKHR,
    timeout: u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkHeadlessSurfaceCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkHeadlessSurfaceCreateFlagsEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCoverageReductionModeFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    coverageReductionMode: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCoverageReductionStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineCoverageReductionStateCreateFlagsNV,
    coverageReductionMode: VkCoverageReductionModeNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFramebufferMixedSamplesCombinationNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    coverageReductionMode: VkCoverageReductionModeNV,
    rasterizationSamples: VkSampleCountFlagBits,
    depthStencilSamples: VkSampleCountFlags,
    colorSamples: VkSampleCountFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderIntegerFunctions2: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkPerformanceValueDataINTEL {
    value32: u32,
    value64: u64,
    valueFloat: c_float,
    valueBool: VkBool32,
    valueString: *const c_char,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceValueINTEL {
    type_: VkPerformanceValueTypeINTEL,
    data: VkPerformanceValueDataINTEL,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceOverrideInfoINTEL {
    sType: VkStructureType,
    pNext: *const c_void,
    type_: VkPerformanceOverrideTypeINTEL,
    enable: VkBool32,
    parameter: u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderClockFeaturesKHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderSubgroupClock: VkBool32,
    shaderDeviceClock: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceIndexTypeUint8FeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    indexTypeUint8: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderSMBuiltins: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    fragmentShaderSampleInterlock: VkBool32,
    fragmentShaderPixelInterlock: VkBool32,
    fragmentShaderShadingRateInterlock: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    separateDepthStencilLayouts: VkBool32,
}
pub type VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR = VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    pipelineExecutableInfo: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineExecutablePropertiesKHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    stages: VkShaderStageFlags,
    name: c_char,
    description: c_char,
    subgroupSize: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkPipelineExecutableStatisticValueKHR {
    b32: VkBool32,
    i64: i32,
    u64: u64,
    f64: c_double,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineExecutableStatisticKHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    name: c_char,
    description: c_char,
    format: VkPipelineExecutableStatisticFormatKHR,
    value: VkPipelineExecutableStatisticValueKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineExecutableInternalRepresentationKHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    name: c_char,
    description: c_char,
    isText: VkBool32,
    dataSize: usize,
    pData: *mut c_void,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderDemoteToHelperInvocation: VkBool32,
}
pub type VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT = VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    texelBufferAlignment: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTexelBufferAlignmentProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    storageTexelBufferOffsetAlignmentBytes: VkDeviceSize,
    storageTexelBufferOffsetSingleTexelAlignment: VkBool32,
    uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize,
    uniformTexelBufferOffsetSingleTexelAlignment: VkBool32,
}
pub type VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT = VkPhysicalDeviceTexelBufferAlignmentProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSubgroupSizeControlFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    subgroupSizeControl: VkBool32,
    computeFullSubgroups: VkBool32,
}
pub type VkPhysicalDeviceSubgroupSizeControlFeaturesEXT = VkPhysicalDeviceSubgroupSizeControlFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSubgroupSizeControlProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    minSubgroupSize: u32,
    maxSubgroupSize: u32,
    maxComputeWorkgroupSubgroups: u32,
    requiredSubgroupSizeStages: VkShaderStageFlags,
}
pub type VkPhysicalDeviceSubgroupSizeControlPropertiesEXT = VkPhysicalDeviceSubgroupSizeControlProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceLineRasterizationFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    rectangularLines: VkBool32,
    bresenhamLines: VkBool32,
    smoothLines: VkBool32,
    stippledRectangularLines: VkBool32,
    stippledBresenhamLines: VkBool32,
    stippledSmoothLines: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRasterizationLineStateCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    lineRasterizationMode: VkLineRasterizationModeEXT,
    stippledLineEnable: VkBool32,
    lineStippleFactor: u32,
    lineStipplePattern: u16,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePipelineCreationCacheControlFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    pipelineCreationCacheControl: VkBool32,
}
pub type VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT = VkPhysicalDevicePipelineCreationCacheControlFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVulkan11Features {
    sType: VkStructureType,
    pNext: *mut c_void,
    storageBuffer16BitAccess: VkBool32,
    uniformAndStorageBuffer16BitAccess: VkBool32,
    storagePushConstant16: VkBool32,
    storageInputOutput16: VkBool32,
    multiview: VkBool32,
    multiviewGeometryShader: VkBool32,
    multiviewTessellationShader: VkBool32,
    variablePointersStorageBuffer: VkBool32,
    variablePointers: VkBool32,
    protectedMemory: VkBool32,
    samplerYcbcrConversion: VkBool32,
    shaderDrawParameters: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVulkan11Properties {
    sType: VkStructureType,
    pNext: *mut c_void,
    deviceUUID: u8,
    driverUUID: u8,
    deviceLUID: u8,
    deviceNodeMask: u32,
    deviceLUIDValid: VkBool32,
    subgroupSize: u32,
    subgroupSupportedStages: VkShaderStageFlags,
    subgroupSupportedOperations: VkSubgroupFeatureFlags,
    subgroupQuadOperationsInAllStages: VkBool32,
    pointClippingBehavior: VkPointClippingBehavior,
    maxMultiviewViewCount: u32,
    maxMultiviewInstanceIndex: u32,
    protectedNoFault: VkBool32,
    maxPerSetDescriptors: u32,
    maxMemoryAllocationSize: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVulkan12Features {
    sType: VkStructureType,
    pNext: *mut c_void,
    samplerMirrorClampToEdge: VkBool32,
    drawIndirectCount: VkBool32,
    storageBuffer8BitAccess: VkBool32,
    uniformAndStorageBuffer8BitAccess: VkBool32,
    storagePushConstant8: VkBool32,
    shaderBufferInt64Atomics: VkBool32,
    shaderSharedInt64Atomics: VkBool32,
    shaderFloat16: VkBool32,
    shaderInt8: VkBool32,
    descriptorIndexing: VkBool32,
    shaderInputAttachmentArrayDynamicIndexing: VkBool32,
    shaderUniformTexelBufferArrayDynamicIndexing: VkBool32,
    shaderStorageTexelBufferArrayDynamicIndexing: VkBool32,
    shaderUniformBufferArrayNonUniformIndexing: VkBool32,
    shaderSampledImageArrayNonUniformIndexing: VkBool32,
    shaderStorageBufferArrayNonUniformIndexing: VkBool32,
    shaderStorageImageArrayNonUniformIndexing: VkBool32,
    shaderInputAttachmentArrayNonUniformIndexing: VkBool32,
    shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32,
    shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32,
    descriptorBindingUniformBufferUpdateAfterBind: VkBool32,
    descriptorBindingSampledImageUpdateAfterBind: VkBool32,
    descriptorBindingStorageImageUpdateAfterBind: VkBool32,
    descriptorBindingStorageBufferUpdateAfterBind: VkBool32,
    descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32,
    descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32,
    descriptorBindingUpdateUnusedWhilePending: VkBool32,
    descriptorBindingPartiallyBound: VkBool32,
    descriptorBindingVariableDescriptorCount: VkBool32,
    runtimeDescriptorArray: VkBool32,
    samplerFilterMinmax: VkBool32,
    scalarBlockLayout: VkBool32,
    imagelessFramebuffer: VkBool32,
    uniformBufferStandardLayout: VkBool32,
    shaderSubgroupExtendedTypes: VkBool32,
    separateDepthStencilLayouts: VkBool32,
    hostQueryReset: VkBool32,
    timelineSemaphore: VkBool32,
    bufferDeviceAddress: VkBool32,
    bufferDeviceAddressCaptureReplay: VkBool32,
    bufferDeviceAddressMultiDevice: VkBool32,
    vulkanMemoryModel: VkBool32,
    vulkanMemoryModelDeviceScope: VkBool32,
    vulkanMemoryModelAvailabilityVisibilityChains: VkBool32,
    shaderOutputViewportIndex: VkBool32,
    shaderOutputLayer: VkBool32,
    subgroupBroadcastDynamicId: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVulkan12Properties {
    sType: VkStructureType,
    pNext: *mut c_void,
    driverID: VkDriverId,
    driverName: c_char,
    driverInfo: c_char,
    conformanceVersion: VkConformanceVersion,
    denormBehaviorIndependence: VkShaderFloatControlsIndependence,
    roundingModeIndependence: VkShaderFloatControlsIndependence,
    shaderSignedZeroInfNanPreserveFloat16: VkBool32,
    shaderSignedZeroInfNanPreserveFloat32: VkBool32,
    shaderSignedZeroInfNanPreserveFloat64: VkBool32,
    shaderDenormPreserveFloat16: VkBool32,
    shaderDenormPreserveFloat32: VkBool32,
    shaderDenormPreserveFloat64: VkBool32,
    shaderDenormFlushToZeroFloat16: VkBool32,
    shaderDenormFlushToZeroFloat32: VkBool32,
    shaderDenormFlushToZeroFloat64: VkBool32,
    shaderRoundingModeRTEFloat16: VkBool32,
    shaderRoundingModeRTEFloat32: VkBool32,
    shaderRoundingModeRTEFloat64: VkBool32,
    shaderRoundingModeRTZFloat16: VkBool32,
    shaderRoundingModeRTZFloat32: VkBool32,
    shaderRoundingModeRTZFloat64: VkBool32,
    maxUpdateAfterBindDescriptorsInAllPools: u32,
    shaderUniformBufferArrayNonUniformIndexingNative: VkBool32,
    shaderSampledImageArrayNonUniformIndexingNative: VkBool32,
    shaderStorageBufferArrayNonUniformIndexingNative: VkBool32,
    shaderStorageImageArrayNonUniformIndexingNative: VkBool32,
    shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32,
    robustBufferAccessUpdateAfterBind: VkBool32,
    quadDivergentImplicitLod: VkBool32,
    maxPerStageDescriptorUpdateAfterBindSamplers: u32,
    maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32,
    maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32,
    maxPerStageDescriptorUpdateAfterBindSampledImages: u32,
    maxPerStageDescriptorUpdateAfterBindStorageImages: u32,
    maxPerStageDescriptorUpdateAfterBindInputAttachments: u32,
    maxPerStageUpdateAfterBindResources: u32,
    maxDescriptorSetUpdateAfterBindSamplers: u32,
    maxDescriptorSetUpdateAfterBindUniformBuffers: u32,
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32,
    maxDescriptorSetUpdateAfterBindStorageBuffers: u32,
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32,
    maxDescriptorSetUpdateAfterBindSampledImages: u32,
    maxDescriptorSetUpdateAfterBindStorageImages: u32,
    maxDescriptorSetUpdateAfterBindInputAttachments: u32,
    supportedDepthResolveModes: VkResolveModeFlags,
    supportedStencilResolveModes: VkResolveModeFlags,
    independentResolveNone: VkBool32,
    independentResolve: VkBool32,
    filterMinmaxSingleComponentFormats: VkBool32,
    filterMinmaxImageComponentMapping: VkBool32,
    maxTimelineSemaphoreValueDifference: u64,
    framebufferIntegerColorSampleCounts: VkSampleCountFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCompilerControlCreateInfoAMD {
    sType: VkStructureType,
    pNext: *const c_void,
    compilerControlFlags: VkPipelineCompilerControlFlagsAMD,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCoherentMemoryFeaturesAMD {
    sType: VkStructureType,
    pNext: *mut c_void,
    deviceCoherentMemory: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceToolProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    name: c_char,
    version: c_char,
    purposes: VkToolPurposeFlags,
    description: c_char,
    layer: c_char,
}
pub type VkPhysicalDeviceToolPropertiesEXT = VkPhysicalDeviceToolProperties;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCustomBorderColorFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    customBorderColors: VkBool32,
    customBorderColorWithoutFormat: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureInstanceKHR {
    transform: VkTransformMatrixKHR,
    instanceCustomIndex: u32,
    mask: u32,
    instanceShaderBindingTableRecordOffset: u32,
    flags: VkGeometryInstanceFlagsKHR,
    accelerationStructureReference: u64,
}
pub type VkAccelerationStructureInstanceNV = VkAccelerationStructureInstanceKHR;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    extendedDynamicState: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    diagnosticsConfig: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceDiagnosticsConfigCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkDeviceDiagnosticsConfigFlagsNV,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRobustness2FeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    robustBufferAccess2: VkBool32,
    robustImageAccess2: VkBool32,
    nullDescriptor: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRobustness2PropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    robustStorageBufferAccessSizeAlignment: VkDeviceSize,
    robustUniformBufferAccessSizeAlignment: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImageRobustnessFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    robustImageAccess: VkBool32,
}
pub type VkPhysicalDeviceImageRobustnessFeaturesEXT = VkPhysicalDeviceImageRobustnessFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevice4444FormatsFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    formatA4R4G4B4: VkBool32,
    formatA4B4G4R4: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDrmFormatModifierProperties2EXT {
    drmFormatModifier: u64,
    drmFormatModifierPlaneCount: u32,
    drmFormatModifierTilingFeatures: VkFormatFeatureFlags2,
}
#[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAndroidHardwareBufferFormatProperties2ANDROID {
    sType: VkStructureType,
    pNext: *mut c_void,
    format: VkFormat,
    externalFormat: u64,
    formatFeatures: VkFormatFeatureFlags2,
    samplerYcbcrConversionComponents: VkComponentMapping,
    suggestedYcbcrModel: VkSamplerYcbcrModelConversion,
    suggestedYcbcrRange: VkSamplerYcbcrRange,
    suggestedXChromaOffset: VkChromaLocation,
    suggestedYChromaOffset: VkChromaLocation,
}
pub type PFN_vkDebugUtilsMessengerCallbackEXT = extern "system" fn(
    messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT,
    messageTypes: VkDebugUtilsMessageTypeFlagsEXT,
    pCallbackData: *const VkDebugUtilsMessengerCallbackDataEXT,
    pUserData: *mut c_void,
) -> VkBool32;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceProperties {
    apiVersion: u32,
    driverVersion: u32,
    vendorID: u32,
    deviceID: u32,
    deviceType: VkPhysicalDeviceType,
    deviceName: c_char,
    pipelineCacheUUID: u8,
    limits: VkPhysicalDeviceLimits,
    sparseProperties: VkPhysicalDeviceSparseProperties,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkDeviceCreateFlags,
    queueCreateInfoCount: u32,
    pQueueCreateInfos: *const VkDeviceQueueCreateInfo,
    enabledLayerCount: u32,
    ppEnabledLayerNames: *const *const c_char,
    enabledExtensionCount: u32,
    ppEnabledExtensionNames: *const *const c_char,
    pEnabledFeatures: *const VkPhysicalDeviceFeatures,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMemoryProperties {
    memoryTypeCount: u32,
    memoryTypes: VkMemoryType,
    memoryHeapCount: u32,
    memoryHeaps: VkMemoryHeap,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceProperties2 {
    sType: VkStructureType,
    pNext: *mut c_void,
    properties: VkPhysicalDeviceProperties,
}
pub type VkPhysicalDeviceProperties2KHR = VkPhysicalDeviceProperties2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMemoryProperties2 {
    sType: VkStructureType,
    pNext: *mut c_void,
    memoryProperties: VkPhysicalDeviceMemoryProperties,
}
pub type VkPhysicalDeviceMemoryProperties2KHR = VkPhysicalDeviceMemoryProperties2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPresentRegionsKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    swapchainCount: u32,
    pRegions: *const VkPresentRegionKHR,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugUtilsMessengerCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkDebugUtilsMessengerCreateFlagsEXT,
    messageSeverity: VkDebugUtilsMessageSeverityFlagsEXT,
    messageType: VkDebugUtilsMessageTypeFlagsEXT,
    pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT,
    pUserData: *mut c_void,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDrmFormatModifierPropertiesListEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    drmFormatModifierCount: u32,
    pDrmFormatModifierProperties: *mut VkDrmFormatModifierPropertiesEXT,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFramebufferAttachmentsCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    attachmentImageInfoCount: u32,
    pAttachmentImageInfos: *const VkFramebufferAttachmentImageInfo,
}
pub type VkFramebufferAttachmentsCreateInfoKHR = VkFramebufferAttachmentsCreateInfo;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDrmFormatModifierPropertiesList2EXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    drmFormatModifierCount: u32,
    pDrmFormatModifierProperties: *mut VkDrmFormatModifierProperties2EXT,
}
}

pub mod enumerations {
    #![allow(dead_code, non_upper_case_globals, unused_imports)]

    use std::os::raw::*;
    use super::types::*;

    pub const AMD_BUFFER_MARKER_EXTENSION_NAME: &str = "VK_AMD_buffer_marker\0";
    pub const AMD_BUFFER_MARKER_SPEC_VERSION: c_uint = 1;
    pub const AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME: &str = "VK_AMD_device_coherent_memory\0";
    pub const AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION: c_uint = 1;
    pub const AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME: &str = "VK_AMD_display_native_hdr\0";
    pub const AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION: c_uint = 1;
    pub const AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME: &str = "VK_AMD_draw_indirect_count\0";
    pub const AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION: c_uint = 2;
    pub const AMD_GCN_SHADER_EXTENSION_NAME: &str = "VK_AMD_gcn_shader\0";
    pub const AMD_GCN_SHADER_SPEC_VERSION: c_uint = 1;
    pub const AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME: &str = "VK_AMD_gpu_shader_half_float\0";
    pub const AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION: c_uint = 2;
    pub const AMD_GPU_SHADER_INT16_EXTENSION_NAME: &str = "VK_AMD_gpu_shader_int16\0";
    pub const AMD_GPU_SHADER_INT16_SPEC_VERSION: c_uint = 2;
    pub const AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME: &str = "VK_AMD_memory_overallocation_behavior\0";
    pub const AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION: c_uint = 1;
    pub const AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME: &str = "VK_AMD_mixed_attachment_samples\0";
    pub const AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION: c_uint = 1;
    pub const AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME: &str = "VK_AMD_negative_viewport_height\0";
    pub const AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION: c_uint = 1;
    pub const AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME: &str = "VK_AMD_pipeline_compiler_control\0";
    pub const AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION: c_uint = 1;
    pub const AMD_RASTERIZATION_ORDER_EXTENSION_NAME: &str = "VK_AMD_rasterization_order\0";
    pub const AMD_RASTERIZATION_ORDER_SPEC_VERSION: c_uint = 1;
    pub const AMD_SHADER_BALLOT_EXTENSION_NAME: &str = "VK_AMD_shader_ballot\0";
    pub const AMD_SHADER_BALLOT_SPEC_VERSION: c_uint = 1;
    pub const AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME: &str = "VK_AMD_shader_core_properties2\0";
    pub const AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION: c_uint = 1;
    pub const AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME: &str = "VK_AMD_shader_core_properties\0";
    pub const AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION: c_uint = 2;
    pub const AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME: &str = "VK_AMD_shader_explicit_vertex_parameter\0";
    pub const AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION: c_uint = 1;
    pub const AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME: &str = "VK_AMD_shader_fragment_mask\0";
    pub const AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION: c_uint = 1;
    pub const AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME: &str = "VK_AMD_shader_image_load_store_lod\0";
    pub const AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION: c_uint = 1;
    pub const AMD_SHADER_INFO_EXTENSION_NAME: &str = "VK_AMD_shader_info\0";
    pub const AMD_SHADER_INFO_SPEC_VERSION: c_uint = 1;
    pub const AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME: &str = "VK_AMD_shader_trinary_minmax\0";
    pub const AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION: c_uint = 1;
    pub const AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME: &str = "VK_AMD_texture_gather_bias_lod\0";
    pub const AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION: c_uint = 1;
    pub const ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_EXTENSION_NAME: &str = "VK_ANDROID_external_memory_android_hardware_buffer\0";
    pub const ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_SPEC_VERSION: c_uint = 5;
    pub const ATTACHMENT_UNUSED: c_uint = !0;
    pub const EXT_4444_FORMATS_EXTENSION_NAME: &str = "VK_EXT_4444_formats\0";
    pub const EXT_4444_FORMATS_SPEC_VERSION: c_uint = 1;
    pub const EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME: &str = "VK_EXT_acquire_xlib_display\0";
    pub const EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION: c_uint = 1;
    pub const EXT_ASTC_DECODE_MODE_EXTENSION_NAME: &str = "VK_EXT_astc_decode_mode\0";
    pub const EXT_ASTC_DECODE_MODE_SPEC_VERSION: c_uint = 1;
    pub const EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME: &str = "VK_EXT_blend_operation_advanced\0";
    pub const EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION: c_uint = 2;
    pub const EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME: &str = "VK_EXT_buffer_device_address\0";
    pub const EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION: c_uint = 2;
    pub const EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME: &str = "VK_EXT_calibrated_timestamps\0";
    pub const EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION: c_uint = 2;
    pub const EXT_CONDITIONAL_RENDERING_EXTENSION_NAME: &str = "VK_EXT_conditional_rendering\0";
    pub const EXT_CONDITIONAL_RENDERING_SPEC_VERSION: c_uint = 2;
    pub const EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME: &str = "VK_EXT_conservative_rasterization\0";
    pub const EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION: c_uint = 1;
    pub const EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME: &str = "VK_EXT_custom_border_color\0";
    pub const EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION: c_uint = 12;
    pub const EXT_DEBUG_MARKER_EXTENSION_NAME: &str = "VK_EXT_debug_marker\0";
    pub const EXT_DEBUG_MARKER_SPEC_VERSION: c_uint = 4;
    pub const EXT_DEBUG_REPORT_EXTENSION_NAME: &str = "VK_EXT_debug_report\0";
    pub const EXT_DEBUG_REPORT_SPEC_VERSION: c_uint = 10;
    pub const EXT_DEBUG_UTILS_EXTENSION_NAME: &str = "VK_EXT_debug_utils\0";
    pub const EXT_DEBUG_UTILS_SPEC_VERSION: c_uint = 2;
    pub const EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME: &str = "VK_EXT_depth_clip_enable\0";
    pub const EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION: c_uint = 1;
    pub const EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME: &str = "VK_EXT_depth_range_unrestricted\0";
    pub const EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION: c_uint = 1;
    pub const EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME: &str = "VK_EXT_descriptor_indexing\0";
    pub const EXT_DESCRIPTOR_INDEXING_SPEC_VERSION: c_uint = 2;
    pub const EXT_DIRECTFB_SURFACE_EXTENSION_NAME: &str = "VK_EXT_directfb_surface\0";
    pub const EXT_DIRECTFB_SURFACE_SPEC_VERSION: c_uint = 1;
    pub const EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME: &str = "VK_EXT_direct_mode_display\0";
    pub const EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION: c_uint = 1;
    pub const EXT_DISCARD_RECTANGLES_EXTENSION_NAME: &str = "VK_EXT_discard_rectangles\0";
    pub const EXT_DISCARD_RECTANGLES_SPEC_VERSION: c_uint = 1;
    pub const EXT_DISPLAY_CONTROL_EXTENSION_NAME: &str = "VK_EXT_display_control\0";
    pub const EXT_DISPLAY_CONTROL_SPEC_VERSION: c_uint = 1;
    pub const EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME: &str = "VK_EXT_display_surface_counter\0";
    pub const EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION: c_uint = 1;
    pub const EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME: &str = "VK_EXT_extended_dynamic_state\0";
    pub const EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION: c_uint = 1;
    pub const EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME: &str = "VK_EXT_external_memory_dma_buf\0";
    pub const EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION: c_uint = 1;
    pub const EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME: &str = "VK_EXT_external_memory_host\0";
    pub const EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION: c_uint = 1;
    pub const EXT_FILTER_CUBIC_EXTENSION_NAME: &str = "VK_EXT_filter_cubic\0";
    pub const EXT_FILTER_CUBIC_SPEC_VERSION: c_uint = 3;
    pub const EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME: &str = "VK_EXT_fragment_density_map2\0";
    pub const EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION: c_uint = 1;
    pub const EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME: &str = "VK_EXT_fragment_density_map\0";
    pub const EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION: c_uint = 2;
    pub const EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME: &str = "VK_EXT_fragment_shader_interlock\0";
    pub const EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION: c_uint = 1;
    pub const EXT_FULL_SCREEN_EXCLUSIVE_EXTENSION_NAME: &str = "VK_EXT_full_screen_exclusive\0";
    pub const EXT_FULL_SCREEN_EXCLUSIVE_SPEC_VERSION: c_uint = 4;
    pub const EXT_GLOBAL_PRIORITY_EXTENSION_NAME: &str = "VK_EXT_global_priority\0";
    pub const EXT_GLOBAL_PRIORITY_SPEC_VERSION: c_uint = 2;
    pub const EXT_HDR_METADATA_EXTENSION_NAME: &str = "VK_EXT_hdr_metadata\0";
    pub const EXT_HDR_METADATA_SPEC_VERSION: c_uint = 2;
    pub const EXT_HEADLESS_SURFACE_EXTENSION_NAME: &str = "VK_EXT_headless_surface\0";
    pub const EXT_HEADLESS_SURFACE_SPEC_VERSION: c_uint = 1;
    pub const EXT_HOST_QUERY_RESET_EXTENSION_NAME: &str = "VK_EXT_host_query_reset\0";
    pub const EXT_HOST_QUERY_RESET_SPEC_VERSION: c_uint = 1;
    pub const EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME: &str = "VK_EXT_image_drm_format_modifier\0";
    pub const EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION: c_uint = 2;
    pub const EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME: &str = "VK_EXT_image_robustness\0";
    pub const EXT_IMAGE_ROBUSTNESS_SPEC_VERSION: c_uint = 1;
    pub const EXT_INDEX_TYPE_UINT8_EXTENSION_NAME: &str = "VK_EXT_index_type_uint8\0";
    pub const EXT_INDEX_TYPE_UINT8_SPEC_VERSION: c_uint = 1;
    pub const EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME: &str = "VK_EXT_inline_uniform_block\0";
    pub const EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION: c_uint = 1;
    pub const EXT_LINE_RASTERIZATION_EXTENSION_NAME: &str = "VK_EXT_line_rasterization\0";
    pub const EXT_LINE_RASTERIZATION_SPEC_VERSION: c_uint = 1;
    pub const EXT_MEMORY_BUDGET_EXTENSION_NAME: &str = "VK_EXT_memory_budget\0";
    pub const EXT_MEMORY_BUDGET_SPEC_VERSION: c_uint = 1;
    pub const EXT_MEMORY_PRIORITY_EXTENSION_NAME: &str = "VK_EXT_memory_priority\0";
    pub const EXT_MEMORY_PRIORITY_SPEC_VERSION: c_uint = 1;
    pub const EXT_METAL_SURFACE_EXTENSION_NAME: &str = "VK_EXT_metal_surface\0";
    pub const EXT_METAL_SURFACE_SPEC_VERSION: c_uint = 1;
    pub const EXT_PCI_BUS_INFO_EXTENSION_NAME: &str = "VK_EXT_pci_bus_info\0";
    pub const EXT_PCI_BUS_INFO_SPEC_VERSION: c_uint = 2;
    pub const EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME: &str = "VK_EXT_pipeline_creation_cache_control\0";
    pub const EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION: c_uint = 3;
    pub const EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME: &str = "VK_EXT_pipeline_creation_feedback\0";
    pub const EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION: c_uint = 1;
    pub const EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME: &str = "VK_EXT_post_depth_coverage\0";
    pub const EXT_POST_DEPTH_COVERAGE_SPEC_VERSION: c_uint = 1;
    pub const EXT_PRIVATE_DATA_EXTENSION_NAME: &str = "VK_EXT_private_data\0";
    pub const EXT_PRIVATE_DATA_SPEC_VERSION: c_uint = 1;
    pub const EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME: &str = "VK_EXT_queue_family_foreign\0";
    pub const EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION: c_uint = 1;
    pub const EXT_ROBUSTNESS_2_EXTENSION_NAME: &str = "VK_EXT_robustness2\0";
    pub const EXT_ROBUSTNESS_2_SPEC_VERSION: c_uint = 1;
    pub const EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME: &str = "VK_EXT_sampler_filter_minmax\0";
    pub const EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION: c_uint = 2;
    pub const EXT_SAMPLE_LOCATIONS_EXTENSION_NAME: &str = "VK_EXT_sample_locations\0";
    pub const EXT_SAMPLE_LOCATIONS_SPEC_VERSION: c_uint = 1;
    pub const EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME: &str = "VK_EXT_scalar_block_layout\0";
    pub const EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION: c_uint = 1;
    pub const EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME: &str = "VK_EXT_separate_stencil_usage\0";
    pub const EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION: c_uint = 1;
    pub const EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME: &str = "VK_EXT_shader_atomic_float\0";
    pub const EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION: c_uint = 1;
    pub const EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME: &str = "VK_EXT_shader_demote_to_helper_invocation\0";
    pub const EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION: c_uint = 1;
    pub const EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME: &str = "VK_EXT_shader_stencil_export\0";
    pub const EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION: c_uint = 1;
    pub const EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME: &str = "VK_EXT_shader_subgroup_ballot\0";
    pub const EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION: c_uint = 1;
    pub const EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME: &str = "VK_EXT_shader_subgroup_vote\0";
    pub const EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION: c_uint = 1;
    pub const EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME: &str = "VK_EXT_shader_viewport_index_layer\0";
    pub const EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION: c_uint = 1;
    pub const EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME: &str = "VK_EXT_subgroup_size_control\0";
    pub const EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION: c_uint = 2;
    pub const EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME: &str = "VK_EXT_swapchain_colorspace\0";
    pub const EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION: c_uint = 4;
    pub const EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME: &str = "VK_EXT_texel_buffer_alignment\0";
    pub const EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION: c_uint = 1;
    pub const EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME: &str = "VK_EXT_texture_compression_astc_hdr\0";
    pub const EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION: c_uint = 1;
    pub const EXT_TOOLING_INFO_EXTENSION_NAME: &str = "VK_EXT_tooling_info\0";
    pub const EXT_TOOLING_INFO_SPEC_VERSION: c_uint = 1;
    pub const EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME: &str = "VK_EXT_transform_feedback\0";
    pub const EXT_TRANSFORM_FEEDBACK_SPEC_VERSION: c_uint = 1;
    pub const EXT_VALIDATION_CACHE_EXTENSION_NAME: &str = "VK_EXT_validation_cache\0";
    pub const EXT_VALIDATION_CACHE_SPEC_VERSION: c_uint = 1;
    pub const EXT_VALIDATION_FEATURES_EXTENSION_NAME: &str = "VK_EXT_validation_features\0";
    pub const EXT_VALIDATION_FEATURES_SPEC_VERSION: c_uint = 5;
    pub const EXT_VALIDATION_FLAGS_EXTENSION_NAME: &str = "VK_EXT_validation_flags\0";
    pub const EXT_VALIDATION_FLAGS_SPEC_VERSION: c_uint = 2;
    pub const EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME: &str = "VK_EXT_vertex_attribute_divisor\0";
    pub const EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION: c_uint = 3;
    pub const EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME: &str = "VK_EXT_ycbcr_image_arrays\0";
    pub const EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION: c_uint = 1;
    pub const FALSE: c_uint = 0;
    pub const FUCHSIA_IMAGEPIPE_SURFACE_EXTENSION_NAME: &str = "VK_FUCHSIA_imagepipe_surface\0";
    pub const FUCHSIA_IMAGEPIPE_SURFACE_SPEC_VERSION: c_uint = 1;
    pub const GGP_FRAME_TOKEN_EXTENSION_NAME: &str = "VK_GGP_frame_token\0";
    pub const GGP_FRAME_TOKEN_SPEC_VERSION: c_uint = 1;
    pub const GGP_STREAM_DESCRIPTOR_SURFACE_EXTENSION_NAME: &str = "VK_GGP_stream_descriptor_surface\0";
    pub const GGP_STREAM_DESCRIPTOR_SURFACE_SPEC_VERSION: c_uint = 1;
    pub const GOOGLE_DECORATE_STRING_EXTENSION_NAME: &str = "VK_GOOGLE_decorate_string\0";
    pub const GOOGLE_DECORATE_STRING_SPEC_VERSION: c_uint = 1;
    pub const GOOGLE_DISPLAY_TIMING_EXTENSION_NAME: &str = "VK_GOOGLE_display_timing\0";
    pub const GOOGLE_DISPLAY_TIMING_SPEC_VERSION: c_uint = 1;
    pub const GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME: &str = "VK_GOOGLE_hlsl_functionality1\0";
    pub const GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION: c_uint = 1;
    pub const GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME: &str = "VK_GOOGLE_hlsl_functionality1\0";
    pub const GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION: c_uint = 1;
    pub const GOOGLE_USER_TYPE_EXTENSION_NAME: &str = "VK_GOOGLE_user_type\0";
    pub const GOOGLE_USER_TYPE_SPEC_VERSION: c_uint = 1;
    pub const IMG_FILTER_CUBIC_EXTENSION_NAME: &str = "VK_IMG_filter_cubic\0";
    pub const IMG_FILTER_CUBIC_SPEC_VERSION: c_uint = 1;
    pub const IMG_FORMAT_PVRTC_EXTENSION_NAME: &str = "VK_IMG_format_pvrtc\0";
    pub const IMG_FORMAT_PVRTC_SPEC_VERSION: c_uint = 1;
    pub const INTEL_PERFORMANCE_QUERY_EXTENSION_NAME: &str = "VK_INTEL_performance_query\0";
    pub const INTEL_PERFORMANCE_QUERY_SPEC_VERSION: c_uint = 2;
    pub const INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME: &str = "VK_INTEL_shader_integer_functions2\0";
    pub const INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION: c_uint = 1;
    pub const KHR_16BIT_STORAGE_EXTENSION_NAME: &str = "VK_KHR_16bit_storage\0";
    pub const KHR_16BIT_STORAGE_SPEC_VERSION: c_uint = 1;
    pub const KHR_8BIT_STORAGE_EXTENSION_NAME: &str = "VK_KHR_8bit_storage\0";
    pub const KHR_8BIT_STORAGE_SPEC_VERSION: c_uint = 1;
    pub const KHR_ANDROID_SURFACE_EXTENSION_NAME: &str = "VK_KHR_android_surface\0";
    pub const KHR_ANDROID_SURFACE_SPEC_VERSION: c_uint = 6;
    pub const KHR_BIND_MEMORY_2_EXTENSION_NAME: &str = "VK_KHR_bind_memory2\0";
    pub const KHR_BIND_MEMORY_2_SPEC_VERSION: c_uint = 1;
    pub const KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME: &str = "VK_KHR_buffer_device_address\0";
    pub const KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION: c_uint = 1;
    pub const KHR_CREATE_RENDERPASS_2_EXTENSION_NAME: &str = "VK_KHR_create_renderpass2\0";
    pub const KHR_CREATE_RENDERPASS_2_SPEC_VERSION: c_uint = 1;
    pub const KHR_DEDICATED_ALLOCATION_EXTENSION_NAME: &str = "VK_KHR_dedicated_allocation\0";
    pub const KHR_DEDICATED_ALLOCATION_SPEC_VERSION: c_uint = 3;
    pub const KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME: &str = "VK_KHR_deferred_host_operations\0";
    pub const KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION: c_uint = 4;
    pub const KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME: &str = "VK_KHR_depth_stencil_resolve\0";
    pub const KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION: c_uint = 1;
    pub const KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME: &str = "VK_KHR_descriptor_update_template\0";
    pub const KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION: c_uint = 1;
    pub const KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME: &str = "VK_KHR_device_group_creation\0";
    pub const KHR_DEVICE_GROUP_CREATION_SPEC_VERSION: c_uint = 1;
    pub const KHR_DEVICE_GROUP_EXTENSION_NAME: &str = "VK_KHR_device_group\0";
    pub const KHR_DEVICE_GROUP_SPEC_VERSION: c_uint = 4;
    pub const KHR_DISPLAY_EXTENSION_NAME: &str = "VK_KHR_display\0";
    pub const KHR_DISPLAY_SPEC_VERSION: c_uint = 23;
    pub const KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME: &str = "VK_KHR_display_swapchain\0";
    pub const KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION: c_uint = 10;
    pub const KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME: &str = "VK_KHR_draw_indirect_count\0";
    pub const KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION: c_uint = 1;
    pub const KHR_DRIVER_PROPERTIES_EXTENSION_NAME: &str = "VK_KHR_driver_properties\0";
    pub const KHR_DRIVER_PROPERTIES_SPEC_VERSION: c_uint = 1;
    pub const KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME: &str = "VK_KHR_external_fence_capabilities\0";
    pub const KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION: c_uint = 1;
    pub const KHR_EXTERNAL_FENCE_EXTENSION_NAME: &str = "VK_KHR_external_fence\0";
    pub const KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME: &str = "VK_KHR_external_fence_fd\0";
    pub const KHR_EXTERNAL_FENCE_FD_SPEC_VERSION: c_uint = 1;
    pub const KHR_EXTERNAL_FENCE_SPEC_VERSION: c_uint = 1;
    pub const KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME: &str = "VK_KHR_external_fence_win32\0";
    pub const KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION: c_uint = 1;
    pub const KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME: &str = "VK_KHR_external_memory_capabilities\0";
    pub const KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION: c_uint = 1;
    pub const KHR_EXTERNAL_MEMORY_EXTENSION_NAME: &str = "VK_KHR_external_memory\0";
    pub const KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME: &str = "VK_KHR_external_memory_fd\0";
    pub const KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION: c_uint = 1;
    pub const KHR_EXTERNAL_MEMORY_SPEC_VERSION: c_uint = 1;
    pub const KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME: &str = "VK_KHR_external_memory_win32\0";
    pub const KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION: c_uint = 1;
    pub const KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME: &str = "VK_KHR_external_semaphore_capabilities\0";
    pub const KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION: c_uint = 1;
    pub const KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME: &str = "VK_KHR_external_semaphore\0";
    pub const KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME: &str = "VK_KHR_external_semaphore_fd\0";
    pub const KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION: c_uint = 1;
    pub const KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION: c_uint = 1;
    pub const KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME: &str = "VK_KHR_external_semaphore_win32\0";
    pub const KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION: c_uint = 1;
    pub const KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME: &str = "VK_KHR_get_display_properties2\0";
    pub const KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION: c_uint = 1;
    pub const KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME: &str = "VK_KHR_get_memory_requirements2\0";
    pub const KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION: c_uint = 1;
    pub const KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME: &str = "VK_KHR_get_physical_device_properties2\0";
    pub const KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION: c_uint = 2;
    pub const KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME: &str = "VK_KHR_get_surface_capabilities2\0";
    pub const KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION: c_uint = 1;
    pub const KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME: &str = "VK_KHR_imageless_framebuffer\0";
    pub const KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION: c_uint = 1;
    pub const KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME: &str = "VK_KHR_image_format_list\0";
    pub const KHR_IMAGE_FORMAT_LIST_SPEC_VERSION: c_uint = 1;
    pub const KHR_INCREMENTAL_PRESENT_EXTENSION_NAME: &str = "VK_KHR_incremental_present\0";
    pub const KHR_INCREMENTAL_PRESENT_SPEC_VERSION: c_uint = 2;
    pub const KHR_MAINTENANCE1_EXTENSION_NAME: &str = "VK_KHR_maintenance1\0";
    pub const KHR_MAINTENANCE1_SPEC_VERSION: c_uint = 2;
    pub const KHR_MAINTENANCE2_EXTENSION_NAME: &str = "VK_KHR_maintenance2\0";
    pub const KHR_MAINTENANCE2_SPEC_VERSION: c_uint = 1;
    pub const KHR_MAINTENANCE3_EXTENSION_NAME: &str = "VK_KHR_maintenance3\0";
    pub const KHR_MAINTENANCE3_SPEC_VERSION: c_uint = 1;
    pub const KHR_MAINTENANCE_1_EXTENSION_NAME: &str = "VK_KHR_maintenance1\0";
    pub const KHR_MAINTENANCE_1_SPEC_VERSION: c_uint = 2;
    pub const KHR_MAINTENANCE_2_EXTENSION_NAME: &str = "VK_KHR_maintenance2\0";
    pub const KHR_MAINTENANCE_2_SPEC_VERSION: c_uint = 1;
    pub const KHR_MAINTENANCE_3_EXTENSION_NAME: &str = "VK_KHR_maintenance3\0";
    pub const KHR_MAINTENANCE_3_SPEC_VERSION: c_uint = 1;
    pub const KHR_MULTIVIEW_EXTENSION_NAME: &str = "VK_KHR_multiview\0";
    pub const KHR_MULTIVIEW_SPEC_VERSION: c_uint = 1;
    pub const KHR_PERFORMANCE_QUERY_EXTENSION_NAME: &str = "VK_KHR_performance_query\0";
    pub const KHR_PERFORMANCE_QUERY_SPEC_VERSION: c_uint = 1;
    pub const KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME: &str = "VK_KHR_pipeline_executable_properties\0";
    pub const KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION: c_uint = 1;
    pub const KHR_PIPELINE_LIBRARY_EXTENSION_NAME: &str = "VK_KHR_pipeline_library\0";
    pub const KHR_PIPELINE_LIBRARY_SPEC_VERSION: c_uint = 1;
    pub const KHR_PUSH_DESCRIPTOR_EXTENSION_NAME: &str = "VK_KHR_push_descriptor\0";
    pub const KHR_PUSH_DESCRIPTOR_SPEC_VERSION: c_uint = 2;
    pub const KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME: &str = "VK_KHR_relaxed_block_layout\0";
    pub const KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION: c_uint = 1;
    pub const KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME: &str = "VK_KHR_sampler_mirror_clamp_to_edge\0";
    pub const KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION: c_uint = 3;
    pub const KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME: &str = "VK_KHR_sampler_ycbcr_conversion\0";
    pub const KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION: c_uint = 14;
    pub const KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME: &str = "VK_KHR_separate_depth_stencil_layouts\0";
    pub const KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION: c_uint = 1;
    pub const KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME: &str = "VK_KHR_shader_atomic_int64\0";
    pub const KHR_SHADER_ATOMIC_INT64_SPEC_VERSION: c_uint = 1;
    pub const KHR_SHADER_CLOCK_EXTENSION_NAME: &str = "VK_KHR_shader_clock\0";
    pub const KHR_SHADER_CLOCK_SPEC_VERSION: c_uint = 1;
    pub const KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME: &str = "VK_KHR_shader_draw_parameters\0";
    pub const KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION: c_uint = 1;
    pub const KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME: &str = "VK_KHR_shader_float16_int8\0";
    pub const KHR_SHADER_FLOAT16_INT8_SPEC_VERSION: c_uint = 1;
    pub const KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME: &str = "VK_KHR_shader_float_controls\0";
    pub const KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION: c_uint = 4;
    pub const KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME: &str = "VK_KHR_shader_non_semantic_info\0";
    pub const KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION: c_uint = 1;
    pub const KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME: &str = "VK_KHR_shader_subgroup_extended_types\0";
    pub const KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION: c_uint = 1;
    pub const KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME: &str = "VK_KHR_shared_presentable_image\0";
    pub const KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION: c_uint = 1;
    pub const KHR_SPIRV_1_4_EXTENSION_NAME: &str = "VK_KHR_spirv_1_4\0";
    pub const KHR_SPIRV_1_4_SPEC_VERSION: c_uint = 1;
    pub const KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME: &str = "VK_KHR_storage_buffer_storage_class\0";
    pub const KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION: c_uint = 1;
    pub const KHR_SURFACE_EXTENSION_NAME: &str = "VK_KHR_surface\0";
    pub const KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME: &str = "VK_KHR_surface_protected_capabilities\0";
    pub const KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION: c_uint = 1;
    pub const KHR_SURFACE_SPEC_VERSION: c_uint = 25;
    pub const KHR_SWAPCHAIN_EXTENSION_NAME: &str = "VK_KHR_swapchain\0";
    pub const KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME: &str = "VK_KHR_swapchain_mutable_format\0";
    pub const KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION: c_uint = 1;
    pub const KHR_SWAPCHAIN_SPEC_VERSION: c_uint = 70;
    pub const KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME: &str = "VK_KHR_timeline_semaphore\0";
    pub const KHR_TIMELINE_SEMAPHORE_SPEC_VERSION: c_uint = 2;
    pub const KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME: &str = "VK_KHR_uniform_buffer_standard_layout\0";
    pub const KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION: c_uint = 1;
    pub const KHR_VARIABLE_POINTERS_EXTENSION_NAME: &str = "VK_KHR_variable_pointers\0";
    pub const KHR_VARIABLE_POINTERS_SPEC_VERSION: c_uint = 1;
    pub const KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME: &str = "VK_KHR_vulkan_memory_model\0";
    pub const KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION: c_uint = 3;
    pub const KHR_WAYLAND_SURFACE_EXTENSION_NAME: &str = "VK_KHR_wayland_surface\0";
    pub const KHR_WAYLAND_SURFACE_SPEC_VERSION: c_uint = 6;
    pub const KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME: &str = "VK_KHR_win32_keyed_mutex\0";
    pub const KHR_WIN32_KEYED_MUTEX_SPEC_VERSION: c_uint = 1;
    pub const KHR_WIN32_SURFACE_EXTENSION_NAME: &str = "VK_KHR_win32_surface\0";
    pub const KHR_WIN32_SURFACE_SPEC_VERSION: c_uint = 6;
    pub const KHR_XCB_SURFACE_EXTENSION_NAME: &str = "VK_KHR_xcb_surface\0";
    pub const KHR_XCB_SURFACE_SPEC_VERSION: c_uint = 6;
    pub const KHR_XLIB_SURFACE_EXTENSION_NAME: &str = "VK_KHR_xlib_surface\0";
    pub const KHR_XLIB_SURFACE_SPEC_VERSION: c_uint = 6;
    pub const LOD_CLAMP_NONE: c_float = 1000.0;
    pub const LUID_SIZE: c_uint = 8;
    pub const LUID_SIZE_KHR: c_uint = 8;
    pub const MAX_DESCRIPTION_SIZE: c_uint = 256;
    pub const MAX_DEVICE_GROUP_SIZE: c_uint = 32;
    pub const MAX_DEVICE_GROUP_SIZE_KHR: c_uint = 32;
    pub const MAX_DRIVER_INFO_SIZE: c_uint = 256;
    pub const MAX_DRIVER_INFO_SIZE_KHR: c_uint = 256;
    pub const MAX_DRIVER_NAME_SIZE: c_uint = 256;
    pub const MAX_DRIVER_NAME_SIZE_KHR: c_uint = 256;
    pub const MAX_EXTENSION_NAME_SIZE: c_uint = 256;
    pub const MAX_MEMORY_HEAPS: c_uint = 16;
    pub const MAX_MEMORY_TYPES: c_uint = 32;
    pub const MAX_PHYSICAL_DEVICE_NAME_SIZE: c_uint = 256;
    pub const MVK_IOS_SURFACE_EXTENSION_NAME: &str = "VK_MVK_ios_surface\0";
    pub const MVK_IOS_SURFACE_SPEC_VERSION: c_uint = 3;
    pub const MVK_MACOS_SURFACE_EXTENSION_NAME: &str = "VK_MVK_macos_surface\0";
    pub const MVK_MACOS_SURFACE_SPEC_VERSION: c_uint = 3;
    pub const NN_VI_SURFACE_EXTENSION_NAME: &str = "VK_NN_vi_surface\0";
    pub const NN_VI_SURFACE_SPEC_VERSION: c_uint = 1;
    pub const NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME: &str = "VK_NVX_image_view_handle\0";
    pub const NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION: c_uint = 2;
    pub const NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME: &str = "VK_NVX_multiview_per_view_attributes\0";
    pub const NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION: c_uint = 1;
    pub const NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME: &str = "VK_NV_clip_space_w_scaling\0";
    pub const NV_CLIP_SPACE_W_SCALING_SPEC_VERSION: c_uint = 1;
    pub const NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME: &str = "VK_NV_compute_shader_derivatives\0";
    pub const NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION: c_uint = 1;
    pub const NV_COOPERATIVE_MATRIX_EXTENSION_NAME: &str = "VK_NV_cooperative_matrix\0";
    pub const NV_COOPERATIVE_MATRIX_SPEC_VERSION: c_uint = 1;
    pub const NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME: &str = "VK_NV_corner_sampled_image\0";
    pub const NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION: c_uint = 2;
    pub const NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME: &str = "VK_NV_coverage_reduction_mode\0";
    pub const NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION: c_uint = 1;
    pub const NV_DEDICATED_ALLOCATION_EXTENSION_NAME: &str = "VK_NV_dedicated_allocation\0";
    pub const NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME: &str = "VK_NV_dedicated_allocation_image_aliasing\0";
    pub const NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION: c_uint = 1;
    pub const NV_DEDICATED_ALLOCATION_SPEC_VERSION: c_uint = 1;
    pub const NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME: &str = "VK_NV_device_diagnostics_config\0";
    pub const NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION: c_uint = 1;
    pub const NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME: &str = "VK_NV_device_diagnostic_checkpoints\0";
    pub const NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION: c_uint = 2;
    pub const NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME: &str = "VK_NV_device_generated_commands\0";
    pub const NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION: c_uint = 3;
    pub const NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME: &str = "VK_NV_external_memory_capabilities\0";
    pub const NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION: c_uint = 1;
    pub const NV_EXTERNAL_MEMORY_EXTENSION_NAME: &str = "VK_NV_external_memory\0";
    pub const NV_EXTERNAL_MEMORY_SPEC_VERSION: c_uint = 1;
    pub const NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME: &str = "VK_NV_external_memory_win32\0";
    pub const NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION: c_uint = 1;
    pub const NV_FILL_RECTANGLE_EXTENSION_NAME: &str = "VK_NV_fill_rectangle\0";
    pub const NV_FILL_RECTANGLE_SPEC_VERSION: c_uint = 1;
    pub const NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME: &str = "VK_NV_fragment_coverage_to_color\0";
    pub const NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION: c_uint = 1;
    pub const NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME: &str = "VK_NV_fragment_shader_barycentric\0";
    pub const NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION: c_uint = 1;
    pub const NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME: &str = "VK_NV_framebuffer_mixed_samples\0";
    pub const NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION: c_uint = 1;
    pub const NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME: &str = "VK_NV_geometry_shader_passthrough\0";
    pub const NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION: c_uint = 1;
    pub const NV_GLSL_SHADER_EXTENSION_NAME: &str = "VK_NV_glsl_shader\0";
    pub const NV_GLSL_SHADER_SPEC_VERSION: c_uint = 1;
    pub const NV_MESH_SHADER_EXTENSION_NAME: &str = "VK_NV_mesh_shader\0";
    pub const NV_MESH_SHADER_SPEC_VERSION: c_uint = 1;
    pub const NV_RAY_TRACING_EXTENSION_NAME: &str = "VK_NV_ray_tracing\0";
    pub const NV_RAY_TRACING_SPEC_VERSION: c_uint = 3;
    pub const NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME: &str = "VK_NV_representative_fragment_test\0";
    pub const NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION: c_uint = 2;
    pub const NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME: &str = "VK_NV_sample_mask_override_coverage\0";
    pub const NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION: c_uint = 1;
    pub const NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME: &str = "VK_NV_scissor_exclusive\0";
    pub const NV_SCISSOR_EXCLUSIVE_SPEC_VERSION: c_uint = 1;
    pub const NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME: &str = "VK_NV_shader_image_footprint\0";
    pub const NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION: c_uint = 2;
    pub const NV_SHADER_SM_BUILTINS_EXTENSION_NAME: &str = "VK_NV_shader_sm_builtins\0";
    pub const NV_SHADER_SM_BUILTINS_SPEC_VERSION: c_uint = 1;
    pub const NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME: &str = "VK_NV_shader_subgroup_partitioned\0";
    pub const NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION: c_uint = 1;
    pub const NV_SHADING_RATE_IMAGE_EXTENSION_NAME: &str = "VK_NV_shading_rate_image\0";
    pub const NV_SHADING_RATE_IMAGE_SPEC_VERSION: c_uint = 3;
    pub const NV_VIEWPORT_ARRAY2_EXTENSION_NAME: &str = "VK_NV_viewport_array2\0";
    pub const NV_VIEWPORT_ARRAY2_SPEC_VERSION: c_uint = 1;
    pub const NV_VIEWPORT_ARRAY_2_EXTENSION_NAME: &str = "VK_NV_viewport_array2\0";
    pub const NV_VIEWPORT_ARRAY_2_SPEC_VERSION: c_uint = 1;
    pub const NV_VIEWPORT_SWIZZLE_EXTENSION_NAME: &str = "VK_NV_viewport_swizzle\0";
    pub const NV_VIEWPORT_SWIZZLE_SPEC_VERSION: c_uint = 1;
    pub const NV_WIN32_KEYED_MUTEX_EXTENSION_NAME: &str = "VK_NV_win32_keyed_mutex\0";
    pub const NV_WIN32_KEYED_MUTEX_SPEC_VERSION: c_uint = 2;
    pub const QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME: &str = "VK_QCOM_render_pass_shader_resolve\0";
    pub const QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION: c_uint = 4;
    pub const QCOM_RENDER_PASS_STORE_OPS_EXTENSION_NAME: &str = "VK_QCOM_render_pass_store_ops\0";
    pub const QCOM_RENDER_PASS_STORE_OPS_SPEC_VERSION: c_uint = 2;
    pub const QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME: &str = "VK_QCOM_render_pass_transform\0";
    pub const QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION: c_uint = 2;
    pub const QUEUE_FAMILY_EXTERNAL: c_uint = !1;
    pub const QUEUE_FAMILY_EXTERNAL_KHR: c_uint = !1;
    pub const QUEUE_FAMILY_FOREIGN_EXT: c_uint = !2;
    pub const QUEUE_FAMILY_IGNORED: c_uint = !0;
    pub const REMAINING_ARRAY_LAYERS: c_uint = !0;
    pub const REMAINING_MIP_LEVELS: c_uint = !0;
    pub const SHADER_UNUSED_KHR: c_uint = !0;
    pub const SHADER_UNUSED_NV: c_uint = !0;
    pub const SUBPASS_EXTERNAL: c_uint = !0;
    pub const TRUE: c_uint = 1;
    pub const UUID_SIZE: c_uint = 16;
    pub const WHOLE_SIZE: c_uint = !0;
}

pub mod functions {
    #![allow(non_snake_case, unused_variables, dead_code, unused_imports)]

    use std::mem::transmute;
    use std::os::raw::*;
    use super::*;
    use super::types::*;

    macro_rules! func {
        ($fun:ident, $ret:ty, $($name:ident: $typ:ty),*) => {
            #[inline] pub unsafe fn $fun(&self, $($name: $typ),*) -> $ret {
                transmute::<_, extern "system" fn($($typ),*) -> $ret>(self.$fun.ptr)($($name),*)
            }
        }
    }

    pub struct Vulkan {
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] pub(super) AcquireFullScreenExclusiveModeEXT: FnPtr,
         pub(super) AcquireNextImage2KHR: FnPtr,
         pub(super) AcquireNextImageKHR: FnPtr,
         pub(super) AcquirePerformanceConfigurationINTEL: FnPtr,
         pub(super) AcquireProfilingLockKHR: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_XLIB_XRANDR_EXT"))] pub(super) AcquireXlibDisplayEXT: FnPtr,
         pub(super) AllocateCommandBuffers: FnPtr,
         pub(super) AllocateDescriptorSets: FnPtr,
         pub(super) AllocateMemory: FnPtr,
         pub(super) BeginCommandBuffer: FnPtr,
         pub(super) BindAccelerationStructureMemoryNV: FnPtr,
         pub(super) BindBufferMemory: FnPtr,
         pub(super) BindBufferMemory2: FnPtr,
         pub(super) BindBufferMemory2KHR: FnPtr,
         pub(super) BindImageMemory: FnPtr,
         pub(super) BindImageMemory2: FnPtr,
         pub(super) BindImageMemory2KHR: FnPtr,
         pub(super) CmdBeginConditionalRenderingEXT: FnPtr,
         pub(super) CmdBeginDebugUtilsLabelEXT: FnPtr,
         pub(super) CmdBeginQuery: FnPtr,
         pub(super) CmdBeginQueryIndexedEXT: FnPtr,
         pub(super) CmdBeginRenderPass: FnPtr,
         pub(super) CmdBeginRenderPass2: FnPtr,
         pub(super) CmdBeginRenderPass2KHR: FnPtr,
         pub(super) CmdBeginTransformFeedbackEXT: FnPtr,
         pub(super) CmdBindDescriptorSets: FnPtr,
         pub(super) CmdBindIndexBuffer: FnPtr,
         pub(super) CmdBindPipeline: FnPtr,
         pub(super) CmdBindPipelineShaderGroupNV: FnPtr,
         pub(super) CmdBindShadingRateImageNV: FnPtr,
         pub(super) CmdBindTransformFeedbackBuffersEXT: FnPtr,
         pub(super) CmdBindVertexBuffers: FnPtr,
         pub(super) CmdBindVertexBuffers2EXT: FnPtr,
         pub(super) CmdBlitImage: FnPtr,
         pub(super) CmdBuildAccelerationStructureNV: FnPtr,
         pub(super) CmdClearAttachments: FnPtr,
         pub(super) CmdClearColorImage: FnPtr,
         pub(super) CmdClearDepthStencilImage: FnPtr,
         pub(super) CmdCopyAccelerationStructureNV: FnPtr,
         pub(super) CmdCopyBuffer: FnPtr,
         pub(super) CmdCopyBufferToImage: FnPtr,
         pub(super) CmdCopyImage: FnPtr,
         pub(super) CmdCopyImageToBuffer: FnPtr,
         pub(super) CmdCopyQueryPoolResults: FnPtr,
         pub(super) CmdDebugMarkerBeginEXT: FnPtr,
         pub(super) CmdDebugMarkerEndEXT: FnPtr,
         pub(super) CmdDebugMarkerInsertEXT: FnPtr,
         pub(super) CmdDispatch: FnPtr,
         pub(super) CmdDispatchBase: FnPtr,
         pub(super) CmdDispatchBaseKHR: FnPtr,
         pub(super) CmdDispatchIndirect: FnPtr,
         pub(super) CmdDraw: FnPtr,
         pub(super) CmdDrawIndexed: FnPtr,
         pub(super) CmdDrawIndexedIndirect: FnPtr,
         pub(super) CmdDrawIndexedIndirectCount: FnPtr,
         pub(super) CmdDrawIndexedIndirectCountAMD: FnPtr,
         pub(super) CmdDrawIndexedIndirectCountKHR: FnPtr,
         pub(super) CmdDrawIndirect: FnPtr,
         pub(super) CmdDrawIndirectByteCountEXT: FnPtr,
         pub(super) CmdDrawIndirectCount: FnPtr,
         pub(super) CmdDrawIndirectCountAMD: FnPtr,
         pub(super) CmdDrawIndirectCountKHR: FnPtr,
         pub(super) CmdDrawMeshTasksIndirectCountNV: FnPtr,
         pub(super) CmdDrawMeshTasksIndirectNV: FnPtr,
         pub(super) CmdDrawMeshTasksNV: FnPtr,
         pub(super) CmdEndConditionalRenderingEXT: FnPtr,
         pub(super) CmdEndDebugUtilsLabelEXT: FnPtr,
         pub(super) CmdEndQuery: FnPtr,
         pub(super) CmdEndQueryIndexedEXT: FnPtr,
         pub(super) CmdEndRenderPass: FnPtr,
         pub(super) CmdEndRenderPass2: FnPtr,
         pub(super) CmdEndRenderPass2KHR: FnPtr,
         pub(super) CmdEndTransformFeedbackEXT: FnPtr,
         pub(super) CmdExecuteCommands: FnPtr,
         pub(super) CmdExecuteGeneratedCommandsNV: FnPtr,
         pub(super) CmdFillBuffer: FnPtr,
         pub(super) CmdInsertDebugUtilsLabelEXT: FnPtr,
         pub(super) CmdNextSubpass: FnPtr,
         pub(super) CmdNextSubpass2: FnPtr,
         pub(super) CmdNextSubpass2KHR: FnPtr,
         pub(super) CmdPipelineBarrier: FnPtr,
         pub(super) CmdPreprocessGeneratedCommandsNV: FnPtr,
         pub(super) CmdPushConstants: FnPtr,
         pub(super) CmdPushDescriptorSetKHR: FnPtr,
         pub(super) CmdPushDescriptorSetWithTemplateKHR: FnPtr,
         pub(super) CmdResetEvent: FnPtr,
         pub(super) CmdResetQueryPool: FnPtr,
         pub(super) CmdResolveImage: FnPtr,
         pub(super) CmdSetBlendConstants: FnPtr,
         pub(super) CmdSetCheckpointNV: FnPtr,
         pub(super) CmdSetCoarseSampleOrderNV: FnPtr,
         pub(super) CmdSetCullModeEXT: FnPtr,
         pub(super) CmdSetDepthBias: FnPtr,
         pub(super) CmdSetDepthBounds: FnPtr,
         pub(super) CmdSetDepthBoundsTestEnableEXT: FnPtr,
         pub(super) CmdSetDepthCompareOpEXT: FnPtr,
         pub(super) CmdSetDepthTestEnableEXT: FnPtr,
         pub(super) CmdSetDepthWriteEnableEXT: FnPtr,
         pub(super) CmdSetDeviceMask: FnPtr,
         pub(super) CmdSetDeviceMaskKHR: FnPtr,
         pub(super) CmdSetDiscardRectangleEXT: FnPtr,
         pub(super) CmdSetEvent: FnPtr,
         pub(super) CmdSetExclusiveScissorNV: FnPtr,
         pub(super) CmdSetFrontFaceEXT: FnPtr,
         pub(super) CmdSetLineStippleEXT: FnPtr,
         pub(super) CmdSetLineWidth: FnPtr,
         pub(super) CmdSetPerformanceMarkerINTEL: FnPtr,
         pub(super) CmdSetPerformanceOverrideINTEL: FnPtr,
         pub(super) CmdSetPerformanceStreamMarkerINTEL: FnPtr,
         pub(super) CmdSetPrimitiveTopologyEXT: FnPtr,
         pub(super) CmdSetSampleLocationsEXT: FnPtr,
         pub(super) CmdSetScissor: FnPtr,
         pub(super) CmdSetScissorWithCountEXT: FnPtr,
         pub(super) CmdSetStencilCompareMask: FnPtr,
         pub(super) CmdSetStencilOpEXT: FnPtr,
         pub(super) CmdSetStencilReference: FnPtr,
         pub(super) CmdSetStencilTestEnableEXT: FnPtr,
         pub(super) CmdSetStencilWriteMask: FnPtr,
         pub(super) CmdSetViewport: FnPtr,
         pub(super) CmdSetViewportShadingRatePaletteNV: FnPtr,
         pub(super) CmdSetViewportWScalingNV: FnPtr,
         pub(super) CmdSetViewportWithCountEXT: FnPtr,
         pub(super) CmdTraceRaysNV: FnPtr,
         pub(super) CmdUpdateBuffer: FnPtr,
         pub(super) CmdWaitEvents: FnPtr,
         pub(super) CmdWriteAccelerationStructuresPropertiesNV: FnPtr,
         pub(super) CmdWriteBufferMarkerAMD: FnPtr,
         pub(super) CmdWriteTimestamp: FnPtr,
         pub(super) CompileDeferredNV: FnPtr,
         pub(super) CreateAccelerationStructureNV: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))] pub(super) CreateAndroidSurfaceKHR: FnPtr,
         pub(super) CreateBuffer: FnPtr,
         pub(super) CreateBufferView: FnPtr,
         pub(super) CreateCommandPool: FnPtr,
         pub(super) CreateComputePipelines: FnPtr,
         pub(super) CreateDebugReportCallbackEXT: FnPtr,
         pub(super) CreateDebugUtilsMessengerEXT: FnPtr,
         pub(super) CreateDeferredOperationKHR: FnPtr,
         pub(super) CreateDescriptorPool: FnPtr,
         pub(super) CreateDescriptorSetLayout: FnPtr,
         pub(super) CreateDescriptorUpdateTemplate: FnPtr,
         pub(super) CreateDescriptorUpdateTemplateKHR: FnPtr,
         pub(super) CreateDevice: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_DIRECTFB_EXT"))] pub(super) CreateDirectFBSurfaceEXT: FnPtr,
         pub(super) CreateDisplayModeKHR: FnPtr,
         pub(super) CreateDisplayPlaneSurfaceKHR: FnPtr,
         pub(super) CreateEvent: FnPtr,
         pub(super) CreateFence: FnPtr,
         pub(super) CreateFramebuffer: FnPtr,
         pub(super) CreateGraphicsPipelines: FnPtr,
         pub(super) CreateHeadlessSurfaceEXT: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_IOS_MVK"))] pub(super) CreateIOSSurfaceMVK: FnPtr,
         pub(super) CreateImage: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_FUCHSIA"))] pub(super) CreateImagePipeSurfaceFUCHSIA: FnPtr,
         pub(super) CreateImageView: FnPtr,
         pub(super) CreateIndirectCommandsLayoutNV: FnPtr,
         pub(super) CreateInstance: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_MACOS_MVK"))] pub(super) CreateMacOSSurfaceMVK: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_METAL_EXT"))] pub(super) CreateMetalSurfaceEXT: FnPtr,
         pub(super) CreatePipelineCache: FnPtr,
         pub(super) CreatePipelineLayout: FnPtr,
         pub(super) CreatePrivateDataSlotEXT: FnPtr,
         pub(super) CreateQueryPool: FnPtr,
         pub(super) CreateRayTracingPipelinesNV: FnPtr,
         pub(super) CreateRenderPass: FnPtr,
         pub(super) CreateRenderPass2: FnPtr,
         pub(super) CreateRenderPass2KHR: FnPtr,
         pub(super) CreateSampler: FnPtr,
         pub(super) CreateSamplerYcbcrConversion: FnPtr,
         pub(super) CreateSamplerYcbcrConversionKHR: FnPtr,
         pub(super) CreateSemaphore: FnPtr,
         pub(super) CreateShaderModule: FnPtr,
         pub(super) CreateSharedSwapchainsKHR: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_GGP"))] pub(super) CreateStreamDescriptorSurfaceGGP: FnPtr,
         pub(super) CreateSwapchainKHR: FnPtr,
         pub(super) CreateValidationCacheEXT: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_VI_NN"))] pub(super) CreateViSurfaceNN: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_WAYLAND_KHR"))] pub(super) CreateWaylandSurfaceKHR: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] pub(super) CreateWin32SurfaceKHR: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_XCB_KHR"))] pub(super) CreateXcbSurfaceKHR: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_XLIB_KHR"))] pub(super) CreateXlibSurfaceKHR: FnPtr,
         pub(super) DebugMarkerSetObjectNameEXT: FnPtr,
         pub(super) DebugMarkerSetObjectTagEXT: FnPtr,
         pub(super) DebugReportMessageEXT: FnPtr,
         pub(super) DeferredOperationJoinKHR: FnPtr,
         pub(super) DestroyAccelerationStructureNV: FnPtr,
         pub(super) DestroyBuffer: FnPtr,
         pub(super) DestroyBufferView: FnPtr,
         pub(super) DestroyCommandPool: FnPtr,
         pub(super) DestroyDebugReportCallbackEXT: FnPtr,
         pub(super) DestroyDebugUtilsMessengerEXT: FnPtr,
         pub(super) DestroyDeferredOperationKHR: FnPtr,
         pub(super) DestroyDescriptorPool: FnPtr,
         pub(super) DestroyDescriptorSetLayout: FnPtr,
         pub(super) DestroyDescriptorUpdateTemplate: FnPtr,
         pub(super) DestroyDescriptorUpdateTemplateKHR: FnPtr,
         pub(super) DestroyDevice: FnPtr,
         pub(super) DestroyEvent: FnPtr,
         pub(super) DestroyFence: FnPtr,
         pub(super) DestroyFramebuffer: FnPtr,
         pub(super) DestroyImage: FnPtr,
         pub(super) DestroyImageView: FnPtr,
         pub(super) DestroyIndirectCommandsLayoutNV: FnPtr,
         pub(super) DestroyInstance: FnPtr,
         pub(super) DestroyPipeline: FnPtr,
         pub(super) DestroyPipelineCache: FnPtr,
         pub(super) DestroyPipelineLayout: FnPtr,
         pub(super) DestroyPrivateDataSlotEXT: FnPtr,
         pub(super) DestroyQueryPool: FnPtr,
         pub(super) DestroyRenderPass: FnPtr,
         pub(super) DestroySampler: FnPtr,
         pub(super) DestroySamplerYcbcrConversion: FnPtr,
         pub(super) DestroySamplerYcbcrConversionKHR: FnPtr,
         pub(super) DestroySemaphore: FnPtr,
         pub(super) DestroyShaderModule: FnPtr,
         pub(super) DestroySurfaceKHR: FnPtr,
         pub(super) DestroySwapchainKHR: FnPtr,
         pub(super) DestroyValidationCacheEXT: FnPtr,
         pub(super) DeviceWaitIdle: FnPtr,
         pub(super) DisplayPowerControlEXT: FnPtr,
         pub(super) EndCommandBuffer: FnPtr,
         pub(super) EnumerateDeviceExtensionProperties: FnPtr,
         pub(super) EnumerateDeviceLayerProperties: FnPtr,
         pub(super) EnumerateInstanceExtensionProperties: FnPtr,
         pub(super) EnumerateInstanceLayerProperties: FnPtr,
         pub(super) EnumerateInstanceVersion: FnPtr,
         pub(super) EnumeratePhysicalDeviceGroups: FnPtr,
         pub(super) EnumeratePhysicalDeviceGroupsKHR: FnPtr,
         pub(super) EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR: FnPtr,
         pub(super) EnumeratePhysicalDevices: FnPtr,
         pub(super) FlushMappedMemoryRanges: FnPtr,
         pub(super) FreeCommandBuffers: FnPtr,
         pub(super) FreeDescriptorSets: FnPtr,
         pub(super) FreeMemory: FnPtr,
         pub(super) GetAccelerationStructureHandleNV: FnPtr,
         pub(super) GetAccelerationStructureMemoryRequirementsNV: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))] pub(super) GetAndroidHardwareBufferPropertiesANDROID: FnPtr,
         pub(super) GetBufferDeviceAddress: FnPtr,
         pub(super) GetBufferDeviceAddressEXT: FnPtr,
         pub(super) GetBufferDeviceAddressKHR: FnPtr,
         pub(super) GetBufferMemoryRequirements: FnPtr,
         pub(super) GetBufferMemoryRequirements2: FnPtr,
         pub(super) GetBufferMemoryRequirements2KHR: FnPtr,
         pub(super) GetBufferOpaqueCaptureAddress: FnPtr,
         pub(super) GetBufferOpaqueCaptureAddressKHR: FnPtr,
         pub(super) GetCalibratedTimestampsEXT: FnPtr,
         pub(super) GetDeferredOperationMaxConcurrencyKHR: FnPtr,
         pub(super) GetDeferredOperationResultKHR: FnPtr,
         pub(super) GetDescriptorSetLayoutSupport: FnPtr,
         pub(super) GetDescriptorSetLayoutSupportKHR: FnPtr,
         pub(super) GetDeviceGroupPeerMemoryFeatures: FnPtr,
         pub(super) GetDeviceGroupPeerMemoryFeaturesKHR: FnPtr,
         pub(super) GetDeviceGroupPresentCapabilitiesKHR: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] pub(super) GetDeviceGroupSurfacePresentModes2EXT: FnPtr,
         pub(super) GetDeviceGroupSurfacePresentModesKHR: FnPtr,
         pub(super) GetDeviceMemoryCommitment: FnPtr,
         pub(super) GetDeviceMemoryOpaqueCaptureAddress: FnPtr,
         pub(super) GetDeviceMemoryOpaqueCaptureAddressKHR: FnPtr,
         pub(super) GetDeviceProcAddr: FnPtr,
         pub(super) GetDeviceQueue: FnPtr,
         pub(super) GetDeviceQueue2: FnPtr,
         pub(super) GetDisplayModeProperties2KHR: FnPtr,
         pub(super) GetDisplayModePropertiesKHR: FnPtr,
         pub(super) GetDisplayPlaneCapabilities2KHR: FnPtr,
         pub(super) GetDisplayPlaneCapabilitiesKHR: FnPtr,
         pub(super) GetDisplayPlaneSupportedDisplaysKHR: FnPtr,
         pub(super) GetEventStatus: FnPtr,
         pub(super) GetFenceFdKHR: FnPtr,
         pub(super) GetFenceStatus: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] pub(super) GetFenceWin32HandleKHR: FnPtr,
         pub(super) GetGeneratedCommandsMemoryRequirementsNV: FnPtr,
         pub(super) GetImageDrmFormatModifierPropertiesEXT: FnPtr,
         pub(super) GetImageMemoryRequirements: FnPtr,
         pub(super) GetImageMemoryRequirements2: FnPtr,
         pub(super) GetImageMemoryRequirements2KHR: FnPtr,
         pub(super) GetImageSparseMemoryRequirements: FnPtr,
         pub(super) GetImageSparseMemoryRequirements2: FnPtr,
         pub(super) GetImageSparseMemoryRequirements2KHR: FnPtr,
         pub(super) GetImageSubresourceLayout: FnPtr,
         pub(super) GetImageViewAddressNVX: FnPtr,
         pub(super) GetImageViewHandleNVX: FnPtr,
         pub(super) GetInstanceProcAddr: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))] pub(super) GetMemoryAndroidHardwareBufferANDROID: FnPtr,
         pub(super) GetMemoryFdKHR: FnPtr,
         pub(super) GetMemoryFdPropertiesKHR: FnPtr,
         pub(super) GetMemoryHostPointerPropertiesEXT: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] pub(super) GetMemoryWin32HandleKHR: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] pub(super) GetMemoryWin32HandleNV: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] pub(super) GetMemoryWin32HandlePropertiesKHR: FnPtr,
         pub(super) GetPastPresentationTimingGOOGLE: FnPtr,
         pub(super) GetPerformanceParameterINTEL: FnPtr,
         pub(super) GetPhysicalDeviceCalibrateableTimeDomainsEXT: FnPtr,
         pub(super) GetPhysicalDeviceCooperativeMatrixPropertiesNV: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_DIRECTFB_EXT"))] pub(super) GetPhysicalDeviceDirectFBPresentationSupportEXT: FnPtr,
         pub(super) GetPhysicalDeviceDisplayPlaneProperties2KHR: FnPtr,
         pub(super) GetPhysicalDeviceDisplayPlanePropertiesKHR: FnPtr,
         pub(super) GetPhysicalDeviceDisplayProperties2KHR: FnPtr,
         pub(super) GetPhysicalDeviceDisplayPropertiesKHR: FnPtr,
         pub(super) GetPhysicalDeviceExternalBufferProperties: FnPtr,
         pub(super) GetPhysicalDeviceExternalBufferPropertiesKHR: FnPtr,
         pub(super) GetPhysicalDeviceExternalFenceProperties: FnPtr,
         pub(super) GetPhysicalDeviceExternalFencePropertiesKHR: FnPtr,
         pub(super) GetPhysicalDeviceExternalImageFormatPropertiesNV: FnPtr,
         pub(super) GetPhysicalDeviceExternalSemaphoreProperties: FnPtr,
         pub(super) GetPhysicalDeviceExternalSemaphorePropertiesKHR: FnPtr,
         pub(super) GetPhysicalDeviceFeatures: FnPtr,
         pub(super) GetPhysicalDeviceFeatures2: FnPtr,
         pub(super) GetPhysicalDeviceFeatures2KHR: FnPtr,
         pub(super) GetPhysicalDeviceFormatProperties: FnPtr,
         pub(super) GetPhysicalDeviceFormatProperties2: FnPtr,
         pub(super) GetPhysicalDeviceFormatProperties2KHR: FnPtr,
         pub(super) GetPhysicalDeviceImageFormatProperties: FnPtr,
         pub(super) GetPhysicalDeviceImageFormatProperties2: FnPtr,
         pub(super) GetPhysicalDeviceImageFormatProperties2KHR: FnPtr,
         pub(super) GetPhysicalDeviceMemoryProperties: FnPtr,
         pub(super) GetPhysicalDeviceMemoryProperties2: FnPtr,
         pub(super) GetPhysicalDeviceMemoryProperties2KHR: FnPtr,
         pub(super) GetPhysicalDeviceMultisamplePropertiesEXT: FnPtr,
         pub(super) GetPhysicalDevicePresentRectanglesKHR: FnPtr,
         pub(super) GetPhysicalDeviceProperties: FnPtr,
         pub(super) GetPhysicalDeviceProperties2: FnPtr,
         pub(super) GetPhysicalDeviceProperties2KHR: FnPtr,
         pub(super) GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR: FnPtr,
         pub(super) GetPhysicalDeviceQueueFamilyProperties: FnPtr,
         pub(super) GetPhysicalDeviceQueueFamilyProperties2: FnPtr,
         pub(super) GetPhysicalDeviceQueueFamilyProperties2KHR: FnPtr,
         pub(super) GetPhysicalDeviceSparseImageFormatProperties: FnPtr,
         pub(super) GetPhysicalDeviceSparseImageFormatProperties2: FnPtr,
         pub(super) GetPhysicalDeviceSparseImageFormatProperties2KHR: FnPtr,
         pub(super) GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV: FnPtr,
         pub(super) GetPhysicalDeviceSurfaceCapabilities2EXT: FnPtr,
         pub(super) GetPhysicalDeviceSurfaceCapabilities2KHR: FnPtr,
         pub(super) GetPhysicalDeviceSurfaceCapabilitiesKHR: FnPtr,
         pub(super) GetPhysicalDeviceSurfaceFormats2KHR: FnPtr,
         pub(super) GetPhysicalDeviceSurfaceFormatsKHR: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] pub(super) GetPhysicalDeviceSurfacePresentModes2EXT: FnPtr,
         pub(super) GetPhysicalDeviceSurfacePresentModesKHR: FnPtr,
         pub(super) GetPhysicalDeviceSurfaceSupportKHR: FnPtr,
         pub(super) GetPhysicalDeviceToolPropertiesEXT: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_WAYLAND_KHR"))] pub(super) GetPhysicalDeviceWaylandPresentationSupportKHR: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] pub(super) GetPhysicalDeviceWin32PresentationSupportKHR: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_XCB_KHR"))] pub(super) GetPhysicalDeviceXcbPresentationSupportKHR: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_XLIB_KHR"))] pub(super) GetPhysicalDeviceXlibPresentationSupportKHR: FnPtr,
         pub(super) GetPipelineCacheData: FnPtr,
         pub(super) GetPipelineExecutableInternalRepresentationsKHR: FnPtr,
         pub(super) GetPipelineExecutablePropertiesKHR: FnPtr,
         pub(super) GetPipelineExecutableStatisticsKHR: FnPtr,
         pub(super) GetPrivateDataEXT: FnPtr,
         pub(super) GetQueryPoolResults: FnPtr,
         pub(super) GetQueueCheckpointDataNV: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_XLIB_XRANDR_EXT"))] pub(super) GetRandROutputDisplayEXT: FnPtr,
         pub(super) GetRayTracingShaderGroupHandlesNV: FnPtr,
         pub(super) GetRefreshCycleDurationGOOGLE: FnPtr,
         pub(super) GetRenderAreaGranularity: FnPtr,
         pub(super) GetSemaphoreCounterValue: FnPtr,
         pub(super) GetSemaphoreCounterValueKHR: FnPtr,
         pub(super) GetSemaphoreFdKHR: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] pub(super) GetSemaphoreWin32HandleKHR: FnPtr,
         pub(super) GetShaderInfoAMD: FnPtr,
         pub(super) GetSwapchainCounterEXT: FnPtr,
         pub(super) GetSwapchainImagesKHR: FnPtr,
         pub(super) GetSwapchainStatusKHR: FnPtr,
         pub(super) GetValidationCacheDataEXT: FnPtr,
         pub(super) ImportFenceFdKHR: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] pub(super) ImportFenceWin32HandleKHR: FnPtr,
         pub(super) ImportSemaphoreFdKHR: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] pub(super) ImportSemaphoreWin32HandleKHR: FnPtr,
         pub(super) InitializePerformanceApiINTEL: FnPtr,
         pub(super) InvalidateMappedMemoryRanges: FnPtr,
         pub(super) MapMemory: FnPtr,
         pub(super) MergePipelineCaches: FnPtr,
         pub(super) MergeValidationCachesEXT: FnPtr,
         pub(super) QueueBeginDebugUtilsLabelEXT: FnPtr,
         pub(super) QueueBindSparse: FnPtr,
         pub(super) QueueEndDebugUtilsLabelEXT: FnPtr,
         pub(super) QueueInsertDebugUtilsLabelEXT: FnPtr,
         pub(super) QueuePresentKHR: FnPtr,
         pub(super) QueueSetPerformanceConfigurationINTEL: FnPtr,
         pub(super) QueueSubmit: FnPtr,
         pub(super) QueueWaitIdle: FnPtr,
         pub(super) RegisterDeviceEventEXT: FnPtr,
         pub(super) RegisterDisplayEventEXT: FnPtr,
         pub(super) ReleaseDisplayEXT: FnPtr,
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] pub(super) ReleaseFullScreenExclusiveModeEXT: FnPtr,
         pub(super) ReleasePerformanceConfigurationINTEL: FnPtr,
         pub(super) ReleaseProfilingLockKHR: FnPtr,
         pub(super) ResetCommandBuffer: FnPtr,
         pub(super) ResetCommandPool: FnPtr,
         pub(super) ResetDescriptorPool: FnPtr,
         pub(super) ResetEvent: FnPtr,
         pub(super) ResetFences: FnPtr,
         pub(super) ResetQueryPool: FnPtr,
         pub(super) ResetQueryPoolEXT: FnPtr,
         pub(super) SetDebugUtilsObjectNameEXT: FnPtr,
         pub(super) SetDebugUtilsObjectTagEXT: FnPtr,
         pub(super) SetEvent: FnPtr,
         pub(super) SetHdrMetadataEXT: FnPtr,
         pub(super) SetLocalDimmingAMD: FnPtr,
         pub(super) SetPrivateDataEXT: FnPtr,
         pub(super) SignalSemaphore: FnPtr,
         pub(super) SignalSemaphoreKHR: FnPtr,
         pub(super) SubmitDebugUtilsMessageEXT: FnPtr,
         pub(super) TrimCommandPool: FnPtr,
         pub(super) TrimCommandPoolKHR: FnPtr,
         pub(super) UninitializePerformanceApiINTEL: FnPtr,
         pub(super) UnmapMemory: FnPtr,
         pub(super) UpdateDescriptorSetWithTemplate: FnPtr,
         pub(super) UpdateDescriptorSetWithTemplateKHR: FnPtr,
         pub(super) UpdateDescriptorSets: FnPtr,
         pub(super) WaitForFences: FnPtr,
         pub(super) WaitSemaphores: FnPtr,
         pub(super) WaitSemaphoresKHR: FnPtr,
    }

    pub type Vk = Vulkan;

    impl Vulkan {

    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] func!(AcquireFullScreenExclusiveModeEXT, VkResult, device: VkDevice, swapchain: VkSwapchainKHR);
     func!(AcquireNextImage2KHR, VkResult, device: VkDevice, pAcquireInfo: *const VkAcquireNextImageInfoKHR, pImageIndex: *mut u32);
     func!(AcquireNextImageKHR, VkResult, device: VkDevice, swapchain: VkSwapchainKHR, timeout: u64, semaphore: VkSemaphore, fence: VkFence, pImageIndex: *mut u32);
     func!(AcquirePerformanceConfigurationINTEL, VkResult, device: VkDevice, pAcquireInfo: *const VkPerformanceConfigurationAcquireInfoINTEL, pConfiguration: *mut VkPerformanceConfigurationINTEL);
     func!(AcquireProfilingLockKHR, VkResult, device: VkDevice, pInfo: *const VkAcquireProfilingLockInfoKHR);
    #[cfg(any(feature = "VK_USE_PLATFORM_XLIB_XRANDR_EXT"))] func!(AcquireXlibDisplayEXT, VkResult, physicalDevice: VkPhysicalDevice, dpy: *mut Display, display: VkDisplayKHR);
     func!(AllocateCommandBuffers, VkResult, device: VkDevice, pAllocateInfo: *const VkCommandBufferAllocateInfo, pCommandBuffers: *mut VkCommandBuffer);
     func!(AllocateDescriptorSets, VkResult, device: VkDevice, pAllocateInfo: *const VkDescriptorSetAllocateInfo, pDescriptorSets: *mut VkDescriptorSet);
     func!(AllocateMemory, VkResult, device: VkDevice, pAllocateInfo: *const VkMemoryAllocateInfo, pAllocator: *const VkAllocationCallbacks, pMemory: *mut VkDeviceMemory);
     func!(BeginCommandBuffer, VkResult, commandBuffer: VkCommandBuffer, pBeginInfo: *const VkCommandBufferBeginInfo);
     func!(BindAccelerationStructureMemoryNV, VkResult, device: VkDevice, bindInfoCount: u32, pBindInfos: *const VkBindAccelerationStructureMemoryInfoNV);
     func!(BindBufferMemory, VkResult, device: VkDevice, buffer: VkBuffer, memory: VkDeviceMemory, memoryOffset: VkDeviceSize);
     func!(BindBufferMemory2, VkResult, device: VkDevice, bindInfoCount: u32, pBindInfos: *const VkBindBufferMemoryInfo);
     func!(BindBufferMemory2KHR, VkResult, device: VkDevice, bindInfoCount: u32, pBindInfos: *const VkBindBufferMemoryInfo);
     func!(BindImageMemory, VkResult, device: VkDevice, image: VkImage, memory: VkDeviceMemory, memoryOffset: VkDeviceSize);
     func!(BindImageMemory2, VkResult, device: VkDevice, bindInfoCount: u32, pBindInfos: *const VkBindImageMemoryInfo);
     func!(BindImageMemory2KHR, VkResult, device: VkDevice, bindInfoCount: u32, pBindInfos: *const VkBindImageMemoryInfo);
     func!(CmdBeginConditionalRenderingEXT, (), commandBuffer: VkCommandBuffer, pConditionalRenderingBegin: *const VkConditionalRenderingBeginInfoEXT);
     func!(CmdBeginDebugUtilsLabelEXT, (), commandBuffer: VkCommandBuffer, pLabelInfo: *const VkDebugUtilsLabelEXT);
     func!(CmdBeginQuery, (), commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32, flags: VkQueryControlFlags);
     func!(CmdBeginQueryIndexedEXT, (), commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32, flags: VkQueryControlFlags, index: u32);
     func!(CmdBeginRenderPass, (), commandBuffer: VkCommandBuffer, pRenderPassBegin: *const VkRenderPassBeginInfo, contents: VkSubpassContents);
     func!(CmdBeginRenderPass2, (), commandBuffer: VkCommandBuffer, pRenderPassBegin: *const VkRenderPassBeginInfo, pSubpassBeginInfo: *const VkSubpassBeginInfo);
     func!(CmdBeginRenderPass2KHR, (), commandBuffer: VkCommandBuffer, pRenderPassBegin: *const VkRenderPassBeginInfo, pSubpassBeginInfo: *const VkSubpassBeginInfo);
     func!(CmdBeginTransformFeedbackEXT, (), commandBuffer: VkCommandBuffer, firstCounterBuffer: u32, counterBufferCount: u32, pCounterBuffers: *const VkBuffer, pCounterBufferOffsets: *const VkDeviceSize);
     func!(CmdBindDescriptorSets, (), commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, firstSet: u32, descriptorSetCount: u32, pDescriptorSets: *const VkDescriptorSet, dynamicOffsetCount: u32, pDynamicOffsets: *const u32);
     func!(CmdBindIndexBuffer, (), commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, indexType: VkIndexType);
     func!(CmdBindPipeline, (), commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline);
     func!(CmdBindPipelineShaderGroupNV, (), commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline, groupIndex: u32);
     func!(CmdBindShadingRateImageNV, (), commandBuffer: VkCommandBuffer, imageView: VkImageView, imageLayout: VkImageLayout);
     func!(CmdBindTransformFeedbackBuffersEXT, (), commandBuffer: VkCommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: *const VkBuffer, pOffsets: *const VkDeviceSize, pSizes: *const VkDeviceSize);
     func!(CmdBindVertexBuffers, (), commandBuffer: VkCommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: *const VkBuffer, pOffsets: *const VkDeviceSize);
     func!(CmdBindVertexBuffers2EXT, (), commandBuffer: VkCommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: *const VkBuffer, pOffsets: *const VkDeviceSize, pSizes: *const VkDeviceSize, pStrides: *const VkDeviceSize);
     func!(CmdBlitImage, (), commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: *const VkImageBlit, filter: VkFilter);
     func!(CmdBuildAccelerationStructureNV, (), commandBuffer: VkCommandBuffer, pInfo: *const VkAccelerationStructureInfoNV, instanceData: VkBuffer, instanceOffset: VkDeviceSize, update: VkBool32, dst: VkAccelerationStructureNV, src: VkAccelerationStructureNV, scratch: VkBuffer, scratchOffset: VkDeviceSize);
     func!(CmdClearAttachments, (), commandBuffer: VkCommandBuffer, attachmentCount: u32, pAttachments: *const VkClearAttachment, rectCount: u32, pRects: *const VkClearRect);
     func!(CmdClearColorImage, (), commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pColor: *const VkClearColorValue, rangeCount: u32, pRanges: *const VkImageSubresourceRange);
     func!(CmdClearDepthStencilImage, (), commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pDepthStencil: *const VkClearDepthStencilValue, rangeCount: u32, pRanges: *const VkImageSubresourceRange);
     func!(CmdCopyAccelerationStructureNV, (), commandBuffer: VkCommandBuffer, dst: VkAccelerationStructureNV, src: VkAccelerationStructureNV, mode: VkCopyAccelerationStructureModeKHR);
     func!(CmdCopyBuffer, (), commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstBuffer: VkBuffer, regionCount: u32, pRegions: *const VkBufferCopy);
     func!(CmdCopyBufferToImage, (), commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: *const VkBufferImageCopy);
     func!(CmdCopyImage, (), commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: *const VkImageCopy);
     func!(CmdCopyImageToBuffer, (), commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstBuffer: VkBuffer, regionCount: u32, pRegions: *const VkBufferImageCopy);
     func!(CmdCopyQueryPoolResults, (), commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, stride: VkDeviceSize, flags: VkQueryResultFlags);
     func!(CmdDebugMarkerBeginEXT, (), commandBuffer: VkCommandBuffer, pMarkerInfo: *const VkDebugMarkerMarkerInfoEXT);
     func!(CmdDebugMarkerEndEXT, (), commandBuffer: VkCommandBuffer);
     func!(CmdDebugMarkerInsertEXT, (), commandBuffer: VkCommandBuffer, pMarkerInfo: *const VkDebugMarkerMarkerInfoEXT);
     func!(CmdDispatch, (), commandBuffer: VkCommandBuffer, groupCountX: u32, groupCountY: u32, groupCountZ: u32);
     func!(CmdDispatchBase, (), commandBuffer: VkCommandBuffer, baseGroupX: u32, baseGroupY: u32, baseGroupZ: u32, groupCountX: u32, groupCountY: u32, groupCountZ: u32);
     func!(CmdDispatchBaseKHR, (), commandBuffer: VkCommandBuffer, baseGroupX: u32, baseGroupY: u32, baseGroupZ: u32, groupCountX: u32, groupCountY: u32, groupCountZ: u32);
     func!(CmdDispatchIndirect, (), commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize);
     func!(CmdDraw, (), commandBuffer: VkCommandBuffer, vertexCount: u32, instanceCount: u32, firstVertex: u32, firstInstance: u32);
     func!(CmdDrawIndexed, (), commandBuffer: VkCommandBuffer, indexCount: u32, instanceCount: u32, firstIndex: u32, vertexOffset: i32, firstInstance: u32);
     func!(CmdDrawIndexedIndirect, (), commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32);
     func!(CmdDrawIndexedIndirectCount, (), commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32);
     func!(CmdDrawIndexedIndirectCountAMD, (), commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32);
     func!(CmdDrawIndexedIndirectCountKHR, (), commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32);
     func!(CmdDrawIndirect, (), commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32);
     func!(CmdDrawIndirectByteCountEXT, (), commandBuffer: VkCommandBuffer, instanceCount: u32, firstInstance: u32, counterBuffer: VkBuffer, counterBufferOffset: VkDeviceSize, counterOffset: u32, vertexStride: u32);
     func!(CmdDrawIndirectCount, (), commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32);
     func!(CmdDrawIndirectCountAMD, (), commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32);
     func!(CmdDrawIndirectCountKHR, (), commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32);
     func!(CmdDrawMeshTasksIndirectCountNV, (), commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32);
     func!(CmdDrawMeshTasksIndirectNV, (), commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32);
     func!(CmdDrawMeshTasksNV, (), commandBuffer: VkCommandBuffer, taskCount: u32, firstTask: u32);
     func!(CmdEndConditionalRenderingEXT, (), commandBuffer: VkCommandBuffer);
     func!(CmdEndDebugUtilsLabelEXT, (), commandBuffer: VkCommandBuffer);
     func!(CmdEndQuery, (), commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32);
     func!(CmdEndQueryIndexedEXT, (), commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32, index: u32);
     func!(CmdEndRenderPass, (), commandBuffer: VkCommandBuffer);
     func!(CmdEndRenderPass2, (), commandBuffer: VkCommandBuffer, pSubpassEndInfo: *const VkSubpassEndInfo);
     func!(CmdEndRenderPass2KHR, (), commandBuffer: VkCommandBuffer, pSubpassEndInfo: *const VkSubpassEndInfo);
     func!(CmdEndTransformFeedbackEXT, (), commandBuffer: VkCommandBuffer, firstCounterBuffer: u32, counterBufferCount: u32, pCounterBuffers: *const VkBuffer, pCounterBufferOffsets: *const VkDeviceSize);
     func!(CmdExecuteCommands, (), commandBuffer: VkCommandBuffer, commandBufferCount: u32, pCommandBuffers: *const VkCommandBuffer);
     func!(CmdExecuteGeneratedCommandsNV, (), commandBuffer: VkCommandBuffer, isPreprocessed: VkBool32, pGeneratedCommandsInfo: *const VkGeneratedCommandsInfoNV);
     func!(CmdFillBuffer, (), commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, size: VkDeviceSize, data: u32);
     func!(CmdInsertDebugUtilsLabelEXT, (), commandBuffer: VkCommandBuffer, pLabelInfo: *const VkDebugUtilsLabelEXT);
     func!(CmdNextSubpass, (), commandBuffer: VkCommandBuffer, contents: VkSubpassContents);
     func!(CmdNextSubpass2, (), commandBuffer: VkCommandBuffer, pSubpassBeginInfo: *const VkSubpassBeginInfo, pSubpassEndInfo: *const VkSubpassEndInfo);
     func!(CmdNextSubpass2KHR, (), commandBuffer: VkCommandBuffer, pSubpassBeginInfo: *const VkSubpassBeginInfo, pSubpassEndInfo: *const VkSubpassEndInfo);
     func!(CmdPipelineBarrier, (), commandBuffer: VkCommandBuffer, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, dependencyFlags: VkDependencyFlags, memoryBarrierCount: u32, pMemoryBarriers: *const VkMemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: *const VkBufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: *const VkImageMemoryBarrier);
     func!(CmdPreprocessGeneratedCommandsNV, (), commandBuffer: VkCommandBuffer, pGeneratedCommandsInfo: *const VkGeneratedCommandsInfoNV);
     func!(CmdPushConstants, (), commandBuffer: VkCommandBuffer, layout: VkPipelineLayout, stageFlags: VkShaderStageFlags, offset: u32, size: u32, pValues: *const c_void);
     func!(CmdPushDescriptorSetKHR, (), commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, set: u32, descriptorWriteCount: u32, pDescriptorWrites: *const VkWriteDescriptorSet);
     func!(CmdPushDescriptorSetWithTemplateKHR, (), commandBuffer: VkCommandBuffer, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, layout: VkPipelineLayout, set: u32, pData: *const c_void);
     func!(CmdResetEvent, (), commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags);
     func!(CmdResetQueryPool, (), commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32);
     func!(CmdResolveImage, (), commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: *const VkImageResolve);
     func!(CmdSetBlendConstants, (), commandBuffer: VkCommandBuffer, blendConstants: [c_float;4]);
     func!(CmdSetCheckpointNV, (), commandBuffer: VkCommandBuffer, pCheckpointMarker: *const c_void);
     func!(CmdSetCoarseSampleOrderNV, (), commandBuffer: VkCommandBuffer, sampleOrderType: VkCoarseSampleOrderTypeNV, customSampleOrderCount: u32, pCustomSampleOrders: *const VkCoarseSampleOrderCustomNV);
     func!(CmdSetCullModeEXT, (), commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags);
     func!(CmdSetDepthBias, (), commandBuffer: VkCommandBuffer, depthBiasConstantFactor: c_float, depthBiasClamp: c_float, depthBiasSlopeFactor: c_float);
     func!(CmdSetDepthBounds, (), commandBuffer: VkCommandBuffer, minDepthBounds: c_float, maxDepthBounds: c_float);
     func!(CmdSetDepthBoundsTestEnableEXT, (), commandBuffer: VkCommandBuffer, depthBoundsTestEnable: VkBool32);
     func!(CmdSetDepthCompareOpEXT, (), commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp);
     func!(CmdSetDepthTestEnableEXT, (), commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32);
     func!(CmdSetDepthWriteEnableEXT, (), commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32);
     func!(CmdSetDeviceMask, (), commandBuffer: VkCommandBuffer, deviceMask: u32);
     func!(CmdSetDeviceMaskKHR, (), commandBuffer: VkCommandBuffer, deviceMask: u32);
     func!(CmdSetDiscardRectangleEXT, (), commandBuffer: VkCommandBuffer, firstDiscardRectangle: u32, discardRectangleCount: u32, pDiscardRectangles: *const VkRect2D);
     func!(CmdSetEvent, (), commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags);
     func!(CmdSetExclusiveScissorNV, (), commandBuffer: VkCommandBuffer, firstExclusiveScissor: u32, exclusiveScissorCount: u32, pExclusiveScissors: *const VkRect2D);
     func!(CmdSetFrontFaceEXT, (), commandBuffer: VkCommandBuffer, frontFace: VkFrontFace);
     func!(CmdSetLineStippleEXT, (), commandBuffer: VkCommandBuffer, lineStippleFactor: u32, lineStipplePattern: u16);
     func!(CmdSetLineWidth, (), commandBuffer: VkCommandBuffer, lineWidth: c_float);
     func!(CmdSetPerformanceMarkerINTEL, VkResult, commandBuffer: VkCommandBuffer, pMarkerInfo: *const VkPerformanceMarkerInfoINTEL);
     func!(CmdSetPerformanceOverrideINTEL, VkResult, commandBuffer: VkCommandBuffer, pOverrideInfo: *const VkPerformanceOverrideInfoINTEL);
     func!(CmdSetPerformanceStreamMarkerINTEL, VkResult, commandBuffer: VkCommandBuffer, pMarkerInfo: *const VkPerformanceStreamMarkerInfoINTEL);
     func!(CmdSetPrimitiveTopologyEXT, (), commandBuffer: VkCommandBuffer, primitiveTopology: VkPrimitiveTopology);
     func!(CmdSetSampleLocationsEXT, (), commandBuffer: VkCommandBuffer, pSampleLocationsInfo: *const VkSampleLocationsInfoEXT);
     func!(CmdSetScissor, (), commandBuffer: VkCommandBuffer, firstScissor: u32, scissorCount: u32, pScissors: *const VkRect2D);
     func!(CmdSetScissorWithCountEXT, (), commandBuffer: VkCommandBuffer, scissorCount: u32, pScissors: *const VkRect2D);
     func!(CmdSetStencilCompareMask, (), commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, compareMask: u32);
     func!(CmdSetStencilOpEXT, (), commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, failOp: VkStencilOp, passOp: VkStencilOp, depthFailOp: VkStencilOp, compareOp: VkCompareOp);
     func!(CmdSetStencilReference, (), commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, reference: u32);
     func!(CmdSetStencilTestEnableEXT, (), commandBuffer: VkCommandBuffer, stencilTestEnable: VkBool32);
     func!(CmdSetStencilWriteMask, (), commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, writeMask: u32);
     func!(CmdSetViewport, (), commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pViewports: *const VkViewport);
     func!(CmdSetViewportShadingRatePaletteNV, (), commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pShadingRatePalettes: *const VkShadingRatePaletteNV);
     func!(CmdSetViewportWScalingNV, (), commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pViewportWScalings: *const VkViewportWScalingNV);
     func!(CmdSetViewportWithCountEXT, (), commandBuffer: VkCommandBuffer, viewportCount: u32, pViewports: *const VkViewport);
     func!(CmdTraceRaysNV, (), commandBuffer: VkCommandBuffer, raygenShaderBindingTableBuffer: VkBuffer, raygenShaderBindingOffset: VkDeviceSize, missShaderBindingTableBuffer: VkBuffer, missShaderBindingOffset: VkDeviceSize, missShaderBindingStride: VkDeviceSize, hitShaderBindingTableBuffer: VkBuffer, hitShaderBindingOffset: VkDeviceSize, hitShaderBindingStride: VkDeviceSize, callableShaderBindingTableBuffer: VkBuffer, callableShaderBindingOffset: VkDeviceSize, callableShaderBindingStride: VkDeviceSize, width: u32, height: u32, depth: u32);
     func!(CmdUpdateBuffer, (), commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, dataSize: VkDeviceSize, pData: *const c_void);
     func!(CmdWaitEvents, (), commandBuffer: VkCommandBuffer, eventCount: u32, pEvents: *const VkEvent, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, memoryBarrierCount: u32, pMemoryBarriers: *const VkMemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: *const VkBufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: *const VkImageMemoryBarrier);
     func!(CmdWriteAccelerationStructuresPropertiesNV, (), commandBuffer: VkCommandBuffer, accelerationStructureCount: u32, pAccelerationStructures: *const VkAccelerationStructureNV, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: u32);
     func!(CmdWriteBufferMarkerAMD, (), commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, marker: u32);
     func!(CmdWriteTimestamp, (), commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, queryPool: VkQueryPool, query: u32);
     func!(CompileDeferredNV, VkResult, device: VkDevice, pipeline: VkPipeline, shader: u32);
     func!(CreateAccelerationStructureNV, VkResult, device: VkDevice, pCreateInfo: *const VkAccelerationStructureCreateInfoNV, pAllocator: *const VkAllocationCallbacks, pAccelerationStructure: *mut VkAccelerationStructureNV);
    #[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))] func!(CreateAndroidSurfaceKHR, VkResult, instance: VkInstance, pCreateInfo: *const VkAndroidSurfaceCreateInfoKHR, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR);
     func!(CreateBuffer, VkResult, device: VkDevice, pCreateInfo: *const VkBufferCreateInfo, pAllocator: *const VkAllocationCallbacks, pBuffer: *mut VkBuffer);
     func!(CreateBufferView, VkResult, device: VkDevice, pCreateInfo: *const VkBufferViewCreateInfo, pAllocator: *const VkAllocationCallbacks, pView: *mut VkBufferView);
     func!(CreateCommandPool, VkResult, device: VkDevice, pCreateInfo: *const VkCommandPoolCreateInfo, pAllocator: *const VkAllocationCallbacks, pCommandPool: *mut VkCommandPool);
     func!(CreateComputePipelines, VkResult, device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: *const VkComputePipelineCreateInfo, pAllocator: *const VkAllocationCallbacks, pPipelines: *mut VkPipeline);
     func!(CreateDebugReportCallbackEXT, VkResult, instance: VkInstance, pCreateInfo: *const VkDebugReportCallbackCreateInfoEXT, pAllocator: *const VkAllocationCallbacks, pCallback: *mut VkDebugReportCallbackEXT);
     func!(CreateDebugUtilsMessengerEXT, VkResult, instance: VkInstance, pCreateInfo: *const VkDebugUtilsMessengerCreateInfoEXT, pAllocator: *const VkAllocationCallbacks, pMessenger: *mut VkDebugUtilsMessengerEXT);
     func!(CreateDeferredOperationKHR, VkResult, device: VkDevice, pAllocator: *const VkAllocationCallbacks, pDeferredOperation: *mut VkDeferredOperationKHR);
     func!(CreateDescriptorPool, VkResult, device: VkDevice, pCreateInfo: *const VkDescriptorPoolCreateInfo, pAllocator: *const VkAllocationCallbacks, pDescriptorPool: *mut VkDescriptorPool);
     func!(CreateDescriptorSetLayout, VkResult, device: VkDevice, pCreateInfo: *const VkDescriptorSetLayoutCreateInfo, pAllocator: *const VkAllocationCallbacks, pSetLayout: *mut VkDescriptorSetLayout);
     func!(CreateDescriptorUpdateTemplate, VkResult, device: VkDevice, pCreateInfo: *const VkDescriptorUpdateTemplateCreateInfo, pAllocator: *const VkAllocationCallbacks, pDescriptorUpdateTemplate: *mut VkDescriptorUpdateTemplate);
     func!(CreateDescriptorUpdateTemplateKHR, VkResult, device: VkDevice, pCreateInfo: *const VkDescriptorUpdateTemplateCreateInfo, pAllocator: *const VkAllocationCallbacks, pDescriptorUpdateTemplate: *mut VkDescriptorUpdateTemplate);
     func!(CreateDevice, VkResult, physicalDevice: VkPhysicalDevice, pCreateInfo: *const VkDeviceCreateInfo, pAllocator: *const VkAllocationCallbacks, pDevice: *mut VkDevice);
    #[cfg(any(feature = "VK_USE_PLATFORM_DIRECTFB_EXT"))] func!(CreateDirectFBSurfaceEXT, VkResult, instance: VkInstance, pCreateInfo: *const VkDirectFBSurfaceCreateInfoEXT, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR);
     func!(CreateDisplayModeKHR, VkResult, physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pCreateInfo: *const VkDisplayModeCreateInfoKHR, pAllocator: *const VkAllocationCallbacks, pMode: *mut VkDisplayModeKHR);
     func!(CreateDisplayPlaneSurfaceKHR, VkResult, instance: VkInstance, pCreateInfo: *const VkDisplaySurfaceCreateInfoKHR, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR);
     func!(CreateEvent, VkResult, device: VkDevice, pCreateInfo: *const VkEventCreateInfo, pAllocator: *const VkAllocationCallbacks, pEvent: *mut VkEvent);
     func!(CreateFence, VkResult, device: VkDevice, pCreateInfo: *const VkFenceCreateInfo, pAllocator: *const VkAllocationCallbacks, pFence: *mut VkFence);
     func!(CreateFramebuffer, VkResult, device: VkDevice, pCreateInfo: *const VkFramebufferCreateInfo, pAllocator: *const VkAllocationCallbacks, pFramebuffer: *mut VkFramebuffer);
     func!(CreateGraphicsPipelines, VkResult, device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: *const VkGraphicsPipelineCreateInfo, pAllocator: *const VkAllocationCallbacks, pPipelines: *mut VkPipeline);
     func!(CreateHeadlessSurfaceEXT, VkResult, instance: VkInstance, pCreateInfo: *const VkHeadlessSurfaceCreateInfoEXT, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR);
    #[cfg(any(feature = "VK_USE_PLATFORM_IOS_MVK"))] func!(CreateIOSSurfaceMVK, VkResult, instance: VkInstance, pCreateInfo: *const VkIOSSurfaceCreateInfoMVK, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR);
     func!(CreateImage, VkResult, device: VkDevice, pCreateInfo: *const VkImageCreateInfo, pAllocator: *const VkAllocationCallbacks, pImage: *mut VkImage);
    #[cfg(any(feature = "VK_USE_PLATFORM_FUCHSIA"))] func!(CreateImagePipeSurfaceFUCHSIA, VkResult, instance: VkInstance, pCreateInfo: *const VkImagePipeSurfaceCreateInfoFUCHSIA, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR);
     func!(CreateImageView, VkResult, device: VkDevice, pCreateInfo: *const VkImageViewCreateInfo, pAllocator: *const VkAllocationCallbacks, pView: *mut VkImageView);
     func!(CreateIndirectCommandsLayoutNV, VkResult, device: VkDevice, pCreateInfo: *const VkIndirectCommandsLayoutCreateInfoNV, pAllocator: *const VkAllocationCallbacks, pIndirectCommandsLayout: *mut VkIndirectCommandsLayoutNV);
     func!(CreateInstance, VkResult, pCreateInfo: *const VkInstanceCreateInfo, pAllocator: *const VkAllocationCallbacks, pInstance: *mut VkInstance);
    #[cfg(any(feature = "VK_USE_PLATFORM_MACOS_MVK"))] func!(CreateMacOSSurfaceMVK, VkResult, instance: VkInstance, pCreateInfo: *const VkMacOSSurfaceCreateInfoMVK, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR);
    #[cfg(any(feature = "VK_USE_PLATFORM_METAL_EXT"))] func!(CreateMetalSurfaceEXT, VkResult, instance: VkInstance, pCreateInfo: *const VkMetalSurfaceCreateInfoEXT, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR);
     func!(CreatePipelineCache, VkResult, device: VkDevice, pCreateInfo: *const VkPipelineCacheCreateInfo, pAllocator: *const VkAllocationCallbacks, pPipelineCache: *mut VkPipelineCache);
     func!(CreatePipelineLayout, VkResult, device: VkDevice, pCreateInfo: *const VkPipelineLayoutCreateInfo, pAllocator: *const VkAllocationCallbacks, pPipelineLayout: *mut VkPipelineLayout);
     func!(CreatePrivateDataSlotEXT, VkResult, device: VkDevice, pCreateInfo: *const VkPrivateDataSlotCreateInfo, pAllocator: *const VkAllocationCallbacks, pPrivateDataSlot: *mut VkPrivateDataSlot);
     func!(CreateQueryPool, VkResult, device: VkDevice, pCreateInfo: *const VkQueryPoolCreateInfo, pAllocator: *const VkAllocationCallbacks, pQueryPool: *mut VkQueryPool);
     func!(CreateRayTracingPipelinesNV, VkResult, device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: *const VkRayTracingPipelineCreateInfoNV, pAllocator: *const VkAllocationCallbacks, pPipelines: *mut VkPipeline);
     func!(CreateRenderPass, VkResult, device: VkDevice, pCreateInfo: *const VkRenderPassCreateInfo, pAllocator: *const VkAllocationCallbacks, pRenderPass: *mut VkRenderPass);
     func!(CreateRenderPass2, VkResult, device: VkDevice, pCreateInfo: *const VkRenderPassCreateInfo2, pAllocator: *const VkAllocationCallbacks, pRenderPass: *mut VkRenderPass);
     func!(CreateRenderPass2KHR, VkResult, device: VkDevice, pCreateInfo: *const VkRenderPassCreateInfo2, pAllocator: *const VkAllocationCallbacks, pRenderPass: *mut VkRenderPass);
     func!(CreateSampler, VkResult, device: VkDevice, pCreateInfo: *const VkSamplerCreateInfo, pAllocator: *const VkAllocationCallbacks, pSampler: *mut VkSampler);
     func!(CreateSamplerYcbcrConversion, VkResult, device: VkDevice, pCreateInfo: *const VkSamplerYcbcrConversionCreateInfo, pAllocator: *const VkAllocationCallbacks, pYcbcrConversion: *mut VkSamplerYcbcrConversion);
     func!(CreateSamplerYcbcrConversionKHR, VkResult, device: VkDevice, pCreateInfo: *const VkSamplerYcbcrConversionCreateInfo, pAllocator: *const VkAllocationCallbacks, pYcbcrConversion: *mut VkSamplerYcbcrConversion);
     func!(CreateSemaphore, VkResult, device: VkDevice, pCreateInfo: *const VkSemaphoreCreateInfo, pAllocator: *const VkAllocationCallbacks, pSemaphore: *mut VkSemaphore);
     func!(CreateShaderModule, VkResult, device: VkDevice, pCreateInfo: *const VkShaderModuleCreateInfo, pAllocator: *const VkAllocationCallbacks, pShaderModule: *mut VkShaderModule);
     func!(CreateSharedSwapchainsKHR, VkResult, device: VkDevice, swapchainCount: u32, pCreateInfos: *const VkSwapchainCreateInfoKHR, pAllocator: *const VkAllocationCallbacks, pSwapchains: *mut VkSwapchainKHR);
    #[cfg(any(feature = "VK_USE_PLATFORM_GGP"))] func!(CreateStreamDescriptorSurfaceGGP, VkResult, instance: VkInstance, pCreateInfo: *const VkStreamDescriptorSurfaceCreateInfoGGP, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR);
     func!(CreateSwapchainKHR, VkResult, device: VkDevice, pCreateInfo: *const VkSwapchainCreateInfoKHR, pAllocator: *const VkAllocationCallbacks, pSwapchain: *mut VkSwapchainKHR);
     func!(CreateValidationCacheEXT, VkResult, device: VkDevice, pCreateInfo: *const VkValidationCacheCreateInfoEXT, pAllocator: *const VkAllocationCallbacks, pValidationCache: *mut VkValidationCacheEXT);
    #[cfg(any(feature = "VK_USE_PLATFORM_VI_NN"))] func!(CreateViSurfaceNN, VkResult, instance: VkInstance, pCreateInfo: *const VkViSurfaceCreateInfoNN, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR);
    #[cfg(any(feature = "VK_USE_PLATFORM_WAYLAND_KHR"))] func!(CreateWaylandSurfaceKHR, VkResult, instance: VkInstance, pCreateInfo: *const VkWaylandSurfaceCreateInfoKHR, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR);
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] func!(CreateWin32SurfaceKHR, VkResult, instance: VkInstance, pCreateInfo: *const VkWin32SurfaceCreateInfoKHR, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR);
    #[cfg(any(feature = "VK_USE_PLATFORM_XCB_KHR"))] func!(CreateXcbSurfaceKHR, VkResult, instance: VkInstance, pCreateInfo: *const VkXcbSurfaceCreateInfoKHR, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR);
    #[cfg(any(feature = "VK_USE_PLATFORM_XLIB_KHR"))] func!(CreateXlibSurfaceKHR, VkResult, instance: VkInstance, pCreateInfo: *const VkXlibSurfaceCreateInfoKHR, pAllocator: *const VkAllocationCallbacks, pSurface: *mut VkSurfaceKHR);
     func!(DebugMarkerSetObjectNameEXT, VkResult, device: VkDevice, pNameInfo: *const VkDebugMarkerObjectNameInfoEXT);
     func!(DebugMarkerSetObjectTagEXT, VkResult, device: VkDevice, pTagInfo: *const VkDebugMarkerObjectTagInfoEXT);
     func!(DebugReportMessageEXT, (), instance: VkInstance, flags: VkDebugReportFlagsEXT, objectType: VkDebugReportObjectTypeEXT, object: u64, location: usize, messageCode: i32, pLayerPrefix: *const c_char, pMessage: *const c_char);
     func!(DeferredOperationJoinKHR, VkResult, device: VkDevice, operation: VkDeferredOperationKHR);
     func!(DestroyAccelerationStructureNV, (), device: VkDevice, accelerationStructure: VkAccelerationStructureNV, pAllocator: *const VkAllocationCallbacks);
     func!(DestroyBuffer, (), device: VkDevice, buffer: VkBuffer, pAllocator: *const VkAllocationCallbacks);
     func!(DestroyBufferView, (), device: VkDevice, bufferView: VkBufferView, pAllocator: *const VkAllocationCallbacks);
     func!(DestroyCommandPool, (), device: VkDevice, commandPool: VkCommandPool, pAllocator: *const VkAllocationCallbacks);
     func!(DestroyDebugReportCallbackEXT, (), instance: VkInstance, callback: VkDebugReportCallbackEXT, pAllocator: *const VkAllocationCallbacks);
     func!(DestroyDebugUtilsMessengerEXT, (), instance: VkInstance, messenger: VkDebugUtilsMessengerEXT, pAllocator: *const VkAllocationCallbacks);
     func!(DestroyDeferredOperationKHR, (), device: VkDevice, operation: VkDeferredOperationKHR, pAllocator: *const VkAllocationCallbacks);
     func!(DestroyDescriptorPool, (), device: VkDevice, descriptorPool: VkDescriptorPool, pAllocator: *const VkAllocationCallbacks);
     func!(DestroyDescriptorSetLayout, (), device: VkDevice, descriptorSetLayout: VkDescriptorSetLayout, pAllocator: *const VkAllocationCallbacks);
     func!(DestroyDescriptorUpdateTemplate, (), device: VkDevice, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pAllocator: *const VkAllocationCallbacks);
     func!(DestroyDescriptorUpdateTemplateKHR, (), device: VkDevice, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pAllocator: *const VkAllocationCallbacks);
     func!(DestroyDevice, (), device: VkDevice, pAllocator: *const VkAllocationCallbacks);
     func!(DestroyEvent, (), device: VkDevice, event: VkEvent, pAllocator: *const VkAllocationCallbacks);
     func!(DestroyFence, (), device: VkDevice, fence: VkFence, pAllocator: *const VkAllocationCallbacks);
     func!(DestroyFramebuffer, (), device: VkDevice, framebuffer: VkFramebuffer, pAllocator: *const VkAllocationCallbacks);
     func!(DestroyImage, (), device: VkDevice, image: VkImage, pAllocator: *const VkAllocationCallbacks);
     func!(DestroyImageView, (), device: VkDevice, imageView: VkImageView, pAllocator: *const VkAllocationCallbacks);
     func!(DestroyIndirectCommandsLayoutNV, (), device: VkDevice, indirectCommandsLayout: VkIndirectCommandsLayoutNV, pAllocator: *const VkAllocationCallbacks);
     func!(DestroyInstance, (), instance: VkInstance, pAllocator: *const VkAllocationCallbacks);
     func!(DestroyPipeline, (), device: VkDevice, pipeline: VkPipeline, pAllocator: *const VkAllocationCallbacks);
     func!(DestroyPipelineCache, (), device: VkDevice, pipelineCache: VkPipelineCache, pAllocator: *const VkAllocationCallbacks);
     func!(DestroyPipelineLayout, (), device: VkDevice, pipelineLayout: VkPipelineLayout, pAllocator: *const VkAllocationCallbacks);
     func!(DestroyPrivateDataSlotEXT, (), device: VkDevice, privateDataSlot: VkPrivateDataSlot, pAllocator: *const VkAllocationCallbacks);
     func!(DestroyQueryPool, (), device: VkDevice, queryPool: VkQueryPool, pAllocator: *const VkAllocationCallbacks);
     func!(DestroyRenderPass, (), device: VkDevice, renderPass: VkRenderPass, pAllocator: *const VkAllocationCallbacks);
     func!(DestroySampler, (), device: VkDevice, sampler: VkSampler, pAllocator: *const VkAllocationCallbacks);
     func!(DestroySamplerYcbcrConversion, (), device: VkDevice, ycbcrConversion: VkSamplerYcbcrConversion, pAllocator: *const VkAllocationCallbacks);
     func!(DestroySamplerYcbcrConversionKHR, (), device: VkDevice, ycbcrConversion: VkSamplerYcbcrConversion, pAllocator: *const VkAllocationCallbacks);
     func!(DestroySemaphore, (), device: VkDevice, semaphore: VkSemaphore, pAllocator: *const VkAllocationCallbacks);
     func!(DestroyShaderModule, (), device: VkDevice, shaderModule: VkShaderModule, pAllocator: *const VkAllocationCallbacks);
     func!(DestroySurfaceKHR, (), instance: VkInstance, surface: VkSurfaceKHR, pAllocator: *const VkAllocationCallbacks);
     func!(DestroySwapchainKHR, (), device: VkDevice, swapchain: VkSwapchainKHR, pAllocator: *const VkAllocationCallbacks);
     func!(DestroyValidationCacheEXT, (), device: VkDevice, validationCache: VkValidationCacheEXT, pAllocator: *const VkAllocationCallbacks);
     func!(DeviceWaitIdle, VkResult, device: VkDevice);
     func!(DisplayPowerControlEXT, VkResult, device: VkDevice, display: VkDisplayKHR, pDisplayPowerInfo: *const VkDisplayPowerInfoEXT);
     func!(EndCommandBuffer, VkResult, commandBuffer: VkCommandBuffer);
     func!(EnumerateDeviceExtensionProperties, VkResult, physicalDevice: VkPhysicalDevice, pLayerName: *const c_char, pPropertyCount: *mut u32, pProperties: *mut VkExtensionProperties);
     func!(EnumerateDeviceLayerProperties, VkResult, physicalDevice: VkPhysicalDevice, pPropertyCount: *mut u32, pProperties: *mut VkLayerProperties);
     func!(EnumerateInstanceExtensionProperties, VkResult, pLayerName: *const c_char, pPropertyCount: *mut u32, pProperties: *mut VkExtensionProperties);
     func!(EnumerateInstanceLayerProperties, VkResult, pPropertyCount: *mut u32, pProperties: *mut VkLayerProperties);
     func!(EnumerateInstanceVersion, VkResult, pApiVersion: *mut u32);
     func!(EnumeratePhysicalDeviceGroups, VkResult, instance: VkInstance, pPhysicalDeviceGroupCount: *mut u32, pPhysicalDeviceGroupProperties: *mut VkPhysicalDeviceGroupProperties);
     func!(EnumeratePhysicalDeviceGroupsKHR, VkResult, instance: VkInstance, pPhysicalDeviceGroupCount: *mut u32, pPhysicalDeviceGroupProperties: *mut VkPhysicalDeviceGroupProperties);
     func!(EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR, VkResult, physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, pCounterCount: *mut u32, pCounters: *mut VkPerformanceCounterKHR, pCounterDescriptions: *mut VkPerformanceCounterDescriptionKHR);
     func!(EnumeratePhysicalDevices, VkResult, instance: VkInstance, pPhysicalDeviceCount: *mut u32, pPhysicalDevices: *mut VkPhysicalDevice);
     func!(FlushMappedMemoryRanges, VkResult, device: VkDevice, memoryRangeCount: u32, pMemoryRanges: *const VkMappedMemoryRange);
     func!(FreeCommandBuffers, (), device: VkDevice, commandPool: VkCommandPool, commandBufferCount: u32, pCommandBuffers: *const VkCommandBuffer);
     func!(FreeDescriptorSets, VkResult, device: VkDevice, descriptorPool: VkDescriptorPool, descriptorSetCount: u32, pDescriptorSets: *const VkDescriptorSet);
     func!(FreeMemory, (), device: VkDevice, memory: VkDeviceMemory, pAllocator: *const VkAllocationCallbacks);
     func!(GetAccelerationStructureHandleNV, VkResult, device: VkDevice, accelerationStructure: VkAccelerationStructureNV, dataSize: usize, pData: *mut c_void);
     func!(GetAccelerationStructureMemoryRequirementsNV, (), device: VkDevice, pInfo: *const VkAccelerationStructureMemoryRequirementsInfoNV, pMemoryRequirements: *mut VkMemoryRequirements2KHR);
    #[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))] func!(GetAndroidHardwareBufferPropertiesANDROID, VkResult, device: VkDevice, buffer: *const AHardwareBuffer, pProperties: *mut VkAndroidHardwareBufferPropertiesANDROID);
     func!(GetBufferDeviceAddress, VkDeviceAddress, device: VkDevice, pInfo: *const VkBufferDeviceAddressInfo);
     func!(GetBufferDeviceAddressEXT, VkDeviceAddress, device: VkDevice, pInfo: *const VkBufferDeviceAddressInfo);
     func!(GetBufferDeviceAddressKHR, VkDeviceAddress, device: VkDevice, pInfo: *const VkBufferDeviceAddressInfo);
     func!(GetBufferMemoryRequirements, (), device: VkDevice, buffer: VkBuffer, pMemoryRequirements: *mut VkMemoryRequirements);
     func!(GetBufferMemoryRequirements2, (), device: VkDevice, pInfo: *const VkBufferMemoryRequirementsInfo2, pMemoryRequirements: *mut VkMemoryRequirements2);
     func!(GetBufferMemoryRequirements2KHR, (), device: VkDevice, pInfo: *const VkBufferMemoryRequirementsInfo2, pMemoryRequirements: *mut VkMemoryRequirements2);
     func!(GetBufferOpaqueCaptureAddress, u64, device: VkDevice, pInfo: *const VkBufferDeviceAddressInfo);
     func!(GetBufferOpaqueCaptureAddressKHR, u64, device: VkDevice, pInfo: *const VkBufferDeviceAddressInfo);
     func!(GetCalibratedTimestampsEXT, VkResult, device: VkDevice, timestampCount: u32, pTimestampInfos: *const VkCalibratedTimestampInfoEXT, pTimestamps: *mut u64, pMaxDeviation: *mut u64);
     func!(GetDeferredOperationMaxConcurrencyKHR, u32, device: VkDevice, operation: VkDeferredOperationKHR);
     func!(GetDeferredOperationResultKHR, VkResult, device: VkDevice, operation: VkDeferredOperationKHR);
     func!(GetDescriptorSetLayoutSupport, (), device: VkDevice, pCreateInfo: *const VkDescriptorSetLayoutCreateInfo, pSupport: *mut VkDescriptorSetLayoutSupport);
     func!(GetDescriptorSetLayoutSupportKHR, (), device: VkDevice, pCreateInfo: *const VkDescriptorSetLayoutCreateInfo, pSupport: *mut VkDescriptorSetLayoutSupport);
     func!(GetDeviceGroupPeerMemoryFeatures, (), device: VkDevice, heapIndex: u32, localDeviceIndex: u32, remoteDeviceIndex: u32, pPeerMemoryFeatures: *mut VkPeerMemoryFeatureFlags);
     func!(GetDeviceGroupPeerMemoryFeaturesKHR, (), device: VkDevice, heapIndex: u32, localDeviceIndex: u32, remoteDeviceIndex: u32, pPeerMemoryFeatures: *mut VkPeerMemoryFeatureFlags);
     func!(GetDeviceGroupPresentCapabilitiesKHR, VkResult, device: VkDevice, pDeviceGroupPresentCapabilities: *mut VkDeviceGroupPresentCapabilitiesKHR);
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] func!(GetDeviceGroupSurfacePresentModes2EXT, VkResult, device: VkDevice, pSurfaceInfo: *const VkPhysicalDeviceSurfaceInfo2KHR, pModes: *mut VkDeviceGroupPresentModeFlagsKHR);
     func!(GetDeviceGroupSurfacePresentModesKHR, VkResult, device: VkDevice, surface: VkSurfaceKHR, pModes: *mut VkDeviceGroupPresentModeFlagsKHR);
     func!(GetDeviceMemoryCommitment, (), device: VkDevice, memory: VkDeviceMemory, pCommittedMemoryInBytes: *mut VkDeviceSize);
     func!(GetDeviceMemoryOpaqueCaptureAddress, u64, device: VkDevice, pInfo: *const VkDeviceMemoryOpaqueCaptureAddressInfo);
     func!(GetDeviceMemoryOpaqueCaptureAddressKHR, u64, device: VkDevice, pInfo: *const VkDeviceMemoryOpaqueCaptureAddressInfo);
     func!(GetDeviceProcAddr, PFN_vkVoidFunction, device: VkDevice, pName: *const c_char);
     func!(GetDeviceQueue, (), device: VkDevice, queueFamilyIndex: u32, queueIndex: u32, pQueue: *mut VkQueue);
     func!(GetDeviceQueue2, (), device: VkDevice, pQueueInfo: *const VkDeviceQueueInfo2, pQueue: *mut VkQueue);
     func!(GetDisplayModeProperties2KHR, VkResult, physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pPropertyCount: *mut u32, pProperties: *mut VkDisplayModeProperties2KHR);
     func!(GetDisplayModePropertiesKHR, VkResult, physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pPropertyCount: *mut u32, pProperties: *mut VkDisplayModePropertiesKHR);
     func!(GetDisplayPlaneCapabilities2KHR, VkResult, physicalDevice: VkPhysicalDevice, pDisplayPlaneInfo: *const VkDisplayPlaneInfo2KHR, pCapabilities: *mut VkDisplayPlaneCapabilities2KHR);
     func!(GetDisplayPlaneCapabilitiesKHR, VkResult, physicalDevice: VkPhysicalDevice, mode: VkDisplayModeKHR, planeIndex: u32, pCapabilities: *mut VkDisplayPlaneCapabilitiesKHR);
     func!(GetDisplayPlaneSupportedDisplaysKHR, VkResult, physicalDevice: VkPhysicalDevice, planeIndex: u32, pDisplayCount: *mut u32, pDisplays: *mut VkDisplayKHR);
     func!(GetEventStatus, VkResult, device: VkDevice, event: VkEvent);
     func!(GetFenceFdKHR, VkResult, device: VkDevice, pGetFdInfo: *const VkFenceGetFdInfoKHR, pFd: *mut c_int);
     func!(GetFenceStatus, VkResult, device: VkDevice, fence: VkFence);
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] func!(GetFenceWin32HandleKHR, VkResult, device: VkDevice, pGetWin32HandleInfo: *const VkFenceGetWin32HandleInfoKHR, pHandle: *mut HANDLE);
     func!(GetGeneratedCommandsMemoryRequirementsNV, (), device: VkDevice, pInfo: *const VkGeneratedCommandsMemoryRequirementsInfoNV, pMemoryRequirements: *mut VkMemoryRequirements2);
     func!(GetImageDrmFormatModifierPropertiesEXT, VkResult, device: VkDevice, image: VkImage, pProperties: *mut VkImageDrmFormatModifierPropertiesEXT);
     func!(GetImageMemoryRequirements, (), device: VkDevice, image: VkImage, pMemoryRequirements: *mut VkMemoryRequirements);
     func!(GetImageMemoryRequirements2, (), device: VkDevice, pInfo: *const VkImageMemoryRequirementsInfo2, pMemoryRequirements: *mut VkMemoryRequirements2);
     func!(GetImageMemoryRequirements2KHR, (), device: VkDevice, pInfo: *const VkImageMemoryRequirementsInfo2, pMemoryRequirements: *mut VkMemoryRequirements2);
     func!(GetImageSparseMemoryRequirements, (), device: VkDevice, image: VkImage, pSparseMemoryRequirementCount: *mut u32, pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements);
     func!(GetImageSparseMemoryRequirements2, (), device: VkDevice, pInfo: *const VkImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: *mut u32, pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2);
     func!(GetImageSparseMemoryRequirements2KHR, (), device: VkDevice, pInfo: *const VkImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: *mut u32, pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2);
     func!(GetImageSubresourceLayout, (), device: VkDevice, image: VkImage, pSubresource: *const VkImageSubresource, pLayout: *mut VkSubresourceLayout);
     func!(GetImageViewAddressNVX, VkResult, device: VkDevice, imageView: VkImageView, pProperties: *mut VkImageViewAddressPropertiesNVX);
     func!(GetImageViewHandleNVX, u32, device: VkDevice, pInfo: *const VkImageViewHandleInfoNVX);
     func!(GetInstanceProcAddr, PFN_vkVoidFunction, instance: VkInstance, pName: *const c_char);
    #[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))] func!(GetMemoryAndroidHardwareBufferANDROID, VkResult, device: VkDevice, pInfo: *const VkMemoryGetAndroidHardwareBufferInfoANDROID, pBuffer: *mut *mut AHardwareBuffer);
     func!(GetMemoryFdKHR, VkResult, device: VkDevice, pGetFdInfo: *const VkMemoryGetFdInfoKHR, pFd: *mut c_int);
     func!(GetMemoryFdPropertiesKHR, VkResult, device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, fd: c_int, pMemoryFdProperties: *mut VkMemoryFdPropertiesKHR);
     func!(GetMemoryHostPointerPropertiesEXT, VkResult, device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, pHostPointer: *const c_void, pMemoryHostPointerProperties: *mut VkMemoryHostPointerPropertiesEXT);
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] func!(GetMemoryWin32HandleKHR, VkResult, device: VkDevice, pGetWin32HandleInfo: *const VkMemoryGetWin32HandleInfoKHR, pHandle: *mut HANDLE);
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] func!(GetMemoryWin32HandleNV, VkResult, device: VkDevice, memory: VkDeviceMemory, handleType: VkExternalMemoryHandleTypeFlagsNV, pHandle: *mut HANDLE);
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] func!(GetMemoryWin32HandlePropertiesKHR, VkResult, device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, handle: HANDLE, pMemoryWin32HandleProperties: *mut VkMemoryWin32HandlePropertiesKHR);
     func!(GetPastPresentationTimingGOOGLE, VkResult, device: VkDevice, swapchain: VkSwapchainKHR, pPresentationTimingCount: *mut u32, pPresentationTimings: *mut VkPastPresentationTimingGOOGLE);
     func!(GetPerformanceParameterINTEL, VkResult, device: VkDevice, parameter: VkPerformanceParameterTypeINTEL, pValue: *mut VkPerformanceValueINTEL);
     func!(GetPhysicalDeviceCalibrateableTimeDomainsEXT, VkResult, physicalDevice: VkPhysicalDevice, pTimeDomainCount: *mut u32, pTimeDomains: *mut VkTimeDomainEXT);
     func!(GetPhysicalDeviceCooperativeMatrixPropertiesNV, VkResult, physicalDevice: VkPhysicalDevice, pPropertyCount: *mut u32, pProperties: *mut VkCooperativeMatrixPropertiesNV);
    #[cfg(any(feature = "VK_USE_PLATFORM_DIRECTFB_EXT"))] func!(GetPhysicalDeviceDirectFBPresentationSupportEXT, VkBool32, physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, dfb: *mut IDirectFB);
     func!(GetPhysicalDeviceDisplayPlaneProperties2KHR, VkResult, physicalDevice: VkPhysicalDevice, pPropertyCount: *mut u32, pProperties: *mut VkDisplayPlaneProperties2KHR);
     func!(GetPhysicalDeviceDisplayPlanePropertiesKHR, VkResult, physicalDevice: VkPhysicalDevice, pPropertyCount: *mut u32, pProperties: *mut VkDisplayPlanePropertiesKHR);
     func!(GetPhysicalDeviceDisplayProperties2KHR, VkResult, physicalDevice: VkPhysicalDevice, pPropertyCount: *mut u32, pProperties: *mut VkDisplayProperties2KHR);
     func!(GetPhysicalDeviceDisplayPropertiesKHR, VkResult, physicalDevice: VkPhysicalDevice, pPropertyCount: *mut u32, pProperties: *mut VkDisplayPropertiesKHR);
     func!(GetPhysicalDeviceExternalBufferProperties, (), physicalDevice: VkPhysicalDevice, pExternalBufferInfo: *const VkPhysicalDeviceExternalBufferInfo, pExternalBufferProperties: *mut VkExternalBufferProperties);
     func!(GetPhysicalDeviceExternalBufferPropertiesKHR, (), physicalDevice: VkPhysicalDevice, pExternalBufferInfo: *const VkPhysicalDeviceExternalBufferInfo, pExternalBufferProperties: *mut VkExternalBufferProperties);
     func!(GetPhysicalDeviceExternalFenceProperties, (), physicalDevice: VkPhysicalDevice, pExternalFenceInfo: *const VkPhysicalDeviceExternalFenceInfo, pExternalFenceProperties: *mut VkExternalFenceProperties);
     func!(GetPhysicalDeviceExternalFencePropertiesKHR, (), physicalDevice: VkPhysicalDevice, pExternalFenceInfo: *const VkPhysicalDeviceExternalFenceInfo, pExternalFenceProperties: *mut VkExternalFenceProperties);
     func!(GetPhysicalDeviceExternalImageFormatPropertiesNV, VkResult, physicalDevice: VkPhysicalDevice, format: VkFormat, type_: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, externalHandleType: VkExternalMemoryHandleTypeFlagsNV, pExternalImageFormatProperties: *mut VkExternalImageFormatPropertiesNV);
     func!(GetPhysicalDeviceExternalSemaphoreProperties, (), physicalDevice: VkPhysicalDevice, pExternalSemaphoreInfo: *const VkPhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: *mut VkExternalSemaphoreProperties);
     func!(GetPhysicalDeviceExternalSemaphorePropertiesKHR, (), physicalDevice: VkPhysicalDevice, pExternalSemaphoreInfo: *const VkPhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: *mut VkExternalSemaphoreProperties);
     func!(GetPhysicalDeviceFeatures, (), physicalDevice: VkPhysicalDevice, pFeatures: *mut VkPhysicalDeviceFeatures);
     func!(GetPhysicalDeviceFeatures2, (), physicalDevice: VkPhysicalDevice, pFeatures: *mut VkPhysicalDeviceFeatures2);
     func!(GetPhysicalDeviceFeatures2KHR, (), physicalDevice: VkPhysicalDevice, pFeatures: *mut VkPhysicalDeviceFeatures2);
     func!(GetPhysicalDeviceFormatProperties, (), physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: *mut VkFormatProperties);
     func!(GetPhysicalDeviceFormatProperties2, (), physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: *mut VkFormatProperties2);
     func!(GetPhysicalDeviceFormatProperties2KHR, (), physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: *mut VkFormatProperties2);
     func!(GetPhysicalDeviceImageFormatProperties, VkResult, physicalDevice: VkPhysicalDevice, format: VkFormat, type_: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, pImageFormatProperties: *mut VkImageFormatProperties);
     func!(GetPhysicalDeviceImageFormatProperties2, VkResult, physicalDevice: VkPhysicalDevice, pImageFormatInfo: *const VkPhysicalDeviceImageFormatInfo2, pImageFormatProperties: *mut VkImageFormatProperties2);
     func!(GetPhysicalDeviceImageFormatProperties2KHR, VkResult, physicalDevice: VkPhysicalDevice, pImageFormatInfo: *const VkPhysicalDeviceImageFormatInfo2, pImageFormatProperties: *mut VkImageFormatProperties2);
     func!(GetPhysicalDeviceMemoryProperties, (), physicalDevice: VkPhysicalDevice, pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties);
     func!(GetPhysicalDeviceMemoryProperties2, (), physicalDevice: VkPhysicalDevice, pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties2);
     func!(GetPhysicalDeviceMemoryProperties2KHR, (), physicalDevice: VkPhysicalDevice, pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties2);
     func!(GetPhysicalDeviceMultisamplePropertiesEXT, (), physicalDevice: VkPhysicalDevice, samples: VkSampleCountFlagBits, pMultisampleProperties: *mut VkMultisamplePropertiesEXT);
     func!(GetPhysicalDevicePresentRectanglesKHR, VkResult, physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pRectCount: *mut u32, pRects: *mut VkRect2D);
     func!(GetPhysicalDeviceProperties, (), physicalDevice: VkPhysicalDevice, pProperties: *mut VkPhysicalDeviceProperties);
     func!(GetPhysicalDeviceProperties2, (), physicalDevice: VkPhysicalDevice, pProperties: *mut VkPhysicalDeviceProperties2);
     func!(GetPhysicalDeviceProperties2KHR, (), physicalDevice: VkPhysicalDevice, pProperties: *mut VkPhysicalDeviceProperties2);
     func!(GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR, (), physicalDevice: VkPhysicalDevice, pPerformanceQueryCreateInfo: *const VkQueryPoolPerformanceCreateInfoKHR, pNumPasses: *mut u32);
     func!(GetPhysicalDeviceQueueFamilyProperties, (), physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: *mut u32, pQueueFamilyProperties: *mut VkQueueFamilyProperties);
     func!(GetPhysicalDeviceQueueFamilyProperties2, (), physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: *mut u32, pQueueFamilyProperties: *mut VkQueueFamilyProperties2);
     func!(GetPhysicalDeviceQueueFamilyProperties2KHR, (), physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: *mut u32, pQueueFamilyProperties: *mut VkQueueFamilyProperties2);
     func!(GetPhysicalDeviceSparseImageFormatProperties, (), physicalDevice: VkPhysicalDevice, format: VkFormat, type_: VkImageType, samples: VkSampleCountFlagBits, usage: VkImageUsageFlags, tiling: VkImageTiling, pPropertyCount: *mut u32, pProperties: *mut VkSparseImageFormatProperties);
     func!(GetPhysicalDeviceSparseImageFormatProperties2, (), physicalDevice: VkPhysicalDevice, pFormatInfo: *const VkPhysicalDeviceSparseImageFormatInfo2, pPropertyCount: *mut u32, pProperties: *mut VkSparseImageFormatProperties2);
     func!(GetPhysicalDeviceSparseImageFormatProperties2KHR, (), physicalDevice: VkPhysicalDevice, pFormatInfo: *const VkPhysicalDeviceSparseImageFormatInfo2, pPropertyCount: *mut u32, pProperties: *mut VkSparseImageFormatProperties2);
     func!(GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV, VkResult, physicalDevice: VkPhysicalDevice, pCombinationCount: *mut u32, pCombinations: *mut VkFramebufferMixedSamplesCombinationNV);
     func!(GetPhysicalDeviceSurfaceCapabilities2EXT, VkResult, physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: *mut VkSurfaceCapabilities2EXT);
     func!(GetPhysicalDeviceSurfaceCapabilities2KHR, VkResult, physicalDevice: VkPhysicalDevice, pSurfaceInfo: *const VkPhysicalDeviceSurfaceInfo2KHR, pSurfaceCapabilities: *mut VkSurfaceCapabilities2KHR);
     func!(GetPhysicalDeviceSurfaceCapabilitiesKHR, VkResult, physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: *mut VkSurfaceCapabilitiesKHR);
     func!(GetPhysicalDeviceSurfaceFormats2KHR, VkResult, physicalDevice: VkPhysicalDevice, pSurfaceInfo: *const VkPhysicalDeviceSurfaceInfo2KHR, pSurfaceFormatCount: *mut u32, pSurfaceFormats: *mut VkSurfaceFormat2KHR);
     func!(GetPhysicalDeviceSurfaceFormatsKHR, VkResult, physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceFormatCount: *mut u32, pSurfaceFormats: *mut VkSurfaceFormatKHR);
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] func!(GetPhysicalDeviceSurfacePresentModes2EXT, VkResult, physicalDevice: VkPhysicalDevice, pSurfaceInfo: *const VkPhysicalDeviceSurfaceInfo2KHR, pPresentModeCount: *mut u32, pPresentModes: *mut VkPresentModeKHR);
     func!(GetPhysicalDeviceSurfacePresentModesKHR, VkResult, physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pPresentModeCount: *mut u32, pPresentModes: *mut VkPresentModeKHR);
     func!(GetPhysicalDeviceSurfaceSupportKHR, VkResult, physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, surface: VkSurfaceKHR, pSupported: *mut VkBool32);
     func!(GetPhysicalDeviceToolPropertiesEXT, VkResult, physicalDevice: VkPhysicalDevice, pToolCount: *mut u32, pToolProperties: *mut VkPhysicalDeviceToolProperties);
    #[cfg(any(feature = "VK_USE_PLATFORM_WAYLAND_KHR"))] func!(GetPhysicalDeviceWaylandPresentationSupportKHR, VkBool32, physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, display: *mut wl_display);
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] func!(GetPhysicalDeviceWin32PresentationSupportKHR, VkBool32, physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32);
    #[cfg(any(feature = "VK_USE_PLATFORM_XCB_KHR"))] func!(GetPhysicalDeviceXcbPresentationSupportKHR, VkBool32, physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, connection: *mut xcb_connection_t, visual_id: xcb_visualid_t);
    #[cfg(any(feature = "VK_USE_PLATFORM_XLIB_KHR"))] func!(GetPhysicalDeviceXlibPresentationSupportKHR, VkBool32, physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, dpy: *mut Display, visualID: VisualID);
     func!(GetPipelineCacheData, VkResult, device: VkDevice, pipelineCache: VkPipelineCache, pDataSize: *mut usize, pData: *mut c_void);
     func!(GetPipelineExecutableInternalRepresentationsKHR, VkResult, device: VkDevice, pExecutableInfo: *const VkPipelineExecutableInfoKHR, pInternalRepresentationCount: *mut u32, pInternalRepresentations: *mut VkPipelineExecutableInternalRepresentationKHR);
     func!(GetPipelineExecutablePropertiesKHR, VkResult, device: VkDevice, pPipelineInfo: *const VkPipelineInfoKHR, pExecutableCount: *mut u32, pProperties: *mut VkPipelineExecutablePropertiesKHR);
     func!(GetPipelineExecutableStatisticsKHR, VkResult, device: VkDevice, pExecutableInfo: *const VkPipelineExecutableInfoKHR, pStatisticCount: *mut u32, pStatistics: *mut VkPipelineExecutableStatisticKHR);
     func!(GetPrivateDataEXT, (), device: VkDevice, objectType: VkObjectType, objectHandle: u64, privateDataSlot: VkPrivateDataSlot, pData: *mut u64);
     func!(GetQueryPoolResults, VkResult, device: VkDevice, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32, dataSize: usize, pData: *mut c_void, stride: VkDeviceSize, flags: VkQueryResultFlags);
     func!(GetQueueCheckpointDataNV, (), queue: VkQueue, pCheckpointDataCount: *mut u32, pCheckpointData: *mut VkCheckpointDataNV);
    #[cfg(any(feature = "VK_USE_PLATFORM_XLIB_XRANDR_EXT"))] func!(GetRandROutputDisplayEXT, VkResult, physicalDevice: VkPhysicalDevice, dpy: *mut Display, rrOutput: RROutput, pDisplay: *mut VkDisplayKHR);
     func!(GetRayTracingShaderGroupHandlesNV, VkResult, device: VkDevice, pipeline: VkPipeline, firstGroup: u32, groupCount: u32, dataSize: usize, pData: *mut c_void);
     func!(GetRefreshCycleDurationGOOGLE, VkResult, device: VkDevice, swapchain: VkSwapchainKHR, pDisplayTimingProperties: *mut VkRefreshCycleDurationGOOGLE);
     func!(GetRenderAreaGranularity, (), device: VkDevice, renderPass: VkRenderPass, pGranularity: *mut VkExtent2D);
     func!(GetSemaphoreCounterValue, VkResult, device: VkDevice, semaphore: VkSemaphore, pValue: *mut u64);
     func!(GetSemaphoreCounterValueKHR, VkResult, device: VkDevice, semaphore: VkSemaphore, pValue: *mut u64);
     func!(GetSemaphoreFdKHR, VkResult, device: VkDevice, pGetFdInfo: *const VkSemaphoreGetFdInfoKHR, pFd: *mut c_int);
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] func!(GetSemaphoreWin32HandleKHR, VkResult, device: VkDevice, pGetWin32HandleInfo: *const VkSemaphoreGetWin32HandleInfoKHR, pHandle: *mut HANDLE);
     func!(GetShaderInfoAMD, VkResult, device: VkDevice, pipeline: VkPipeline, shaderStage: VkShaderStageFlagBits, infoType: VkShaderInfoTypeAMD, pInfoSize: *mut usize, pInfo: *mut c_void);
     func!(GetSwapchainCounterEXT, VkResult, device: VkDevice, swapchain: VkSwapchainKHR, counter: VkSurfaceCounterFlagBitsEXT, pCounterValue: *mut u64);
     func!(GetSwapchainImagesKHR, VkResult, device: VkDevice, swapchain: VkSwapchainKHR, pSwapchainImageCount: *mut u32, pSwapchainImages: *mut VkImage);
     func!(GetSwapchainStatusKHR, VkResult, device: VkDevice, swapchain: VkSwapchainKHR);
     func!(GetValidationCacheDataEXT, VkResult, device: VkDevice, validationCache: VkValidationCacheEXT, pDataSize: *mut usize, pData: *mut c_void);
     func!(ImportFenceFdKHR, VkResult, device: VkDevice, pImportFenceFdInfo: *const VkImportFenceFdInfoKHR);
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] func!(ImportFenceWin32HandleKHR, VkResult, device: VkDevice, pImportFenceWin32HandleInfo: *const VkImportFenceWin32HandleInfoKHR);
     func!(ImportSemaphoreFdKHR, VkResult, device: VkDevice, pImportSemaphoreFdInfo: *const VkImportSemaphoreFdInfoKHR);
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] func!(ImportSemaphoreWin32HandleKHR, VkResult, device: VkDevice, pImportSemaphoreWin32HandleInfo: *const VkImportSemaphoreWin32HandleInfoKHR);
     func!(InitializePerformanceApiINTEL, VkResult, device: VkDevice, pInitializeInfo: *const VkInitializePerformanceApiInfoINTEL);
     func!(InvalidateMappedMemoryRanges, VkResult, device: VkDevice, memoryRangeCount: u32, pMemoryRanges: *const VkMappedMemoryRange);
     func!(MapMemory, VkResult, device: VkDevice, memory: VkDeviceMemory, offset: VkDeviceSize, size: VkDeviceSize, flags: VkMemoryMapFlags, ppData: *mut *mut c_void);
     func!(MergePipelineCaches, VkResult, device: VkDevice, dstCache: VkPipelineCache, srcCacheCount: u32, pSrcCaches: *const VkPipelineCache);
     func!(MergeValidationCachesEXT, VkResult, device: VkDevice, dstCache: VkValidationCacheEXT, srcCacheCount: u32, pSrcCaches: *const VkValidationCacheEXT);
     func!(QueueBeginDebugUtilsLabelEXT, (), queue: VkQueue, pLabelInfo: *const VkDebugUtilsLabelEXT);
     func!(QueueBindSparse, VkResult, queue: VkQueue, bindInfoCount: u32, pBindInfo: *const VkBindSparseInfo, fence: VkFence);
     func!(QueueEndDebugUtilsLabelEXT, (), queue: VkQueue);
     func!(QueueInsertDebugUtilsLabelEXT, (), queue: VkQueue, pLabelInfo: *const VkDebugUtilsLabelEXT);
     func!(QueuePresentKHR, VkResult, queue: VkQueue, pPresentInfo: *const VkPresentInfoKHR);
     func!(QueueSetPerformanceConfigurationINTEL, VkResult, queue: VkQueue, configuration: VkPerformanceConfigurationINTEL);
     func!(QueueSubmit, VkResult, queue: VkQueue, submitCount: u32, pSubmits: *const VkSubmitInfo, fence: VkFence);
     func!(QueueWaitIdle, VkResult, queue: VkQueue);
     func!(RegisterDeviceEventEXT, VkResult, device: VkDevice, pDeviceEventInfo: *const VkDeviceEventInfoEXT, pAllocator: *const VkAllocationCallbacks, pFence: *mut VkFence);
     func!(RegisterDisplayEventEXT, VkResult, device: VkDevice, display: VkDisplayKHR, pDisplayEventInfo: *const VkDisplayEventInfoEXT, pAllocator: *const VkAllocationCallbacks, pFence: *mut VkFence);
     func!(ReleaseDisplayEXT, VkResult, physicalDevice: VkPhysicalDevice, display: VkDisplayKHR);
    #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] func!(ReleaseFullScreenExclusiveModeEXT, VkResult, device: VkDevice, swapchain: VkSwapchainKHR);
     func!(ReleasePerformanceConfigurationINTEL, VkResult, device: VkDevice, configuration: VkPerformanceConfigurationINTEL);
     func!(ReleaseProfilingLockKHR, (), device: VkDevice);
     func!(ResetCommandBuffer, VkResult, commandBuffer: VkCommandBuffer, flags: VkCommandBufferResetFlags);
     func!(ResetCommandPool, VkResult, device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolResetFlags);
     func!(ResetDescriptorPool, VkResult, device: VkDevice, descriptorPool: VkDescriptorPool, flags: VkDescriptorPoolResetFlags);
     func!(ResetEvent, VkResult, device: VkDevice, event: VkEvent);
     func!(ResetFences, VkResult, device: VkDevice, fenceCount: u32, pFences: *const VkFence);
     func!(ResetQueryPool, (), device: VkDevice, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32);
     func!(ResetQueryPoolEXT, (), device: VkDevice, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32);
     func!(SetDebugUtilsObjectNameEXT, VkResult, device: VkDevice, pNameInfo: *const VkDebugUtilsObjectNameInfoEXT);
     func!(SetDebugUtilsObjectTagEXT, VkResult, device: VkDevice, pTagInfo: *const VkDebugUtilsObjectTagInfoEXT);
     func!(SetEvent, VkResult, device: VkDevice, event: VkEvent);
     func!(SetHdrMetadataEXT, (), device: VkDevice, swapchainCount: u32, pSwapchains: *const VkSwapchainKHR, pMetadata: *const VkHdrMetadataEXT);
     func!(SetLocalDimmingAMD, (), device: VkDevice, swapChain: VkSwapchainKHR, localDimmingEnable: VkBool32);
     func!(SetPrivateDataEXT, VkResult, device: VkDevice, objectType: VkObjectType, objectHandle: u64, privateDataSlot: VkPrivateDataSlot, data: u64);
     func!(SignalSemaphore, VkResult, device: VkDevice, pSignalInfo: *const VkSemaphoreSignalInfo);
     func!(SignalSemaphoreKHR, VkResult, device: VkDevice, pSignalInfo: *const VkSemaphoreSignalInfo);
     func!(SubmitDebugUtilsMessageEXT, (), instance: VkInstance, messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT, messageTypes: VkDebugUtilsMessageTypeFlagsEXT, pCallbackData: *const VkDebugUtilsMessengerCallbackDataEXT);
     func!(TrimCommandPool, (), device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolTrimFlags);
     func!(TrimCommandPoolKHR, (), device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolTrimFlags);
     func!(UninitializePerformanceApiINTEL, (), device: VkDevice);
     func!(UnmapMemory, (), device: VkDevice, memory: VkDeviceMemory);
     func!(UpdateDescriptorSetWithTemplate, (), device: VkDevice, descriptorSet: VkDescriptorSet, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pData: *const c_void);
     func!(UpdateDescriptorSetWithTemplateKHR, (), device: VkDevice, descriptorSet: VkDescriptorSet, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pData: *const c_void);
     func!(UpdateDescriptorSets, (), device: VkDevice, descriptorWriteCount: u32, pDescriptorWrites: *const VkWriteDescriptorSet, descriptorCopyCount: u32, pDescriptorCopies: *const VkCopyDescriptorSet);
     func!(WaitForFences, VkResult, device: VkDevice, fenceCount: u32, pFences: *const VkFence, waitAll: VkBool32, timeout: u64);
     func!(WaitSemaphores, VkResult, device: VkDevice, pWaitInfo: *const VkSemaphoreWaitInfo, timeout: u64);
     func!(WaitSemaphoresKHR, VkResult, device: VkDevice, pWaitInfo: *const VkSemaphoreWaitInfo, timeout: u64);

    }
}


pub fn load<F>(mut loadfn: F) -> functions::Vulkan where F: FnMut(&'static str) -> *const c_void {
    #[allow(unused_mut)]
    let mut ctx = Vulkan {
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] AcquireFullScreenExclusiveModeEXT: FnPtr::new(loadfn("vkAcquireFullScreenExclusiveModeEXT")),
         AcquireNextImage2KHR: FnPtr::new(loadfn("vkAcquireNextImage2KHR")),
         AcquireNextImageKHR: FnPtr::new(loadfn("vkAcquireNextImageKHR")),
         AcquirePerformanceConfigurationINTEL: FnPtr::new(loadfn("vkAcquirePerformanceConfigurationINTEL")),
         AcquireProfilingLockKHR: FnPtr::new(loadfn("vkAcquireProfilingLockKHR")),
        #[cfg(any(feature = "VK_USE_PLATFORM_XLIB_XRANDR_EXT"))] AcquireXlibDisplayEXT: FnPtr::new(loadfn("vkAcquireXlibDisplayEXT")),
         AllocateCommandBuffers: FnPtr::new(loadfn("vkAllocateCommandBuffers")),
         AllocateDescriptorSets: FnPtr::new(loadfn("vkAllocateDescriptorSets")),
         AllocateMemory: FnPtr::new(loadfn("vkAllocateMemory")),
         BeginCommandBuffer: FnPtr::new(loadfn("vkBeginCommandBuffer")),
         BindAccelerationStructureMemoryNV: FnPtr::new(loadfn("vkBindAccelerationStructureMemoryNV")),
         BindBufferMemory: FnPtr::new(loadfn("vkBindBufferMemory")),
         BindBufferMemory2: FnPtr::new(loadfn("vkBindBufferMemory2")),
         BindBufferMemory2KHR: FnPtr::new(loadfn("vkBindBufferMemory2KHR")),
         BindImageMemory: FnPtr::new(loadfn("vkBindImageMemory")),
         BindImageMemory2: FnPtr::new(loadfn("vkBindImageMemory2")),
         BindImageMemory2KHR: FnPtr::new(loadfn("vkBindImageMemory2KHR")),
         CmdBeginConditionalRenderingEXT: FnPtr::new(loadfn("vkCmdBeginConditionalRenderingEXT")),
         CmdBeginDebugUtilsLabelEXT: FnPtr::new(loadfn("vkCmdBeginDebugUtilsLabelEXT")),
         CmdBeginQuery: FnPtr::new(loadfn("vkCmdBeginQuery")),
         CmdBeginQueryIndexedEXT: FnPtr::new(loadfn("vkCmdBeginQueryIndexedEXT")),
         CmdBeginRenderPass: FnPtr::new(loadfn("vkCmdBeginRenderPass")),
         CmdBeginRenderPass2: FnPtr::new(loadfn("vkCmdBeginRenderPass2")),
         CmdBeginRenderPass2KHR: FnPtr::new(loadfn("vkCmdBeginRenderPass2KHR")),
         CmdBeginTransformFeedbackEXT: FnPtr::new(loadfn("vkCmdBeginTransformFeedbackEXT")),
         CmdBindDescriptorSets: FnPtr::new(loadfn("vkCmdBindDescriptorSets")),
         CmdBindIndexBuffer: FnPtr::new(loadfn("vkCmdBindIndexBuffer")),
         CmdBindPipeline: FnPtr::new(loadfn("vkCmdBindPipeline")),
         CmdBindPipelineShaderGroupNV: FnPtr::new(loadfn("vkCmdBindPipelineShaderGroupNV")),
         CmdBindShadingRateImageNV: FnPtr::new(loadfn("vkCmdBindShadingRateImageNV")),
         CmdBindTransformFeedbackBuffersEXT: FnPtr::new(loadfn("vkCmdBindTransformFeedbackBuffersEXT")),
         CmdBindVertexBuffers: FnPtr::new(loadfn("vkCmdBindVertexBuffers")),
         CmdBindVertexBuffers2EXT: FnPtr::new(loadfn("vkCmdBindVertexBuffers2EXT")),
         CmdBlitImage: FnPtr::new(loadfn("vkCmdBlitImage")),
         CmdBuildAccelerationStructureNV: FnPtr::new(loadfn("vkCmdBuildAccelerationStructureNV")),
         CmdClearAttachments: FnPtr::new(loadfn("vkCmdClearAttachments")),
         CmdClearColorImage: FnPtr::new(loadfn("vkCmdClearColorImage")),
         CmdClearDepthStencilImage: FnPtr::new(loadfn("vkCmdClearDepthStencilImage")),
         CmdCopyAccelerationStructureNV: FnPtr::new(loadfn("vkCmdCopyAccelerationStructureNV")),
         CmdCopyBuffer: FnPtr::new(loadfn("vkCmdCopyBuffer")),
         CmdCopyBufferToImage: FnPtr::new(loadfn("vkCmdCopyBufferToImage")),
         CmdCopyImage: FnPtr::new(loadfn("vkCmdCopyImage")),
         CmdCopyImageToBuffer: FnPtr::new(loadfn("vkCmdCopyImageToBuffer")),
         CmdCopyQueryPoolResults: FnPtr::new(loadfn("vkCmdCopyQueryPoolResults")),
         CmdDebugMarkerBeginEXT: FnPtr::new(loadfn("vkCmdDebugMarkerBeginEXT")),
         CmdDebugMarkerEndEXT: FnPtr::new(loadfn("vkCmdDebugMarkerEndEXT")),
         CmdDebugMarkerInsertEXT: FnPtr::new(loadfn("vkCmdDebugMarkerInsertEXT")),
         CmdDispatch: FnPtr::new(loadfn("vkCmdDispatch")),
         CmdDispatchBase: FnPtr::new(loadfn("vkCmdDispatchBase")),
         CmdDispatchBaseKHR: FnPtr::new(loadfn("vkCmdDispatchBaseKHR")),
         CmdDispatchIndirect: FnPtr::new(loadfn("vkCmdDispatchIndirect")),
         CmdDraw: FnPtr::new(loadfn("vkCmdDraw")),
         CmdDrawIndexed: FnPtr::new(loadfn("vkCmdDrawIndexed")),
         CmdDrawIndexedIndirect: FnPtr::new(loadfn("vkCmdDrawIndexedIndirect")),
         CmdDrawIndexedIndirectCount: FnPtr::new(loadfn("vkCmdDrawIndexedIndirectCount")),
         CmdDrawIndexedIndirectCountAMD: FnPtr::new(loadfn("vkCmdDrawIndexedIndirectCountAMD")),
         CmdDrawIndexedIndirectCountKHR: FnPtr::new(loadfn("vkCmdDrawIndexedIndirectCountKHR")),
         CmdDrawIndirect: FnPtr::new(loadfn("vkCmdDrawIndirect")),
         CmdDrawIndirectByteCountEXT: FnPtr::new(loadfn("vkCmdDrawIndirectByteCountEXT")),
         CmdDrawIndirectCount: FnPtr::new(loadfn("vkCmdDrawIndirectCount")),
         CmdDrawIndirectCountAMD: FnPtr::new(loadfn("vkCmdDrawIndirectCountAMD")),
         CmdDrawIndirectCountKHR: FnPtr::new(loadfn("vkCmdDrawIndirectCountKHR")),
         CmdDrawMeshTasksIndirectCountNV: FnPtr::new(loadfn("vkCmdDrawMeshTasksIndirectCountNV")),
         CmdDrawMeshTasksIndirectNV: FnPtr::new(loadfn("vkCmdDrawMeshTasksIndirectNV")),
         CmdDrawMeshTasksNV: FnPtr::new(loadfn("vkCmdDrawMeshTasksNV")),
         CmdEndConditionalRenderingEXT: FnPtr::new(loadfn("vkCmdEndConditionalRenderingEXT")),
         CmdEndDebugUtilsLabelEXT: FnPtr::new(loadfn("vkCmdEndDebugUtilsLabelEXT")),
         CmdEndQuery: FnPtr::new(loadfn("vkCmdEndQuery")),
         CmdEndQueryIndexedEXT: FnPtr::new(loadfn("vkCmdEndQueryIndexedEXT")),
         CmdEndRenderPass: FnPtr::new(loadfn("vkCmdEndRenderPass")),
         CmdEndRenderPass2: FnPtr::new(loadfn("vkCmdEndRenderPass2")),
         CmdEndRenderPass2KHR: FnPtr::new(loadfn("vkCmdEndRenderPass2KHR")),
         CmdEndTransformFeedbackEXT: FnPtr::new(loadfn("vkCmdEndTransformFeedbackEXT")),
         CmdExecuteCommands: FnPtr::new(loadfn("vkCmdExecuteCommands")),
         CmdExecuteGeneratedCommandsNV: FnPtr::new(loadfn("vkCmdExecuteGeneratedCommandsNV")),
         CmdFillBuffer: FnPtr::new(loadfn("vkCmdFillBuffer")),
         CmdInsertDebugUtilsLabelEXT: FnPtr::new(loadfn("vkCmdInsertDebugUtilsLabelEXT")),
         CmdNextSubpass: FnPtr::new(loadfn("vkCmdNextSubpass")),
         CmdNextSubpass2: FnPtr::new(loadfn("vkCmdNextSubpass2")),
         CmdNextSubpass2KHR: FnPtr::new(loadfn("vkCmdNextSubpass2KHR")),
         CmdPipelineBarrier: FnPtr::new(loadfn("vkCmdPipelineBarrier")),
         CmdPreprocessGeneratedCommandsNV: FnPtr::new(loadfn("vkCmdPreprocessGeneratedCommandsNV")),
         CmdPushConstants: FnPtr::new(loadfn("vkCmdPushConstants")),
         CmdPushDescriptorSetKHR: FnPtr::new(loadfn("vkCmdPushDescriptorSetKHR")),
         CmdPushDescriptorSetWithTemplateKHR: FnPtr::new(loadfn("vkCmdPushDescriptorSetWithTemplateKHR")),
         CmdResetEvent: FnPtr::new(loadfn("vkCmdResetEvent")),
         CmdResetQueryPool: FnPtr::new(loadfn("vkCmdResetQueryPool")),
         CmdResolveImage: FnPtr::new(loadfn("vkCmdResolveImage")),
         CmdSetBlendConstants: FnPtr::new(loadfn("vkCmdSetBlendConstants")),
         CmdSetCheckpointNV: FnPtr::new(loadfn("vkCmdSetCheckpointNV")),
         CmdSetCoarseSampleOrderNV: FnPtr::new(loadfn("vkCmdSetCoarseSampleOrderNV")),
         CmdSetCullModeEXT: FnPtr::new(loadfn("vkCmdSetCullModeEXT")),
         CmdSetDepthBias: FnPtr::new(loadfn("vkCmdSetDepthBias")),
         CmdSetDepthBounds: FnPtr::new(loadfn("vkCmdSetDepthBounds")),
         CmdSetDepthBoundsTestEnableEXT: FnPtr::new(loadfn("vkCmdSetDepthBoundsTestEnableEXT")),
         CmdSetDepthCompareOpEXT: FnPtr::new(loadfn("vkCmdSetDepthCompareOpEXT")),
         CmdSetDepthTestEnableEXT: FnPtr::new(loadfn("vkCmdSetDepthTestEnableEXT")),
         CmdSetDepthWriteEnableEXT: FnPtr::new(loadfn("vkCmdSetDepthWriteEnableEXT")),
         CmdSetDeviceMask: FnPtr::new(loadfn("vkCmdSetDeviceMask")),
         CmdSetDeviceMaskKHR: FnPtr::new(loadfn("vkCmdSetDeviceMaskKHR")),
         CmdSetDiscardRectangleEXT: FnPtr::new(loadfn("vkCmdSetDiscardRectangleEXT")),
         CmdSetEvent: FnPtr::new(loadfn("vkCmdSetEvent")),
         CmdSetExclusiveScissorNV: FnPtr::new(loadfn("vkCmdSetExclusiveScissorNV")),
         CmdSetFrontFaceEXT: FnPtr::new(loadfn("vkCmdSetFrontFaceEXT")),
         CmdSetLineStippleEXT: FnPtr::new(loadfn("vkCmdSetLineStippleEXT")),
         CmdSetLineWidth: FnPtr::new(loadfn("vkCmdSetLineWidth")),
         CmdSetPerformanceMarkerINTEL: FnPtr::new(loadfn("vkCmdSetPerformanceMarkerINTEL")),
         CmdSetPerformanceOverrideINTEL: FnPtr::new(loadfn("vkCmdSetPerformanceOverrideINTEL")),
         CmdSetPerformanceStreamMarkerINTEL: FnPtr::new(loadfn("vkCmdSetPerformanceStreamMarkerINTEL")),
         CmdSetPrimitiveTopologyEXT: FnPtr::new(loadfn("vkCmdSetPrimitiveTopologyEXT")),
         CmdSetSampleLocationsEXT: FnPtr::new(loadfn("vkCmdSetSampleLocationsEXT")),
         CmdSetScissor: FnPtr::new(loadfn("vkCmdSetScissor")),
         CmdSetScissorWithCountEXT: FnPtr::new(loadfn("vkCmdSetScissorWithCountEXT")),
         CmdSetStencilCompareMask: FnPtr::new(loadfn("vkCmdSetStencilCompareMask")),
         CmdSetStencilOpEXT: FnPtr::new(loadfn("vkCmdSetStencilOpEXT")),
         CmdSetStencilReference: FnPtr::new(loadfn("vkCmdSetStencilReference")),
         CmdSetStencilTestEnableEXT: FnPtr::new(loadfn("vkCmdSetStencilTestEnableEXT")),
         CmdSetStencilWriteMask: FnPtr::new(loadfn("vkCmdSetStencilWriteMask")),
         CmdSetViewport: FnPtr::new(loadfn("vkCmdSetViewport")),
         CmdSetViewportShadingRatePaletteNV: FnPtr::new(loadfn("vkCmdSetViewportShadingRatePaletteNV")),
         CmdSetViewportWScalingNV: FnPtr::new(loadfn("vkCmdSetViewportWScalingNV")),
         CmdSetViewportWithCountEXT: FnPtr::new(loadfn("vkCmdSetViewportWithCountEXT")),
         CmdTraceRaysNV: FnPtr::new(loadfn("vkCmdTraceRaysNV")),
         CmdUpdateBuffer: FnPtr::new(loadfn("vkCmdUpdateBuffer")),
         CmdWaitEvents: FnPtr::new(loadfn("vkCmdWaitEvents")),
         CmdWriteAccelerationStructuresPropertiesNV: FnPtr::new(loadfn("vkCmdWriteAccelerationStructuresPropertiesNV")),
         CmdWriteBufferMarkerAMD: FnPtr::new(loadfn("vkCmdWriteBufferMarkerAMD")),
         CmdWriteTimestamp: FnPtr::new(loadfn("vkCmdWriteTimestamp")),
         CompileDeferredNV: FnPtr::new(loadfn("vkCompileDeferredNV")),
         CreateAccelerationStructureNV: FnPtr::new(loadfn("vkCreateAccelerationStructureNV")),
        #[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))] CreateAndroidSurfaceKHR: FnPtr::new(loadfn("vkCreateAndroidSurfaceKHR")),
         CreateBuffer: FnPtr::new(loadfn("vkCreateBuffer")),
         CreateBufferView: FnPtr::new(loadfn("vkCreateBufferView")),
         CreateCommandPool: FnPtr::new(loadfn("vkCreateCommandPool")),
         CreateComputePipelines: FnPtr::new(loadfn("vkCreateComputePipelines")),
         CreateDebugReportCallbackEXT: FnPtr::new(loadfn("vkCreateDebugReportCallbackEXT")),
         CreateDebugUtilsMessengerEXT: FnPtr::new(loadfn("vkCreateDebugUtilsMessengerEXT")),
         CreateDeferredOperationKHR: FnPtr::new(loadfn("vkCreateDeferredOperationKHR")),
         CreateDescriptorPool: FnPtr::new(loadfn("vkCreateDescriptorPool")),
         CreateDescriptorSetLayout: FnPtr::new(loadfn("vkCreateDescriptorSetLayout")),
         CreateDescriptorUpdateTemplate: FnPtr::new(loadfn("vkCreateDescriptorUpdateTemplate")),
         CreateDescriptorUpdateTemplateKHR: FnPtr::new(loadfn("vkCreateDescriptorUpdateTemplateKHR")),
         CreateDevice: FnPtr::new(loadfn("vkCreateDevice")),
        #[cfg(any(feature = "VK_USE_PLATFORM_DIRECTFB_EXT"))] CreateDirectFBSurfaceEXT: FnPtr::new(loadfn("vkCreateDirectFBSurfaceEXT")),
         CreateDisplayModeKHR: FnPtr::new(loadfn("vkCreateDisplayModeKHR")),
         CreateDisplayPlaneSurfaceKHR: FnPtr::new(loadfn("vkCreateDisplayPlaneSurfaceKHR")),
         CreateEvent: FnPtr::new(loadfn("vkCreateEvent")),
         CreateFence: FnPtr::new(loadfn("vkCreateFence")),
         CreateFramebuffer: FnPtr::new(loadfn("vkCreateFramebuffer")),
         CreateGraphicsPipelines: FnPtr::new(loadfn("vkCreateGraphicsPipelines")),
         CreateHeadlessSurfaceEXT: FnPtr::new(loadfn("vkCreateHeadlessSurfaceEXT")),
        #[cfg(any(feature = "VK_USE_PLATFORM_IOS_MVK"))] CreateIOSSurfaceMVK: FnPtr::new(loadfn("vkCreateIOSSurfaceMVK")),
         CreateImage: FnPtr::new(loadfn("vkCreateImage")),
        #[cfg(any(feature = "VK_USE_PLATFORM_FUCHSIA"))] CreateImagePipeSurfaceFUCHSIA: FnPtr::new(loadfn("vkCreateImagePipeSurfaceFUCHSIA")),
         CreateImageView: FnPtr::new(loadfn("vkCreateImageView")),
         CreateIndirectCommandsLayoutNV: FnPtr::new(loadfn("vkCreateIndirectCommandsLayoutNV")),
         CreateInstance: FnPtr::new(loadfn("vkCreateInstance")),
        #[cfg(any(feature = "VK_USE_PLATFORM_MACOS_MVK"))] CreateMacOSSurfaceMVK: FnPtr::new(loadfn("vkCreateMacOSSurfaceMVK")),
        #[cfg(any(feature = "VK_USE_PLATFORM_METAL_EXT"))] CreateMetalSurfaceEXT: FnPtr::new(loadfn("vkCreateMetalSurfaceEXT")),
         CreatePipelineCache: FnPtr::new(loadfn("vkCreatePipelineCache")),
         CreatePipelineLayout: FnPtr::new(loadfn("vkCreatePipelineLayout")),
         CreatePrivateDataSlotEXT: FnPtr::new(loadfn("vkCreatePrivateDataSlotEXT")),
         CreateQueryPool: FnPtr::new(loadfn("vkCreateQueryPool")),
         CreateRayTracingPipelinesNV: FnPtr::new(loadfn("vkCreateRayTracingPipelinesNV")),
         CreateRenderPass: FnPtr::new(loadfn("vkCreateRenderPass")),
         CreateRenderPass2: FnPtr::new(loadfn("vkCreateRenderPass2")),
         CreateRenderPass2KHR: FnPtr::new(loadfn("vkCreateRenderPass2KHR")),
         CreateSampler: FnPtr::new(loadfn("vkCreateSampler")),
         CreateSamplerYcbcrConversion: FnPtr::new(loadfn("vkCreateSamplerYcbcrConversion")),
         CreateSamplerYcbcrConversionKHR: FnPtr::new(loadfn("vkCreateSamplerYcbcrConversionKHR")),
         CreateSemaphore: FnPtr::new(loadfn("vkCreateSemaphore")),
         CreateShaderModule: FnPtr::new(loadfn("vkCreateShaderModule")),
         CreateSharedSwapchainsKHR: FnPtr::new(loadfn("vkCreateSharedSwapchainsKHR")),
        #[cfg(any(feature = "VK_USE_PLATFORM_GGP"))] CreateStreamDescriptorSurfaceGGP: FnPtr::new(loadfn("vkCreateStreamDescriptorSurfaceGGP")),
         CreateSwapchainKHR: FnPtr::new(loadfn("vkCreateSwapchainKHR")),
         CreateValidationCacheEXT: FnPtr::new(loadfn("vkCreateValidationCacheEXT")),
        #[cfg(any(feature = "VK_USE_PLATFORM_VI_NN"))] CreateViSurfaceNN: FnPtr::new(loadfn("vkCreateViSurfaceNN")),
        #[cfg(any(feature = "VK_USE_PLATFORM_WAYLAND_KHR"))] CreateWaylandSurfaceKHR: FnPtr::new(loadfn("vkCreateWaylandSurfaceKHR")),
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] CreateWin32SurfaceKHR: FnPtr::new(loadfn("vkCreateWin32SurfaceKHR")),
        #[cfg(any(feature = "VK_USE_PLATFORM_XCB_KHR"))] CreateXcbSurfaceKHR: FnPtr::new(loadfn("vkCreateXcbSurfaceKHR")),
        #[cfg(any(feature = "VK_USE_PLATFORM_XLIB_KHR"))] CreateXlibSurfaceKHR: FnPtr::new(loadfn("vkCreateXlibSurfaceKHR")),
         DebugMarkerSetObjectNameEXT: FnPtr::new(loadfn("vkDebugMarkerSetObjectNameEXT")),
         DebugMarkerSetObjectTagEXT: FnPtr::new(loadfn("vkDebugMarkerSetObjectTagEXT")),
         DebugReportMessageEXT: FnPtr::new(loadfn("vkDebugReportMessageEXT")),
         DeferredOperationJoinKHR: FnPtr::new(loadfn("vkDeferredOperationJoinKHR")),
         DestroyAccelerationStructureNV: FnPtr::new(loadfn("vkDestroyAccelerationStructureNV")),
         DestroyBuffer: FnPtr::new(loadfn("vkDestroyBuffer")),
         DestroyBufferView: FnPtr::new(loadfn("vkDestroyBufferView")),
         DestroyCommandPool: FnPtr::new(loadfn("vkDestroyCommandPool")),
         DestroyDebugReportCallbackEXT: FnPtr::new(loadfn("vkDestroyDebugReportCallbackEXT")),
         DestroyDebugUtilsMessengerEXT: FnPtr::new(loadfn("vkDestroyDebugUtilsMessengerEXT")),
         DestroyDeferredOperationKHR: FnPtr::new(loadfn("vkDestroyDeferredOperationKHR")),
         DestroyDescriptorPool: FnPtr::new(loadfn("vkDestroyDescriptorPool")),
         DestroyDescriptorSetLayout: FnPtr::new(loadfn("vkDestroyDescriptorSetLayout")),
         DestroyDescriptorUpdateTemplate: FnPtr::new(loadfn("vkDestroyDescriptorUpdateTemplate")),
         DestroyDescriptorUpdateTemplateKHR: FnPtr::new(loadfn("vkDestroyDescriptorUpdateTemplateKHR")),
         DestroyDevice: FnPtr::new(loadfn("vkDestroyDevice")),
         DestroyEvent: FnPtr::new(loadfn("vkDestroyEvent")),
         DestroyFence: FnPtr::new(loadfn("vkDestroyFence")),
         DestroyFramebuffer: FnPtr::new(loadfn("vkDestroyFramebuffer")),
         DestroyImage: FnPtr::new(loadfn("vkDestroyImage")),
         DestroyImageView: FnPtr::new(loadfn("vkDestroyImageView")),
         DestroyIndirectCommandsLayoutNV: FnPtr::new(loadfn("vkDestroyIndirectCommandsLayoutNV")),
         DestroyInstance: FnPtr::new(loadfn("vkDestroyInstance")),
         DestroyPipeline: FnPtr::new(loadfn("vkDestroyPipeline")),
         DestroyPipelineCache: FnPtr::new(loadfn("vkDestroyPipelineCache")),
         DestroyPipelineLayout: FnPtr::new(loadfn("vkDestroyPipelineLayout")),
         DestroyPrivateDataSlotEXT: FnPtr::new(loadfn("vkDestroyPrivateDataSlotEXT")),
         DestroyQueryPool: FnPtr::new(loadfn("vkDestroyQueryPool")),
         DestroyRenderPass: FnPtr::new(loadfn("vkDestroyRenderPass")),
         DestroySampler: FnPtr::new(loadfn("vkDestroySampler")),
         DestroySamplerYcbcrConversion: FnPtr::new(loadfn("vkDestroySamplerYcbcrConversion")),
         DestroySamplerYcbcrConversionKHR: FnPtr::new(loadfn("vkDestroySamplerYcbcrConversionKHR")),
         DestroySemaphore: FnPtr::new(loadfn("vkDestroySemaphore")),
         DestroyShaderModule: FnPtr::new(loadfn("vkDestroyShaderModule")),
         DestroySurfaceKHR: FnPtr::new(loadfn("vkDestroySurfaceKHR")),
         DestroySwapchainKHR: FnPtr::new(loadfn("vkDestroySwapchainKHR")),
         DestroyValidationCacheEXT: FnPtr::new(loadfn("vkDestroyValidationCacheEXT")),
         DeviceWaitIdle: FnPtr::new(loadfn("vkDeviceWaitIdle")),
         DisplayPowerControlEXT: FnPtr::new(loadfn("vkDisplayPowerControlEXT")),
         EndCommandBuffer: FnPtr::new(loadfn("vkEndCommandBuffer")),
         EnumerateDeviceExtensionProperties: FnPtr::new(loadfn("vkEnumerateDeviceExtensionProperties")),
         EnumerateDeviceLayerProperties: FnPtr::new(loadfn("vkEnumerateDeviceLayerProperties")),
         EnumerateInstanceExtensionProperties: FnPtr::new(loadfn("vkEnumerateInstanceExtensionProperties")),
         EnumerateInstanceLayerProperties: FnPtr::new(loadfn("vkEnumerateInstanceLayerProperties")),
         EnumerateInstanceVersion: FnPtr::new(loadfn("vkEnumerateInstanceVersion")),
         EnumeratePhysicalDeviceGroups: FnPtr::new(loadfn("vkEnumeratePhysicalDeviceGroups")),
         EnumeratePhysicalDeviceGroupsKHR: FnPtr::new(loadfn("vkEnumeratePhysicalDeviceGroupsKHR")),
         EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR: FnPtr::new(loadfn("vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR")),
         EnumeratePhysicalDevices: FnPtr::new(loadfn("vkEnumeratePhysicalDevices")),
         FlushMappedMemoryRanges: FnPtr::new(loadfn("vkFlushMappedMemoryRanges")),
         FreeCommandBuffers: FnPtr::new(loadfn("vkFreeCommandBuffers")),
         FreeDescriptorSets: FnPtr::new(loadfn("vkFreeDescriptorSets")),
         FreeMemory: FnPtr::new(loadfn("vkFreeMemory")),
         GetAccelerationStructureHandleNV: FnPtr::new(loadfn("vkGetAccelerationStructureHandleNV")),
         GetAccelerationStructureMemoryRequirementsNV: FnPtr::new(loadfn("vkGetAccelerationStructureMemoryRequirementsNV")),
        #[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))] GetAndroidHardwareBufferPropertiesANDROID: FnPtr::new(loadfn("vkGetAndroidHardwareBufferPropertiesANDROID")),
         GetBufferDeviceAddress: FnPtr::new(loadfn("vkGetBufferDeviceAddress")),
         GetBufferDeviceAddressEXT: FnPtr::new(loadfn("vkGetBufferDeviceAddressEXT")),
         GetBufferDeviceAddressKHR: FnPtr::new(loadfn("vkGetBufferDeviceAddressKHR")),
         GetBufferMemoryRequirements: FnPtr::new(loadfn("vkGetBufferMemoryRequirements")),
         GetBufferMemoryRequirements2: FnPtr::new(loadfn("vkGetBufferMemoryRequirements2")),
         GetBufferMemoryRequirements2KHR: FnPtr::new(loadfn("vkGetBufferMemoryRequirements2KHR")),
         GetBufferOpaqueCaptureAddress: FnPtr::new(loadfn("vkGetBufferOpaqueCaptureAddress")),
         GetBufferOpaqueCaptureAddressKHR: FnPtr::new(loadfn("vkGetBufferOpaqueCaptureAddressKHR")),
         GetCalibratedTimestampsEXT: FnPtr::new(loadfn("vkGetCalibratedTimestampsEXT")),
         GetDeferredOperationMaxConcurrencyKHR: FnPtr::new(loadfn("vkGetDeferredOperationMaxConcurrencyKHR")),
         GetDeferredOperationResultKHR: FnPtr::new(loadfn("vkGetDeferredOperationResultKHR")),
         GetDescriptorSetLayoutSupport: FnPtr::new(loadfn("vkGetDescriptorSetLayoutSupport")),
         GetDescriptorSetLayoutSupportKHR: FnPtr::new(loadfn("vkGetDescriptorSetLayoutSupportKHR")),
         GetDeviceGroupPeerMemoryFeatures: FnPtr::new(loadfn("vkGetDeviceGroupPeerMemoryFeatures")),
         GetDeviceGroupPeerMemoryFeaturesKHR: FnPtr::new(loadfn("vkGetDeviceGroupPeerMemoryFeaturesKHR")),
         GetDeviceGroupPresentCapabilitiesKHR: FnPtr::new(loadfn("vkGetDeviceGroupPresentCapabilitiesKHR")),
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] GetDeviceGroupSurfacePresentModes2EXT: FnPtr::new(loadfn("vkGetDeviceGroupSurfacePresentModes2EXT")),
         GetDeviceGroupSurfacePresentModesKHR: FnPtr::new(loadfn("vkGetDeviceGroupSurfacePresentModesKHR")),
         GetDeviceMemoryCommitment: FnPtr::new(loadfn("vkGetDeviceMemoryCommitment")),
         GetDeviceMemoryOpaqueCaptureAddress: FnPtr::new(loadfn("vkGetDeviceMemoryOpaqueCaptureAddress")),
         GetDeviceMemoryOpaqueCaptureAddressKHR: FnPtr::new(loadfn("vkGetDeviceMemoryOpaqueCaptureAddressKHR")),
         GetDeviceProcAddr: FnPtr::new(loadfn("vkGetDeviceProcAddr")),
         GetDeviceQueue: FnPtr::new(loadfn("vkGetDeviceQueue")),
         GetDeviceQueue2: FnPtr::new(loadfn("vkGetDeviceQueue2")),
         GetDisplayModeProperties2KHR: FnPtr::new(loadfn("vkGetDisplayModeProperties2KHR")),
         GetDisplayModePropertiesKHR: FnPtr::new(loadfn("vkGetDisplayModePropertiesKHR")),
         GetDisplayPlaneCapabilities2KHR: FnPtr::new(loadfn("vkGetDisplayPlaneCapabilities2KHR")),
         GetDisplayPlaneCapabilitiesKHR: FnPtr::new(loadfn("vkGetDisplayPlaneCapabilitiesKHR")),
         GetDisplayPlaneSupportedDisplaysKHR: FnPtr::new(loadfn("vkGetDisplayPlaneSupportedDisplaysKHR")),
         GetEventStatus: FnPtr::new(loadfn("vkGetEventStatus")),
         GetFenceFdKHR: FnPtr::new(loadfn("vkGetFenceFdKHR")),
         GetFenceStatus: FnPtr::new(loadfn("vkGetFenceStatus")),
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] GetFenceWin32HandleKHR: FnPtr::new(loadfn("vkGetFenceWin32HandleKHR")),
         GetGeneratedCommandsMemoryRequirementsNV: FnPtr::new(loadfn("vkGetGeneratedCommandsMemoryRequirementsNV")),
         GetImageDrmFormatModifierPropertiesEXT: FnPtr::new(loadfn("vkGetImageDrmFormatModifierPropertiesEXT")),
         GetImageMemoryRequirements: FnPtr::new(loadfn("vkGetImageMemoryRequirements")),
         GetImageMemoryRequirements2: FnPtr::new(loadfn("vkGetImageMemoryRequirements2")),
         GetImageMemoryRequirements2KHR: FnPtr::new(loadfn("vkGetImageMemoryRequirements2KHR")),
         GetImageSparseMemoryRequirements: FnPtr::new(loadfn("vkGetImageSparseMemoryRequirements")),
         GetImageSparseMemoryRequirements2: FnPtr::new(loadfn("vkGetImageSparseMemoryRequirements2")),
         GetImageSparseMemoryRequirements2KHR: FnPtr::new(loadfn("vkGetImageSparseMemoryRequirements2KHR")),
         GetImageSubresourceLayout: FnPtr::new(loadfn("vkGetImageSubresourceLayout")),
         GetImageViewAddressNVX: FnPtr::new(loadfn("vkGetImageViewAddressNVX")),
         GetImageViewHandleNVX: FnPtr::new(loadfn("vkGetImageViewHandleNVX")),
         GetInstanceProcAddr: FnPtr::new(loadfn("vkGetInstanceProcAddr")),
        #[cfg(any(feature = "VK_USE_PLATFORM_ANDROID_KHR"))] GetMemoryAndroidHardwareBufferANDROID: FnPtr::new(loadfn("vkGetMemoryAndroidHardwareBufferANDROID")),
         GetMemoryFdKHR: FnPtr::new(loadfn("vkGetMemoryFdKHR")),
         GetMemoryFdPropertiesKHR: FnPtr::new(loadfn("vkGetMemoryFdPropertiesKHR")),
         GetMemoryHostPointerPropertiesEXT: FnPtr::new(loadfn("vkGetMemoryHostPointerPropertiesEXT")),
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] GetMemoryWin32HandleKHR: FnPtr::new(loadfn("vkGetMemoryWin32HandleKHR")),
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] GetMemoryWin32HandleNV: FnPtr::new(loadfn("vkGetMemoryWin32HandleNV")),
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] GetMemoryWin32HandlePropertiesKHR: FnPtr::new(loadfn("vkGetMemoryWin32HandlePropertiesKHR")),
         GetPastPresentationTimingGOOGLE: FnPtr::new(loadfn("vkGetPastPresentationTimingGOOGLE")),
         GetPerformanceParameterINTEL: FnPtr::new(loadfn("vkGetPerformanceParameterINTEL")),
         GetPhysicalDeviceCalibrateableTimeDomainsEXT: FnPtr::new(loadfn("vkGetPhysicalDeviceCalibrateableTimeDomainsEXT")),
         GetPhysicalDeviceCooperativeMatrixPropertiesNV: FnPtr::new(loadfn("vkGetPhysicalDeviceCooperativeMatrixPropertiesNV")),
        #[cfg(any(feature = "VK_USE_PLATFORM_DIRECTFB_EXT"))] GetPhysicalDeviceDirectFBPresentationSupportEXT: FnPtr::new(loadfn("vkGetPhysicalDeviceDirectFBPresentationSupportEXT")),
         GetPhysicalDeviceDisplayPlaneProperties2KHR: FnPtr::new(loadfn("vkGetPhysicalDeviceDisplayPlaneProperties2KHR")),
         GetPhysicalDeviceDisplayPlanePropertiesKHR: FnPtr::new(loadfn("vkGetPhysicalDeviceDisplayPlanePropertiesKHR")),
         GetPhysicalDeviceDisplayProperties2KHR: FnPtr::new(loadfn("vkGetPhysicalDeviceDisplayProperties2KHR")),
         GetPhysicalDeviceDisplayPropertiesKHR: FnPtr::new(loadfn("vkGetPhysicalDeviceDisplayPropertiesKHR")),
         GetPhysicalDeviceExternalBufferProperties: FnPtr::new(loadfn("vkGetPhysicalDeviceExternalBufferProperties")),
         GetPhysicalDeviceExternalBufferPropertiesKHR: FnPtr::new(loadfn("vkGetPhysicalDeviceExternalBufferPropertiesKHR")),
         GetPhysicalDeviceExternalFenceProperties: FnPtr::new(loadfn("vkGetPhysicalDeviceExternalFenceProperties")),
         GetPhysicalDeviceExternalFencePropertiesKHR: FnPtr::new(loadfn("vkGetPhysicalDeviceExternalFencePropertiesKHR")),
         GetPhysicalDeviceExternalImageFormatPropertiesNV: FnPtr::new(loadfn("vkGetPhysicalDeviceExternalImageFormatPropertiesNV")),
         GetPhysicalDeviceExternalSemaphoreProperties: FnPtr::new(loadfn("vkGetPhysicalDeviceExternalSemaphoreProperties")),
         GetPhysicalDeviceExternalSemaphorePropertiesKHR: FnPtr::new(loadfn("vkGetPhysicalDeviceExternalSemaphorePropertiesKHR")),
         GetPhysicalDeviceFeatures: FnPtr::new(loadfn("vkGetPhysicalDeviceFeatures")),
         GetPhysicalDeviceFeatures2: FnPtr::new(loadfn("vkGetPhysicalDeviceFeatures2")),
         GetPhysicalDeviceFeatures2KHR: FnPtr::new(loadfn("vkGetPhysicalDeviceFeatures2KHR")),
         GetPhysicalDeviceFormatProperties: FnPtr::new(loadfn("vkGetPhysicalDeviceFormatProperties")),
         GetPhysicalDeviceFormatProperties2: FnPtr::new(loadfn("vkGetPhysicalDeviceFormatProperties2")),
         GetPhysicalDeviceFormatProperties2KHR: FnPtr::new(loadfn("vkGetPhysicalDeviceFormatProperties2KHR")),
         GetPhysicalDeviceImageFormatProperties: FnPtr::new(loadfn("vkGetPhysicalDeviceImageFormatProperties")),
         GetPhysicalDeviceImageFormatProperties2: FnPtr::new(loadfn("vkGetPhysicalDeviceImageFormatProperties2")),
         GetPhysicalDeviceImageFormatProperties2KHR: FnPtr::new(loadfn("vkGetPhysicalDeviceImageFormatProperties2KHR")),
         GetPhysicalDeviceMemoryProperties: FnPtr::new(loadfn("vkGetPhysicalDeviceMemoryProperties")),
         GetPhysicalDeviceMemoryProperties2: FnPtr::new(loadfn("vkGetPhysicalDeviceMemoryProperties2")),
         GetPhysicalDeviceMemoryProperties2KHR: FnPtr::new(loadfn("vkGetPhysicalDeviceMemoryProperties2KHR")),
         GetPhysicalDeviceMultisamplePropertiesEXT: FnPtr::new(loadfn("vkGetPhysicalDeviceMultisamplePropertiesEXT")),
         GetPhysicalDevicePresentRectanglesKHR: FnPtr::new(loadfn("vkGetPhysicalDevicePresentRectanglesKHR")),
         GetPhysicalDeviceProperties: FnPtr::new(loadfn("vkGetPhysicalDeviceProperties")),
         GetPhysicalDeviceProperties2: FnPtr::new(loadfn("vkGetPhysicalDeviceProperties2")),
         GetPhysicalDeviceProperties2KHR: FnPtr::new(loadfn("vkGetPhysicalDeviceProperties2KHR")),
         GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR: FnPtr::new(loadfn("vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR")),
         GetPhysicalDeviceQueueFamilyProperties: FnPtr::new(loadfn("vkGetPhysicalDeviceQueueFamilyProperties")),
         GetPhysicalDeviceQueueFamilyProperties2: FnPtr::new(loadfn("vkGetPhysicalDeviceQueueFamilyProperties2")),
         GetPhysicalDeviceQueueFamilyProperties2KHR: FnPtr::new(loadfn("vkGetPhysicalDeviceQueueFamilyProperties2KHR")),
         GetPhysicalDeviceSparseImageFormatProperties: FnPtr::new(loadfn("vkGetPhysicalDeviceSparseImageFormatProperties")),
         GetPhysicalDeviceSparseImageFormatProperties2: FnPtr::new(loadfn("vkGetPhysicalDeviceSparseImageFormatProperties2")),
         GetPhysicalDeviceSparseImageFormatProperties2KHR: FnPtr::new(loadfn("vkGetPhysicalDeviceSparseImageFormatProperties2KHR")),
         GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV: FnPtr::new(loadfn("vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV")),
         GetPhysicalDeviceSurfaceCapabilities2EXT: FnPtr::new(loadfn("vkGetPhysicalDeviceSurfaceCapabilities2EXT")),
         GetPhysicalDeviceSurfaceCapabilities2KHR: FnPtr::new(loadfn("vkGetPhysicalDeviceSurfaceCapabilities2KHR")),
         GetPhysicalDeviceSurfaceCapabilitiesKHR: FnPtr::new(loadfn("vkGetPhysicalDeviceSurfaceCapabilitiesKHR")),
         GetPhysicalDeviceSurfaceFormats2KHR: FnPtr::new(loadfn("vkGetPhysicalDeviceSurfaceFormats2KHR")),
         GetPhysicalDeviceSurfaceFormatsKHR: FnPtr::new(loadfn("vkGetPhysicalDeviceSurfaceFormatsKHR")),
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] GetPhysicalDeviceSurfacePresentModes2EXT: FnPtr::new(loadfn("vkGetPhysicalDeviceSurfacePresentModes2EXT")),
         GetPhysicalDeviceSurfacePresentModesKHR: FnPtr::new(loadfn("vkGetPhysicalDeviceSurfacePresentModesKHR")),
         GetPhysicalDeviceSurfaceSupportKHR: FnPtr::new(loadfn("vkGetPhysicalDeviceSurfaceSupportKHR")),
         GetPhysicalDeviceToolPropertiesEXT: FnPtr::new(loadfn("vkGetPhysicalDeviceToolPropertiesEXT")),
        #[cfg(any(feature = "VK_USE_PLATFORM_WAYLAND_KHR"))] GetPhysicalDeviceWaylandPresentationSupportKHR: FnPtr::new(loadfn("vkGetPhysicalDeviceWaylandPresentationSupportKHR")),
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] GetPhysicalDeviceWin32PresentationSupportKHR: FnPtr::new(loadfn("vkGetPhysicalDeviceWin32PresentationSupportKHR")),
        #[cfg(any(feature = "VK_USE_PLATFORM_XCB_KHR"))] GetPhysicalDeviceXcbPresentationSupportKHR: FnPtr::new(loadfn("vkGetPhysicalDeviceXcbPresentationSupportKHR")),
        #[cfg(any(feature = "VK_USE_PLATFORM_XLIB_KHR"))] GetPhysicalDeviceXlibPresentationSupportKHR: FnPtr::new(loadfn("vkGetPhysicalDeviceXlibPresentationSupportKHR")),
         GetPipelineCacheData: FnPtr::new(loadfn("vkGetPipelineCacheData")),
         GetPipelineExecutableInternalRepresentationsKHR: FnPtr::new(loadfn("vkGetPipelineExecutableInternalRepresentationsKHR")),
         GetPipelineExecutablePropertiesKHR: FnPtr::new(loadfn("vkGetPipelineExecutablePropertiesKHR")),
         GetPipelineExecutableStatisticsKHR: FnPtr::new(loadfn("vkGetPipelineExecutableStatisticsKHR")),
         GetPrivateDataEXT: FnPtr::new(loadfn("vkGetPrivateDataEXT")),
         GetQueryPoolResults: FnPtr::new(loadfn("vkGetQueryPoolResults")),
         GetQueueCheckpointDataNV: FnPtr::new(loadfn("vkGetQueueCheckpointDataNV")),
        #[cfg(any(feature = "VK_USE_PLATFORM_XLIB_XRANDR_EXT"))] GetRandROutputDisplayEXT: FnPtr::new(loadfn("vkGetRandROutputDisplayEXT")),
         GetRayTracingShaderGroupHandlesNV: FnPtr::new(loadfn("vkGetRayTracingShaderGroupHandlesNV")),
         GetRefreshCycleDurationGOOGLE: FnPtr::new(loadfn("vkGetRefreshCycleDurationGOOGLE")),
         GetRenderAreaGranularity: FnPtr::new(loadfn("vkGetRenderAreaGranularity")),
         GetSemaphoreCounterValue: FnPtr::new(loadfn("vkGetSemaphoreCounterValue")),
         GetSemaphoreCounterValueKHR: FnPtr::new(loadfn("vkGetSemaphoreCounterValueKHR")),
         GetSemaphoreFdKHR: FnPtr::new(loadfn("vkGetSemaphoreFdKHR")),
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] GetSemaphoreWin32HandleKHR: FnPtr::new(loadfn("vkGetSemaphoreWin32HandleKHR")),
         GetShaderInfoAMD: FnPtr::new(loadfn("vkGetShaderInfoAMD")),
         GetSwapchainCounterEXT: FnPtr::new(loadfn("vkGetSwapchainCounterEXT")),
         GetSwapchainImagesKHR: FnPtr::new(loadfn("vkGetSwapchainImagesKHR")),
         GetSwapchainStatusKHR: FnPtr::new(loadfn("vkGetSwapchainStatusKHR")),
         GetValidationCacheDataEXT: FnPtr::new(loadfn("vkGetValidationCacheDataEXT")),
         ImportFenceFdKHR: FnPtr::new(loadfn("vkImportFenceFdKHR")),
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] ImportFenceWin32HandleKHR: FnPtr::new(loadfn("vkImportFenceWin32HandleKHR")),
         ImportSemaphoreFdKHR: FnPtr::new(loadfn("vkImportSemaphoreFdKHR")),
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] ImportSemaphoreWin32HandleKHR: FnPtr::new(loadfn("vkImportSemaphoreWin32HandleKHR")),
         InitializePerformanceApiINTEL: FnPtr::new(loadfn("vkInitializePerformanceApiINTEL")),
         InvalidateMappedMemoryRanges: FnPtr::new(loadfn("vkInvalidateMappedMemoryRanges")),
         MapMemory: FnPtr::new(loadfn("vkMapMemory")),
         MergePipelineCaches: FnPtr::new(loadfn("vkMergePipelineCaches")),
         MergeValidationCachesEXT: FnPtr::new(loadfn("vkMergeValidationCachesEXT")),
         QueueBeginDebugUtilsLabelEXT: FnPtr::new(loadfn("vkQueueBeginDebugUtilsLabelEXT")),
         QueueBindSparse: FnPtr::new(loadfn("vkQueueBindSparse")),
         QueueEndDebugUtilsLabelEXT: FnPtr::new(loadfn("vkQueueEndDebugUtilsLabelEXT")),
         QueueInsertDebugUtilsLabelEXT: FnPtr::new(loadfn("vkQueueInsertDebugUtilsLabelEXT")),
         QueuePresentKHR: FnPtr::new(loadfn("vkQueuePresentKHR")),
         QueueSetPerformanceConfigurationINTEL: FnPtr::new(loadfn("vkQueueSetPerformanceConfigurationINTEL")),
         QueueSubmit: FnPtr::new(loadfn("vkQueueSubmit")),
         QueueWaitIdle: FnPtr::new(loadfn("vkQueueWaitIdle")),
         RegisterDeviceEventEXT: FnPtr::new(loadfn("vkRegisterDeviceEventEXT")),
         RegisterDisplayEventEXT: FnPtr::new(loadfn("vkRegisterDisplayEventEXT")),
         ReleaseDisplayEXT: FnPtr::new(loadfn("vkReleaseDisplayEXT")),
        #[cfg(any(feature = "VK_USE_PLATFORM_WIN32_KHR"))] ReleaseFullScreenExclusiveModeEXT: FnPtr::new(loadfn("vkReleaseFullScreenExclusiveModeEXT")),
         ReleasePerformanceConfigurationINTEL: FnPtr::new(loadfn("vkReleasePerformanceConfigurationINTEL")),
         ReleaseProfilingLockKHR: FnPtr::new(loadfn("vkReleaseProfilingLockKHR")),
         ResetCommandBuffer: FnPtr::new(loadfn("vkResetCommandBuffer")),
         ResetCommandPool: FnPtr::new(loadfn("vkResetCommandPool")),
         ResetDescriptorPool: FnPtr::new(loadfn("vkResetDescriptorPool")),
         ResetEvent: FnPtr::new(loadfn("vkResetEvent")),
         ResetFences: FnPtr::new(loadfn("vkResetFences")),
         ResetQueryPool: FnPtr::new(loadfn("vkResetQueryPool")),
         ResetQueryPoolEXT: FnPtr::new(loadfn("vkResetQueryPoolEXT")),
         SetDebugUtilsObjectNameEXT: FnPtr::new(loadfn("vkSetDebugUtilsObjectNameEXT")),
         SetDebugUtilsObjectTagEXT: FnPtr::new(loadfn("vkSetDebugUtilsObjectTagEXT")),
         SetEvent: FnPtr::new(loadfn("vkSetEvent")),
         SetHdrMetadataEXT: FnPtr::new(loadfn("vkSetHdrMetadataEXT")),
         SetLocalDimmingAMD: FnPtr::new(loadfn("vkSetLocalDimmingAMD")),
         SetPrivateDataEXT: FnPtr::new(loadfn("vkSetPrivateDataEXT")),
         SignalSemaphore: FnPtr::new(loadfn("vkSignalSemaphore")),
         SignalSemaphoreKHR: FnPtr::new(loadfn("vkSignalSemaphoreKHR")),
         SubmitDebugUtilsMessageEXT: FnPtr::new(loadfn("vkSubmitDebugUtilsMessageEXT")),
         TrimCommandPool: FnPtr::new(loadfn("vkTrimCommandPool")),
         TrimCommandPoolKHR: FnPtr::new(loadfn("vkTrimCommandPoolKHR")),
         UninitializePerformanceApiINTEL: FnPtr::new(loadfn("vkUninitializePerformanceApiINTEL")),
         UnmapMemory: FnPtr::new(loadfn("vkUnmapMemory")),
         UpdateDescriptorSetWithTemplate: FnPtr::new(loadfn("vkUpdateDescriptorSetWithTemplate")),
         UpdateDescriptorSetWithTemplateKHR: FnPtr::new(loadfn("vkUpdateDescriptorSetWithTemplateKHR")),
         UpdateDescriptorSets: FnPtr::new(loadfn("vkUpdateDescriptorSets")),
         WaitForFences: FnPtr::new(loadfn("vkWaitForFences")),
         WaitSemaphores: FnPtr::new(loadfn("vkWaitSemaphores")),
         WaitSemaphoresKHR: FnPtr::new(loadfn("vkWaitSemaphoresKHR")),
    };

     ctx.BindBufferMemory2.aliased(&ctx.BindBufferMemory2KHR);
     ctx.BindBufferMemory2KHR.aliased(&ctx.BindBufferMemory2);
     ctx.BindImageMemory2.aliased(&ctx.BindImageMemory2KHR);
     ctx.BindImageMemory2KHR.aliased(&ctx.BindImageMemory2);
     ctx.CmdBeginRenderPass2.aliased(&ctx.CmdBeginRenderPass2KHR);
     ctx.CmdBeginRenderPass2KHR.aliased(&ctx.CmdBeginRenderPass2);
     ctx.CmdDispatchBase.aliased(&ctx.CmdDispatchBaseKHR);
     ctx.CmdDispatchBaseKHR.aliased(&ctx.CmdDispatchBase);
     ctx.CmdDrawIndexedIndirectCount.aliased(&ctx.CmdDrawIndexedIndirectCountAMD);
     ctx.CmdDrawIndexedIndirectCount.aliased(&ctx.CmdDrawIndexedIndirectCountKHR);
     ctx.CmdDrawIndexedIndirectCountAMD.aliased(&ctx.CmdDrawIndexedIndirectCount);
     ctx.CmdDrawIndexedIndirectCountAMD.aliased(&ctx.CmdDrawIndexedIndirectCountKHR);
     ctx.CmdDrawIndexedIndirectCountKHR.aliased(&ctx.CmdDrawIndexedIndirectCount);
     ctx.CmdDrawIndexedIndirectCountKHR.aliased(&ctx.CmdDrawIndexedIndirectCountAMD);
     ctx.CmdDrawIndirectCount.aliased(&ctx.CmdDrawIndirectCountAMD);
     ctx.CmdDrawIndirectCount.aliased(&ctx.CmdDrawIndirectCountKHR);
     ctx.CmdDrawIndirectCountAMD.aliased(&ctx.CmdDrawIndirectCount);
     ctx.CmdDrawIndirectCountAMD.aliased(&ctx.CmdDrawIndirectCountKHR);
     ctx.CmdDrawIndirectCountKHR.aliased(&ctx.CmdDrawIndirectCount);
     ctx.CmdDrawIndirectCountKHR.aliased(&ctx.CmdDrawIndirectCountAMD);
     ctx.CmdEndRenderPass2.aliased(&ctx.CmdEndRenderPass2KHR);
     ctx.CmdEndRenderPass2KHR.aliased(&ctx.CmdEndRenderPass2);
     ctx.CmdNextSubpass2.aliased(&ctx.CmdNextSubpass2KHR);
     ctx.CmdNextSubpass2KHR.aliased(&ctx.CmdNextSubpass2);
     ctx.CmdSetDeviceMask.aliased(&ctx.CmdSetDeviceMaskKHR);
     ctx.CmdSetDeviceMaskKHR.aliased(&ctx.CmdSetDeviceMask);
     ctx.CreateDescriptorUpdateTemplate.aliased(&ctx.CreateDescriptorUpdateTemplateKHR);
     ctx.CreateDescriptorUpdateTemplateKHR.aliased(&ctx.CreateDescriptorUpdateTemplate);
     ctx.CreateRenderPass2.aliased(&ctx.CreateRenderPass2KHR);
     ctx.CreateRenderPass2KHR.aliased(&ctx.CreateRenderPass2);
     ctx.CreateSamplerYcbcrConversion.aliased(&ctx.CreateSamplerYcbcrConversionKHR);
     ctx.CreateSamplerYcbcrConversionKHR.aliased(&ctx.CreateSamplerYcbcrConversion);
     ctx.DestroyDescriptorUpdateTemplate.aliased(&ctx.DestroyDescriptorUpdateTemplateKHR);
     ctx.DestroyDescriptorUpdateTemplateKHR.aliased(&ctx.DestroyDescriptorUpdateTemplate);
     ctx.DestroySamplerYcbcrConversion.aliased(&ctx.DestroySamplerYcbcrConversionKHR);
     ctx.DestroySamplerYcbcrConversionKHR.aliased(&ctx.DestroySamplerYcbcrConversion);
     ctx.EnumeratePhysicalDeviceGroups.aliased(&ctx.EnumeratePhysicalDeviceGroupsKHR);
     ctx.EnumeratePhysicalDeviceGroupsKHR.aliased(&ctx.EnumeratePhysicalDeviceGroups);
     ctx.GetBufferDeviceAddress.aliased(&ctx.GetBufferDeviceAddressEXT);
     ctx.GetBufferDeviceAddress.aliased(&ctx.GetBufferDeviceAddressKHR);
     ctx.GetBufferDeviceAddressEXT.aliased(&ctx.GetBufferDeviceAddress);
     ctx.GetBufferDeviceAddressEXT.aliased(&ctx.GetBufferDeviceAddressKHR);
     ctx.GetBufferDeviceAddressKHR.aliased(&ctx.GetBufferDeviceAddress);
     ctx.GetBufferDeviceAddressKHR.aliased(&ctx.GetBufferDeviceAddressEXT);
     ctx.GetBufferMemoryRequirements2.aliased(&ctx.GetBufferMemoryRequirements2KHR);
     ctx.GetBufferMemoryRequirements2KHR.aliased(&ctx.GetBufferMemoryRequirements2);
     ctx.GetBufferOpaqueCaptureAddress.aliased(&ctx.GetBufferOpaqueCaptureAddressKHR);
     ctx.GetBufferOpaqueCaptureAddressKHR.aliased(&ctx.GetBufferOpaqueCaptureAddress);
     ctx.GetDescriptorSetLayoutSupport.aliased(&ctx.GetDescriptorSetLayoutSupportKHR);
     ctx.GetDescriptorSetLayoutSupportKHR.aliased(&ctx.GetDescriptorSetLayoutSupport);
     ctx.GetDeviceGroupPeerMemoryFeatures.aliased(&ctx.GetDeviceGroupPeerMemoryFeaturesKHR);
     ctx.GetDeviceGroupPeerMemoryFeaturesKHR.aliased(&ctx.GetDeviceGroupPeerMemoryFeatures);
     ctx.GetDeviceMemoryOpaqueCaptureAddress.aliased(&ctx.GetDeviceMemoryOpaqueCaptureAddressKHR);
     ctx.GetDeviceMemoryOpaqueCaptureAddressKHR.aliased(&ctx.GetDeviceMemoryOpaqueCaptureAddress);
     ctx.GetImageMemoryRequirements2.aliased(&ctx.GetImageMemoryRequirements2KHR);
     ctx.GetImageMemoryRequirements2KHR.aliased(&ctx.GetImageMemoryRequirements2);
     ctx.GetImageSparseMemoryRequirements2.aliased(&ctx.GetImageSparseMemoryRequirements2KHR);
     ctx.GetImageSparseMemoryRequirements2KHR.aliased(&ctx.GetImageSparseMemoryRequirements2);
     ctx.GetPhysicalDeviceExternalBufferProperties.aliased(&ctx.GetPhysicalDeviceExternalBufferPropertiesKHR);
     ctx.GetPhysicalDeviceExternalBufferPropertiesKHR.aliased(&ctx.GetPhysicalDeviceExternalBufferProperties);
     ctx.GetPhysicalDeviceExternalFenceProperties.aliased(&ctx.GetPhysicalDeviceExternalFencePropertiesKHR);
     ctx.GetPhysicalDeviceExternalFencePropertiesKHR.aliased(&ctx.GetPhysicalDeviceExternalFenceProperties);
     ctx.GetPhysicalDeviceExternalSemaphoreProperties.aliased(&ctx.GetPhysicalDeviceExternalSemaphorePropertiesKHR);
     ctx.GetPhysicalDeviceExternalSemaphorePropertiesKHR.aliased(&ctx.GetPhysicalDeviceExternalSemaphoreProperties);
     ctx.GetPhysicalDeviceFeatures2.aliased(&ctx.GetPhysicalDeviceFeatures2KHR);
     ctx.GetPhysicalDeviceFeatures2KHR.aliased(&ctx.GetPhysicalDeviceFeatures2);
     ctx.GetPhysicalDeviceFormatProperties2.aliased(&ctx.GetPhysicalDeviceFormatProperties2KHR);
     ctx.GetPhysicalDeviceFormatProperties2KHR.aliased(&ctx.GetPhysicalDeviceFormatProperties2);
     ctx.GetPhysicalDeviceImageFormatProperties2.aliased(&ctx.GetPhysicalDeviceImageFormatProperties2KHR);
     ctx.GetPhysicalDeviceImageFormatProperties2KHR.aliased(&ctx.GetPhysicalDeviceImageFormatProperties2);
     ctx.GetPhysicalDeviceMemoryProperties2.aliased(&ctx.GetPhysicalDeviceMemoryProperties2KHR);
     ctx.GetPhysicalDeviceMemoryProperties2KHR.aliased(&ctx.GetPhysicalDeviceMemoryProperties2);
     ctx.GetPhysicalDeviceProperties2.aliased(&ctx.GetPhysicalDeviceProperties2KHR);
     ctx.GetPhysicalDeviceProperties2KHR.aliased(&ctx.GetPhysicalDeviceProperties2);
     ctx.GetPhysicalDeviceQueueFamilyProperties2.aliased(&ctx.GetPhysicalDeviceQueueFamilyProperties2KHR);
     ctx.GetPhysicalDeviceQueueFamilyProperties2KHR.aliased(&ctx.GetPhysicalDeviceQueueFamilyProperties2);
     ctx.GetPhysicalDeviceSparseImageFormatProperties2.aliased(&ctx.GetPhysicalDeviceSparseImageFormatProperties2KHR);
     ctx.GetPhysicalDeviceSparseImageFormatProperties2KHR.aliased(&ctx.GetPhysicalDeviceSparseImageFormatProperties2);
     ctx.GetSemaphoreCounterValue.aliased(&ctx.GetSemaphoreCounterValueKHR);
     ctx.GetSemaphoreCounterValueKHR.aliased(&ctx.GetSemaphoreCounterValue);
     ctx.ResetQueryPool.aliased(&ctx.ResetQueryPoolEXT);
     ctx.ResetQueryPoolEXT.aliased(&ctx.ResetQueryPool);
     ctx.SignalSemaphore.aliased(&ctx.SignalSemaphoreKHR);
     ctx.SignalSemaphoreKHR.aliased(&ctx.SignalSemaphore);
     ctx.TrimCommandPool.aliased(&ctx.TrimCommandPoolKHR);
     ctx.TrimCommandPoolKHR.aliased(&ctx.TrimCommandPool);
     ctx.UpdateDescriptorSetWithTemplate.aliased(&ctx.UpdateDescriptorSetWithTemplateKHR);
     ctx.UpdateDescriptorSetWithTemplateKHR.aliased(&ctx.UpdateDescriptorSetWithTemplate);
     ctx.WaitSemaphores.aliased(&ctx.WaitSemaphoresKHR);
     ctx.WaitSemaphoresKHR.aliased(&ctx.WaitSemaphores);

     ctx
}

